/// <remarks>
/// Copyright 2007 - Steve Stanton. This file is part of Backsight
///
/// Backsight is free software; you can redistribute it and/or modify it under the terms
/// of the GNU Lesser General Public License as published by the Free Software Foundation;
/// either version 3 of the License, or (at your option) any later version.
///
/// Backsight is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
/// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
/// See the GNU Lesser General Public License for more details.
///
/// You should have received a copy of the GNU Lesser General Public License
/// along with this program. If not, see <http://www.gnu.org/licenses/>.
/// </remarks>

using System;

namespace Backsight.Editor
{
    /// <written by="Steve Stanton" on="22-AUG-2007" />
    /// <summary>
    /// A handle on some sort of object known to Backsight. This supports
    /// the possibility that objects may well be stored in a relational database
    /// (the handle can be used to cross-reference things).
    /// </summary>
    [Serializable]
    class DataHandle
    {
        #region Class data

        /// <summary>
        /// The unique ID for the handle.
        /// </summary>
        readonly InternalIdValue m_InternalId;

        #endregion

        #region Constructors

        /// <summary>
        /// Creates a new <c>DataHandle</c> with an internal ID value generated by
        /// the supplied factory.
        /// </summary>
        /// <param name="idFactory">The factory used to obtain unique IDs</param>
        protected DataHandle(IInternalIdFactory idFactory)
        {
            m_InternalId = idFactory.CreateNextInternalId();
        }

        #endregion

        /// <summary>
        /// Override returns a formatted version of this handle's unique ID.
        /// </summary>
        /// <returns>The <c>DataId</c> property</returns>
        public override string ToString()
        {
            return DataId;
        }

        /// <summary>
        /// The formatted ID associated with this handle.
        /// </summary>
        public string DataId
        {
            get { return m_InternalId.ToString(); }
        }
    }
}
