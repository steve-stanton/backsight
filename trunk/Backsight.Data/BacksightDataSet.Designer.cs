//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Backsight.Data {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("BacksightDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class BacksightDataSet : System.Data.DataSet {
        
        private ArchiveDataTable tableArchive;
        
        private CheckoutDataTable tableCheckout;
        
        private DomainDataTable tableDomain;
        
        private DomainListDataTable tableDomainList;
        
        private EditionDataTable tableEdition;
        
        private EntityDataTable tableEntity;
        
        private EntitySchemaDataTable tableEntitySchema;
        
        private FieldDataTable tableField;
        
        private FontDataTable tableFont;
        
        private IdAllocationDataTable tableIdAllocation;
        
        private IdFreeDataTable tableIdFree;
        
        private IdGroupDataTable tableIdGroup;
        
        private JobDataTable tableJob;
        
        private LayerDataTable tableLayer;
        
        private MapDataTable tableMap;
        
        private MapUserDataTable tableMapUser;
        
        private PropertyDataTable tableProperty;
        
        private SchemaDataTable tableSchema;
        
        private SchemaFieldDataTable tableSchemaField;
        
        private SchemaTemplateDataTable tableSchemaTemplate;
        
        private SysIdDataTable tableSysId;
        
        private TemplateDataTable tableTemplate;
        
        private ThemeDataTable tableTheme;
        
        private System.Data.DataRelation relationArchiveArchiveForeignKey;
        
        private System.Data.DataRelation relationArchiveJobForeignKey;
        
        private System.Data.DataRelation relationArchiveMapForeignKey;
        
        private System.Data.DataRelation relationArchiveMapUserForeignKey;
        
        private System.Data.DataRelation relationCheckoutJobForeignKey;
        
        private System.Data.DataRelation relationCheckoutMapForeignKey;
        
        private System.Data.DataRelation relationCheckoutMapUserForeignKey;
        
        private System.Data.DataRelation relationDomainListDomainForeignKey;
        
        private System.Data.DataRelation relationEntityFontForeignKey;
        
        private System.Data.DataRelation relationEntityIdGroupForeignKey;
        
        private System.Data.DataRelation relationEntityLayerForeignKey;
        
        private System.Data.DataRelation relationEntitySchemaEntityForeignKey;
        
        private System.Data.DataRelation relationEntitySchemaSchemaForeignKey;
        
        private System.Data.DataRelation relationIdAllocationIdGroupForeignKey;
        
        private System.Data.DataRelation relationIdFreeIdGroupForeignKey;
        
        private System.Data.DataRelation relationLayerEntityForeignKey1;
        
        private System.Data.DataRelation relationLayerEntityForeignKey2;
        
        private System.Data.DataRelation relationLayerEntityForeignKey3;
        
        private System.Data.DataRelation relationLayerEntityForeignKey4;
        
        private System.Data.DataRelation relationLayerThemeForeignKey;
        
        private System.Data.DataRelation relationMapArchiveForeignKey;
        
        private System.Data.DataRelation relationMapJobForeignKey;
        
        private System.Data.DataRelation relationMapMapUserForeignKey;
        
        private System.Data.DataRelation relationSchemaFieldFieldForeignKey;
        
        private System.Data.DataRelation relationSchemaFieldSchamaForeignKey;
        
        private System.Data.DataRelation relationSchemaTemplateSchemaForeignKey;
        
        private System.Data.DataRelation relationSchemaTemplateTemplateForeignKey;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BacksightDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BacksightDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Archive"] != null)) {
                    base.Tables.Add(new ArchiveDataTable(ds.Tables["Archive"]));
                }
                if ((ds.Tables["Checkout"] != null)) {
                    base.Tables.Add(new CheckoutDataTable(ds.Tables["Checkout"]));
                }
                if ((ds.Tables["Domain"] != null)) {
                    base.Tables.Add(new DomainDataTable(ds.Tables["Domain"]));
                }
                if ((ds.Tables["DomainList"] != null)) {
                    base.Tables.Add(new DomainListDataTable(ds.Tables["DomainList"]));
                }
                if ((ds.Tables["Edition"] != null)) {
                    base.Tables.Add(new EditionDataTable(ds.Tables["Edition"]));
                }
                if ((ds.Tables["Entity"] != null)) {
                    base.Tables.Add(new EntityDataTable(ds.Tables["Entity"]));
                }
                if ((ds.Tables["EntitySchema"] != null)) {
                    base.Tables.Add(new EntitySchemaDataTable(ds.Tables["EntitySchema"]));
                }
                if ((ds.Tables["Field"] != null)) {
                    base.Tables.Add(new FieldDataTable(ds.Tables["Field"]));
                }
                if ((ds.Tables["Font"] != null)) {
                    base.Tables.Add(new FontDataTable(ds.Tables["Font"]));
                }
                if ((ds.Tables["IdAllocation"] != null)) {
                    base.Tables.Add(new IdAllocationDataTable(ds.Tables["IdAllocation"]));
                }
                if ((ds.Tables["IdFree"] != null)) {
                    base.Tables.Add(new IdFreeDataTable(ds.Tables["IdFree"]));
                }
                if ((ds.Tables["IdGroup"] != null)) {
                    base.Tables.Add(new IdGroupDataTable(ds.Tables["IdGroup"]));
                }
                if ((ds.Tables["Job"] != null)) {
                    base.Tables.Add(new JobDataTable(ds.Tables["Job"]));
                }
                if ((ds.Tables["Layer"] != null)) {
                    base.Tables.Add(new LayerDataTable(ds.Tables["Layer"]));
                }
                if ((ds.Tables["Map"] != null)) {
                    base.Tables.Add(new MapDataTable(ds.Tables["Map"]));
                }
                if ((ds.Tables["MapUser"] != null)) {
                    base.Tables.Add(new MapUserDataTable(ds.Tables["MapUser"]));
                }
                if ((ds.Tables["Property"] != null)) {
                    base.Tables.Add(new PropertyDataTable(ds.Tables["Property"]));
                }
                if ((ds.Tables["Schema"] != null)) {
                    base.Tables.Add(new SchemaDataTable(ds.Tables["Schema"]));
                }
                if ((ds.Tables["SchemaField"] != null)) {
                    base.Tables.Add(new SchemaFieldDataTable(ds.Tables["SchemaField"]));
                }
                if ((ds.Tables["SchemaTemplate"] != null)) {
                    base.Tables.Add(new SchemaTemplateDataTable(ds.Tables["SchemaTemplate"]));
                }
                if ((ds.Tables["SysId"] != null)) {
                    base.Tables.Add(new SysIdDataTable(ds.Tables["SysId"]));
                }
                if ((ds.Tables["Template"] != null)) {
                    base.Tables.Add(new TemplateDataTable(ds.Tables["Template"]));
                }
                if ((ds.Tables["Theme"] != null)) {
                    base.Tables.Add(new ThemeDataTable(ds.Tables["Theme"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ArchiveDataTable Archive {
            get {
                return this.tableArchive;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CheckoutDataTable Checkout {
            get {
                return this.tableCheckout;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DomainDataTable Domain {
            get {
                return this.tableDomain;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DomainListDataTable DomainList {
            get {
                return this.tableDomainList;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EditionDataTable Edition {
            get {
                return this.tableEdition;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EntityDataTable Entity {
            get {
                return this.tableEntity;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EntitySchemaDataTable EntitySchema {
            get {
                return this.tableEntitySchema;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FieldDataTable Field {
            get {
                return this.tableField;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FontDataTable Font {
            get {
                return this.tableFont;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IdAllocationDataTable IdAllocation {
            get {
                return this.tableIdAllocation;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IdFreeDataTable IdFree {
            get {
                return this.tableIdFree;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IdGroupDataTable IdGroup {
            get {
                return this.tableIdGroup;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JobDataTable Job {
            get {
                return this.tableJob;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LayerDataTable Layer {
            get {
                return this.tableLayer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MapDataTable Map {
            get {
                return this.tableMap;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MapUserDataTable MapUser {
            get {
                return this.tableMapUser;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PropertyDataTable Property {
            get {
                return this.tableProperty;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SchemaDataTable Schema {
            get {
                return this.tableSchema;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SchemaFieldDataTable SchemaField {
            get {
                return this.tableSchemaField;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SchemaTemplateDataTable SchemaTemplate {
            get {
                return this.tableSchemaTemplate;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SysIdDataTable SysId {
            get {
                return this.tableSysId;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TemplateDataTable Template {
            get {
                return this.tableTemplate;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ThemeDataTable Theme {
            get {
                return this.tableTheme;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            BacksightDataSet cln = ((BacksightDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Archive"] != null)) {
                    base.Tables.Add(new ArchiveDataTable(ds.Tables["Archive"]));
                }
                if ((ds.Tables["Checkout"] != null)) {
                    base.Tables.Add(new CheckoutDataTable(ds.Tables["Checkout"]));
                }
                if ((ds.Tables["Domain"] != null)) {
                    base.Tables.Add(new DomainDataTable(ds.Tables["Domain"]));
                }
                if ((ds.Tables["DomainList"] != null)) {
                    base.Tables.Add(new DomainListDataTable(ds.Tables["DomainList"]));
                }
                if ((ds.Tables["Edition"] != null)) {
                    base.Tables.Add(new EditionDataTable(ds.Tables["Edition"]));
                }
                if ((ds.Tables["Entity"] != null)) {
                    base.Tables.Add(new EntityDataTable(ds.Tables["Entity"]));
                }
                if ((ds.Tables["EntitySchema"] != null)) {
                    base.Tables.Add(new EntitySchemaDataTable(ds.Tables["EntitySchema"]));
                }
                if ((ds.Tables["Field"] != null)) {
                    base.Tables.Add(new FieldDataTable(ds.Tables["Field"]));
                }
                if ((ds.Tables["Font"] != null)) {
                    base.Tables.Add(new FontDataTable(ds.Tables["Font"]));
                }
                if ((ds.Tables["IdAllocation"] != null)) {
                    base.Tables.Add(new IdAllocationDataTable(ds.Tables["IdAllocation"]));
                }
                if ((ds.Tables["IdFree"] != null)) {
                    base.Tables.Add(new IdFreeDataTable(ds.Tables["IdFree"]));
                }
                if ((ds.Tables["IdGroup"] != null)) {
                    base.Tables.Add(new IdGroupDataTable(ds.Tables["IdGroup"]));
                }
                if ((ds.Tables["Job"] != null)) {
                    base.Tables.Add(new JobDataTable(ds.Tables["Job"]));
                }
                if ((ds.Tables["Layer"] != null)) {
                    base.Tables.Add(new LayerDataTable(ds.Tables["Layer"]));
                }
                if ((ds.Tables["Map"] != null)) {
                    base.Tables.Add(new MapDataTable(ds.Tables["Map"]));
                }
                if ((ds.Tables["MapUser"] != null)) {
                    base.Tables.Add(new MapUserDataTable(ds.Tables["MapUser"]));
                }
                if ((ds.Tables["Property"] != null)) {
                    base.Tables.Add(new PropertyDataTable(ds.Tables["Property"]));
                }
                if ((ds.Tables["Schema"] != null)) {
                    base.Tables.Add(new SchemaDataTable(ds.Tables["Schema"]));
                }
                if ((ds.Tables["SchemaField"] != null)) {
                    base.Tables.Add(new SchemaFieldDataTable(ds.Tables["SchemaField"]));
                }
                if ((ds.Tables["SchemaTemplate"] != null)) {
                    base.Tables.Add(new SchemaTemplateDataTable(ds.Tables["SchemaTemplate"]));
                }
                if ((ds.Tables["SysId"] != null)) {
                    base.Tables.Add(new SysIdDataTable(ds.Tables["SysId"]));
                }
                if ((ds.Tables["Template"] != null)) {
                    base.Tables.Add(new TemplateDataTable(ds.Tables["Template"]));
                }
                if ((ds.Tables["Theme"] != null)) {
                    base.Tables.Add(new ThemeDataTable(ds.Tables["Theme"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableArchive = ((ArchiveDataTable)(base.Tables["Archive"]));
            if ((initTable == true)) {
                if ((this.tableArchive != null)) {
                    this.tableArchive.InitVars();
                }
            }
            this.tableCheckout = ((CheckoutDataTable)(base.Tables["Checkout"]));
            if ((initTable == true)) {
                if ((this.tableCheckout != null)) {
                    this.tableCheckout.InitVars();
                }
            }
            this.tableDomain = ((DomainDataTable)(base.Tables["Domain"]));
            if ((initTable == true)) {
                if ((this.tableDomain != null)) {
                    this.tableDomain.InitVars();
                }
            }
            this.tableDomainList = ((DomainListDataTable)(base.Tables["DomainList"]));
            if ((initTable == true)) {
                if ((this.tableDomainList != null)) {
                    this.tableDomainList.InitVars();
                }
            }
            this.tableEdition = ((EditionDataTable)(base.Tables["Edition"]));
            if ((initTable == true)) {
                if ((this.tableEdition != null)) {
                    this.tableEdition.InitVars();
                }
            }
            this.tableEntity = ((EntityDataTable)(base.Tables["Entity"]));
            if ((initTable == true)) {
                if ((this.tableEntity != null)) {
                    this.tableEntity.InitVars();
                }
            }
            this.tableEntitySchema = ((EntitySchemaDataTable)(base.Tables["EntitySchema"]));
            if ((initTable == true)) {
                if ((this.tableEntitySchema != null)) {
                    this.tableEntitySchema.InitVars();
                }
            }
            this.tableField = ((FieldDataTable)(base.Tables["Field"]));
            if ((initTable == true)) {
                if ((this.tableField != null)) {
                    this.tableField.InitVars();
                }
            }
            this.tableFont = ((FontDataTable)(base.Tables["Font"]));
            if ((initTable == true)) {
                if ((this.tableFont != null)) {
                    this.tableFont.InitVars();
                }
            }
            this.tableIdAllocation = ((IdAllocationDataTable)(base.Tables["IdAllocation"]));
            if ((initTable == true)) {
                if ((this.tableIdAllocation != null)) {
                    this.tableIdAllocation.InitVars();
                }
            }
            this.tableIdFree = ((IdFreeDataTable)(base.Tables["IdFree"]));
            if ((initTable == true)) {
                if ((this.tableIdFree != null)) {
                    this.tableIdFree.InitVars();
                }
            }
            this.tableIdGroup = ((IdGroupDataTable)(base.Tables["IdGroup"]));
            if ((initTable == true)) {
                if ((this.tableIdGroup != null)) {
                    this.tableIdGroup.InitVars();
                }
            }
            this.tableJob = ((JobDataTable)(base.Tables["Job"]));
            if ((initTable == true)) {
                if ((this.tableJob != null)) {
                    this.tableJob.InitVars();
                }
            }
            this.tableLayer = ((LayerDataTable)(base.Tables["Layer"]));
            if ((initTable == true)) {
                if ((this.tableLayer != null)) {
                    this.tableLayer.InitVars();
                }
            }
            this.tableMap = ((MapDataTable)(base.Tables["Map"]));
            if ((initTable == true)) {
                if ((this.tableMap != null)) {
                    this.tableMap.InitVars();
                }
            }
            this.tableMapUser = ((MapUserDataTable)(base.Tables["MapUser"]));
            if ((initTable == true)) {
                if ((this.tableMapUser != null)) {
                    this.tableMapUser.InitVars();
                }
            }
            this.tableProperty = ((PropertyDataTable)(base.Tables["Property"]));
            if ((initTable == true)) {
                if ((this.tableProperty != null)) {
                    this.tableProperty.InitVars();
                }
            }
            this.tableSchema = ((SchemaDataTable)(base.Tables["Schema"]));
            if ((initTable == true)) {
                if ((this.tableSchema != null)) {
                    this.tableSchema.InitVars();
                }
            }
            this.tableSchemaField = ((SchemaFieldDataTable)(base.Tables["SchemaField"]));
            if ((initTable == true)) {
                if ((this.tableSchemaField != null)) {
                    this.tableSchemaField.InitVars();
                }
            }
            this.tableSchemaTemplate = ((SchemaTemplateDataTable)(base.Tables["SchemaTemplate"]));
            if ((initTable == true)) {
                if ((this.tableSchemaTemplate != null)) {
                    this.tableSchemaTemplate.InitVars();
                }
            }
            this.tableSysId = ((SysIdDataTable)(base.Tables["SysId"]));
            if ((initTable == true)) {
                if ((this.tableSysId != null)) {
                    this.tableSysId.InitVars();
                }
            }
            this.tableTemplate = ((TemplateDataTable)(base.Tables["Template"]));
            if ((initTable == true)) {
                if ((this.tableTemplate != null)) {
                    this.tableTemplate.InitVars();
                }
            }
            this.tableTheme = ((ThemeDataTable)(base.Tables["Theme"]));
            if ((initTable == true)) {
                if ((this.tableTheme != null)) {
                    this.tableTheme.InitVars();
                }
            }
            this.relationArchiveArchiveForeignKey = this.Relations["ArchiveArchiveForeignKey"];
            this.relationArchiveJobForeignKey = this.Relations["ArchiveJobForeignKey"];
            this.relationArchiveMapForeignKey = this.Relations["ArchiveMapForeignKey"];
            this.relationArchiveMapUserForeignKey = this.Relations["ArchiveMapUserForeignKey"];
            this.relationCheckoutJobForeignKey = this.Relations["CheckoutJobForeignKey"];
            this.relationCheckoutMapForeignKey = this.Relations["CheckoutMapForeignKey"];
            this.relationCheckoutMapUserForeignKey = this.Relations["CheckoutMapUserForeignKey"];
            this.relationDomainListDomainForeignKey = this.Relations["DomainListDomainForeignKey"];
            this.relationEntityFontForeignKey = this.Relations["EntityFontForeignKey"];
            this.relationEntityIdGroupForeignKey = this.Relations["EntityIdGroupForeignKey"];
            this.relationEntityLayerForeignKey = this.Relations["EntityLayerForeignKey"];
            this.relationEntitySchemaEntityForeignKey = this.Relations["EntitySchemaEntityForeignKey"];
            this.relationEntitySchemaSchemaForeignKey = this.Relations["EntitySchemaSchemaForeignKey"];
            this.relationIdAllocationIdGroupForeignKey = this.Relations["IdAllocationIdGroupForeignKey"];
            this.relationIdFreeIdGroupForeignKey = this.Relations["IdFreeIdGroupForeignKey"];
            this.relationLayerEntityForeignKey1 = this.Relations["LayerEntityForeignKey1"];
            this.relationLayerEntityForeignKey2 = this.Relations["LayerEntityForeignKey2"];
            this.relationLayerEntityForeignKey3 = this.Relations["LayerEntityForeignKey3"];
            this.relationLayerEntityForeignKey4 = this.Relations["LayerEntityForeignKey4"];
            this.relationLayerThemeForeignKey = this.Relations["LayerThemeForeignKey"];
            this.relationMapArchiveForeignKey = this.Relations["MapArchiveForeignKey"];
            this.relationMapJobForeignKey = this.Relations["MapJobForeignKey"];
            this.relationMapMapUserForeignKey = this.Relations["MapMapUserForeignKey"];
            this.relationSchemaFieldFieldForeignKey = this.Relations["SchemaFieldFieldForeignKey"];
            this.relationSchemaFieldSchamaForeignKey = this.Relations["SchemaFieldSchamaForeignKey"];
            this.relationSchemaTemplateSchemaForeignKey = this.Relations["SchemaTemplateSchemaForeignKey"];
            this.relationSchemaTemplateTemplateForeignKey = this.Relations["SchemaTemplateTemplateForeignKey"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "BacksightDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/BacksightDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableArchive = new ArchiveDataTable();
            base.Tables.Add(this.tableArchive);
            this.tableCheckout = new CheckoutDataTable();
            base.Tables.Add(this.tableCheckout);
            this.tableDomain = new DomainDataTable();
            base.Tables.Add(this.tableDomain);
            this.tableDomainList = new DomainListDataTable();
            base.Tables.Add(this.tableDomainList);
            this.tableEdition = new EditionDataTable();
            base.Tables.Add(this.tableEdition);
            this.tableEntity = new EntityDataTable();
            base.Tables.Add(this.tableEntity);
            this.tableEntitySchema = new EntitySchemaDataTable();
            base.Tables.Add(this.tableEntitySchema);
            this.tableField = new FieldDataTable();
            base.Tables.Add(this.tableField);
            this.tableFont = new FontDataTable();
            base.Tables.Add(this.tableFont);
            this.tableIdAllocation = new IdAllocationDataTable();
            base.Tables.Add(this.tableIdAllocation);
            this.tableIdFree = new IdFreeDataTable();
            base.Tables.Add(this.tableIdFree);
            this.tableIdGroup = new IdGroupDataTable();
            base.Tables.Add(this.tableIdGroup);
            this.tableJob = new JobDataTable();
            base.Tables.Add(this.tableJob);
            this.tableLayer = new LayerDataTable();
            base.Tables.Add(this.tableLayer);
            this.tableMap = new MapDataTable();
            base.Tables.Add(this.tableMap);
            this.tableMapUser = new MapUserDataTable();
            base.Tables.Add(this.tableMapUser);
            this.tableProperty = new PropertyDataTable();
            base.Tables.Add(this.tableProperty);
            this.tableSchema = new SchemaDataTable();
            base.Tables.Add(this.tableSchema);
            this.tableSchemaField = new SchemaFieldDataTable();
            base.Tables.Add(this.tableSchemaField);
            this.tableSchemaTemplate = new SchemaTemplateDataTable();
            base.Tables.Add(this.tableSchemaTemplate);
            this.tableSysId = new SysIdDataTable();
            base.Tables.Add(this.tableSysId);
            this.tableTemplate = new TemplateDataTable();
            base.Tables.Add(this.tableTemplate);
            this.tableTheme = new ThemeDataTable();
            base.Tables.Add(this.tableTheme);
            this.relationArchiveArchiveForeignKey = new System.Data.DataRelation("ArchiveArchiveForeignKey", new System.Data.DataColumn[] {
                        this.tableArchive.ArchiveIdColumn}, new System.Data.DataColumn[] {
                        this.tableArchive.PrevArchiveIdColumn}, false);
            this.Relations.Add(this.relationArchiveArchiveForeignKey);
            this.relationArchiveJobForeignKey = new System.Data.DataRelation("ArchiveJobForeignKey", new System.Data.DataColumn[] {
                        this.tableJob.JobIdColumn}, new System.Data.DataColumn[] {
                        this.tableArchive.JobIdColumn}, false);
            this.Relations.Add(this.relationArchiveJobForeignKey);
            this.relationArchiveMapForeignKey = new System.Data.DataRelation("ArchiveMapForeignKey", new System.Data.DataColumn[] {
                        this.tableMap.MapIdColumn}, new System.Data.DataColumn[] {
                        this.tableArchive.MapIdColumn}, false);
            this.Relations.Add(this.relationArchiveMapForeignKey);
            this.relationArchiveMapUserForeignKey = new System.Data.DataRelation("ArchiveMapUserForeignKey", new System.Data.DataColumn[] {
                        this.tableMapUser.UserIdColumn}, new System.Data.DataColumn[] {
                        this.tableArchive.UserIdColumn}, false);
            this.Relations.Add(this.relationArchiveMapUserForeignKey);
            this.relationCheckoutJobForeignKey = new System.Data.DataRelation("CheckoutJobForeignKey", new System.Data.DataColumn[] {
                        this.tableJob.JobIdColumn}, new System.Data.DataColumn[] {
                        this.tableCheckout.JobIdColumn}, false);
            this.Relations.Add(this.relationCheckoutJobForeignKey);
            this.relationCheckoutMapForeignKey = new System.Data.DataRelation("CheckoutMapForeignKey", new System.Data.DataColumn[] {
                        this.tableMap.MapIdColumn}, new System.Data.DataColumn[] {
                        this.tableCheckout.MapIdColumn}, false);
            this.Relations.Add(this.relationCheckoutMapForeignKey);
            this.relationCheckoutMapUserForeignKey = new System.Data.DataRelation("CheckoutMapUserForeignKey", new System.Data.DataColumn[] {
                        this.tableMapUser.UserIdColumn}, new System.Data.DataColumn[] {
                        this.tableCheckout.UserIdColumn}, false);
            this.Relations.Add(this.relationCheckoutMapUserForeignKey);
            this.relationDomainListDomainForeignKey = new System.Data.DataRelation("DomainListDomainForeignKey", new System.Data.DataColumn[] {
                        this.tableDomain.DomainIdColumn}, new System.Data.DataColumn[] {
                        this.tableDomainList.DomainIdColumn}, false);
            this.Relations.Add(this.relationDomainListDomainForeignKey);
            this.relationEntityFontForeignKey = new System.Data.DataRelation("EntityFontForeignKey", new System.Data.DataColumn[] {
                        this.tableFont.FontIdColumn}, new System.Data.DataColumn[] {
                        this.tableEntity.FontIdColumn}, false);
            this.Relations.Add(this.relationEntityFontForeignKey);
            this.relationEntityIdGroupForeignKey = new System.Data.DataRelation("EntityIdGroupForeignKey", new System.Data.DataColumn[] {
                        this.tableIdGroup.GroupIdColumn}, new System.Data.DataColumn[] {
                        this.tableEntity.GroupIdColumn}, false);
            this.Relations.Add(this.relationEntityIdGroupForeignKey);
            this.relationEntityLayerForeignKey = new System.Data.DataRelation("EntityLayerForeignKey", new System.Data.DataColumn[] {
                        this.tableLayer.LayerIdColumn}, new System.Data.DataColumn[] {
                        this.tableEntity.LayerIdColumn}, false);
            this.Relations.Add(this.relationEntityLayerForeignKey);
            this.relationEntitySchemaEntityForeignKey = new System.Data.DataRelation("EntitySchemaEntityForeignKey", new System.Data.DataColumn[] {
                        this.tableEntity.EntityIdColumn}, new System.Data.DataColumn[] {
                        this.tableEntitySchema.EntityIdColumn}, false);
            this.Relations.Add(this.relationEntitySchemaEntityForeignKey);
            this.relationEntitySchemaSchemaForeignKey = new System.Data.DataRelation("EntitySchemaSchemaForeignKey", new System.Data.DataColumn[] {
                        this.tableSchema.SchemaIdColumn}, new System.Data.DataColumn[] {
                        this.tableEntitySchema.SchemaIdColumn}, false);
            this.Relations.Add(this.relationEntitySchemaSchemaForeignKey);
            this.relationIdAllocationIdGroupForeignKey = new System.Data.DataRelation("IdAllocationIdGroupForeignKey", new System.Data.DataColumn[] {
                        this.tableIdGroup.GroupIdColumn}, new System.Data.DataColumn[] {
                        this.tableIdAllocation.GroupIdColumn}, false);
            this.Relations.Add(this.relationIdAllocationIdGroupForeignKey);
            this.relationIdFreeIdGroupForeignKey = new System.Data.DataRelation("IdFreeIdGroupForeignKey", new System.Data.DataColumn[] {
                        this.tableIdGroup.GroupIdColumn}, new System.Data.DataColumn[] {
                        this.tableIdFree.GroupIdColumn}, false);
            this.Relations.Add(this.relationIdFreeIdGroupForeignKey);
            this.relationLayerEntityForeignKey1 = new System.Data.DataRelation("LayerEntityForeignKey1", new System.Data.DataColumn[] {
                        this.tableEntity.EntityIdColumn}, new System.Data.DataColumn[] {
                        this.tableLayer.DefaultPointIdColumn}, false);
            this.Relations.Add(this.relationLayerEntityForeignKey1);
            this.relationLayerEntityForeignKey2 = new System.Data.DataRelation("LayerEntityForeignKey2", new System.Data.DataColumn[] {
                        this.tableEntity.EntityIdColumn}, new System.Data.DataColumn[] {
                        this.tableLayer.DefaultLineIdColumn}, false);
            this.Relations.Add(this.relationLayerEntityForeignKey2);
            this.relationLayerEntityForeignKey3 = new System.Data.DataRelation("LayerEntityForeignKey3", new System.Data.DataColumn[] {
                        this.tableEntity.EntityIdColumn}, new System.Data.DataColumn[] {
                        this.tableLayer.DefaultPolygonIdColumn}, false);
            this.Relations.Add(this.relationLayerEntityForeignKey3);
            this.relationLayerEntityForeignKey4 = new System.Data.DataRelation("LayerEntityForeignKey4", new System.Data.DataColumn[] {
                        this.tableEntity.EntityIdColumn}, new System.Data.DataColumn[] {
                        this.tableLayer.DefaultTextIdColumn}, false);
            this.Relations.Add(this.relationLayerEntityForeignKey4);
            this.relationLayerThemeForeignKey = new System.Data.DataRelation("LayerThemeForeignKey", new System.Data.DataColumn[] {
                        this.tableTheme.ThemeIdColumn}, new System.Data.DataColumn[] {
                        this.tableLayer.ThemeIdColumn}, false);
            this.Relations.Add(this.relationLayerThemeForeignKey);
            this.relationMapArchiveForeignKey = new System.Data.DataRelation("MapArchiveForeignKey", new System.Data.DataColumn[] {
                        this.tableArchive.ArchiveIdColumn}, new System.Data.DataColumn[] {
                        this.tableMap.ArchiveIdColumn}, false);
            this.Relations.Add(this.relationMapArchiveForeignKey);
            this.relationMapJobForeignKey = new System.Data.DataRelation("MapJobForeignKey", new System.Data.DataColumn[] {
                        this.tableJob.JobIdColumn}, new System.Data.DataColumn[] {
                        this.tableMap.JobIdColumn}, false);
            this.Relations.Add(this.relationMapJobForeignKey);
            this.relationMapMapUserForeignKey = new System.Data.DataRelation("MapMapUserForeignKey", new System.Data.DataColumn[] {
                        this.tableMapUser.UserIdColumn}, new System.Data.DataColumn[] {
                        this.tableMap.UserIdColumn}, false);
            this.Relations.Add(this.relationMapMapUserForeignKey);
            this.relationSchemaFieldFieldForeignKey = new System.Data.DataRelation("SchemaFieldFieldForeignKey", new System.Data.DataColumn[] {
                        this.tableField.FieldIdColumn}, new System.Data.DataColumn[] {
                        this.tableSchemaField.FieldIdColumn}, false);
            this.Relations.Add(this.relationSchemaFieldFieldForeignKey);
            this.relationSchemaFieldSchamaForeignKey = new System.Data.DataRelation("SchemaFieldSchamaForeignKey", new System.Data.DataColumn[] {
                        this.tableSchema.SchemaIdColumn}, new System.Data.DataColumn[] {
                        this.tableSchemaField.SchemaIdColumn}, false);
            this.Relations.Add(this.relationSchemaFieldSchamaForeignKey);
            this.relationSchemaTemplateSchemaForeignKey = new System.Data.DataRelation("SchemaTemplateSchemaForeignKey", new System.Data.DataColumn[] {
                        this.tableSchema.SchemaIdColumn}, new System.Data.DataColumn[] {
                        this.tableSchemaTemplate.SchemaIdColumn}, false);
            this.Relations.Add(this.relationSchemaTemplateSchemaForeignKey);
            this.relationSchemaTemplateTemplateForeignKey = new System.Data.DataRelation("SchemaTemplateTemplateForeignKey", new System.Data.DataColumn[] {
                        this.tableTemplate.TemplateIdColumn}, new System.Data.DataColumn[] {
                        this.tableSchemaTemplate.TemplateIdColumn}, false);
            this.Relations.Add(this.relationSchemaTemplateTemplateForeignKey);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeArchive() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCheckout() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDomain() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDomainList() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEdition() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEntity() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEntitySchema() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeField() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFont() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIdAllocation() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIdFree() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIdGroup() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJob() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLayer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMap() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMapUser() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProperty() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSchema() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSchemaField() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSchemaTemplate() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSysId() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemplate() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTheme() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            BacksightDataSet ds = new BacksightDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void ArchiveRowChangeEventHandler(object sender, ArchiveRowChangeEvent e);
        
        public delegate void CheckoutRowChangeEventHandler(object sender, CheckoutRowChangeEvent e);
        
        public delegate void DomainRowChangeEventHandler(object sender, DomainRowChangeEvent e);
        
        public delegate void DomainListRowChangeEventHandler(object sender, DomainListRowChangeEvent e);
        
        public delegate void EditionRowChangeEventHandler(object sender, EditionRowChangeEvent e);
        
        public delegate void EntityRowChangeEventHandler(object sender, EntityRowChangeEvent e);
        
        public delegate void EntitySchemaRowChangeEventHandler(object sender, EntitySchemaRowChangeEvent e);
        
        public delegate void FieldRowChangeEventHandler(object sender, FieldRowChangeEvent e);
        
        public delegate void FontRowChangeEventHandler(object sender, FontRowChangeEvent e);
        
        public delegate void IdAllocationRowChangeEventHandler(object sender, IdAllocationRowChangeEvent e);
        
        public delegate void IdFreeRowChangeEventHandler(object sender, IdFreeRowChangeEvent e);
        
        public delegate void IdGroupRowChangeEventHandler(object sender, IdGroupRowChangeEvent e);
        
        public delegate void JobRowChangeEventHandler(object sender, JobRowChangeEvent e);
        
        public delegate void LayerRowChangeEventHandler(object sender, LayerRowChangeEvent e);
        
        public delegate void MapRowChangeEventHandler(object sender, MapRowChangeEvent e);
        
        public delegate void MapUserRowChangeEventHandler(object sender, MapUserRowChangeEvent e);
        
        public delegate void PropertyRowChangeEventHandler(object sender, PropertyRowChangeEvent e);
        
        public delegate void SchemaRowChangeEventHandler(object sender, SchemaRowChangeEvent e);
        
        public delegate void SchemaFieldRowChangeEventHandler(object sender, SchemaFieldRowChangeEvent e);
        
        public delegate void SchemaTemplateRowChangeEventHandler(object sender, SchemaTemplateRowChangeEvent e);
        
        public delegate void SysIdRowChangeEventHandler(object sender, SysIdRowChangeEvent e);
        
        public delegate void TemplateRowChangeEventHandler(object sender, TemplateRowChangeEvent e);
        
        public delegate void ThemeRowChangeEventHandler(object sender, ThemeRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ArchiveDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnArchiveId;
            
            private System.Data.DataColumn columnArchiveTime;
            
            private System.Data.DataColumn columnMapId;
            
            private System.Data.DataColumn columnVersion;
            
            private System.Data.DataColumn columnVersionTime;
            
            private System.Data.DataColumn columnJobId;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnPrevArchiveId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArchiveDataTable() {
                this.TableName = "Archive";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArchiveDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ArchiveDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArchiveIdColumn {
                get {
                    return this.columnArchiveId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArchiveTimeColumn {
                get {
                    return this.columnArchiveTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MapIdColumn {
                get {
                    return this.columnMapId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VersionTimeColumn {
                get {
                    return this.columnVersionTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JobIdColumn {
                get {
                    return this.columnJobId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PrevArchiveIdColumn {
                get {
                    return this.columnPrevArchiveId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArchiveRow this[int index] {
                get {
                    return ((ArchiveRow)(this.Rows[index]));
                }
            }
            
            public event ArchiveRowChangeEventHandler ArchiveRowChanging;
            
            public event ArchiveRowChangeEventHandler ArchiveRowChanged;
            
            public event ArchiveRowChangeEventHandler ArchiveRowDeleting;
            
            public event ArchiveRowChangeEventHandler ArchiveRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddArchiveRow(ArchiveRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArchiveRow AddArchiveRow(int ArchiveId, System.DateTime ArchiveTime, MapRow parentMapRowByArchiveMapForeignKey, short Version, System.DateTime VersionTime, JobRow parentJobRowByArchiveJobForeignKey, MapUserRow parentMapUserRowByArchiveMapUserForeignKey, ArchiveRow parentArchiveRowByArchiveArchiveForeignKey) {
                ArchiveRow rowArchiveRow = ((ArchiveRow)(this.NewRow()));
                rowArchiveRow.ItemArray = new object[] {
                        ArchiveId,
                        ArchiveTime,
                        parentMapRowByArchiveMapForeignKey[0],
                        Version,
                        VersionTime,
                        parentJobRowByArchiveJobForeignKey[0],
                        parentMapUserRowByArchiveMapUserForeignKey[0],
                        parentArchiveRowByArchiveArchiveForeignKey[0]};
                this.Rows.Add(rowArchiveRow);
                return rowArchiveRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArchiveRow FindByArchiveId(int ArchiveId) {
                return ((ArchiveRow)(this.Rows.Find(new object[] {
                            ArchiveId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ArchiveDataTable cln = ((ArchiveDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ArchiveDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnArchiveId = base.Columns["ArchiveId"];
                this.columnArchiveTime = base.Columns["ArchiveTime"];
                this.columnMapId = base.Columns["MapId"];
                this.columnVersion = base.Columns["Version"];
                this.columnVersionTime = base.Columns["VersionTime"];
                this.columnJobId = base.Columns["JobId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnPrevArchiveId = base.Columns["PrevArchiveId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnArchiveId = new System.Data.DataColumn("ArchiveId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchiveId);
                this.columnArchiveTime = new System.Data.DataColumn("ArchiveTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchiveTime);
                this.columnMapId = new System.Data.DataColumn("MapId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapId);
                this.columnVersion = new System.Data.DataColumn("Version", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersion);
                this.columnVersionTime = new System.Data.DataColumn("VersionTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersionTime);
                this.columnJobId = new System.Data.DataColumn("JobId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobId);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnPrevArchiveId = new System.Data.DataColumn("PrevArchiveId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrevArchiveId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnArchiveId}, true));
                this.columnArchiveId.AllowDBNull = false;
                this.columnArchiveId.Unique = true;
                this.columnArchiveTime.AllowDBNull = false;
                this.columnMapId.AllowDBNull = false;
                this.columnVersion.AllowDBNull = false;
                this.columnVersionTime.AllowDBNull = false;
                this.columnJobId.AllowDBNull = false;
                this.columnUserId.AllowDBNull = false;
                this.columnPrevArchiveId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArchiveRow NewArchiveRow() {
                return ((ArchiveRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ArchiveRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ArchiveRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ArchiveRowChanged != null)) {
                    this.ArchiveRowChanged(this, new ArchiveRowChangeEvent(((ArchiveRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ArchiveRowChanging != null)) {
                    this.ArchiveRowChanging(this, new ArchiveRowChangeEvent(((ArchiveRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ArchiveRowDeleted != null)) {
                    this.ArchiveRowDeleted(this, new ArchiveRowChangeEvent(((ArchiveRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ArchiveRowDeleting != null)) {
                    this.ArchiveRowDeleting(this, new ArchiveRowChangeEvent(((ArchiveRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveArchiveRow(ArchiveRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ArchiveDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CheckoutDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMapId;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnJobId;
            
            private System.Data.DataColumn columnCheckoutTime;
            
            private System.Data.DataColumn columnCheckinTime;
            
            private System.Data.DataColumn columnAcceptTime;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckoutDataTable() {
                this.TableName = "Checkout";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckoutDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CheckoutDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MapIdColumn {
                get {
                    return this.columnMapId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JobIdColumn {
                get {
                    return this.columnJobId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CheckoutTimeColumn {
                get {
                    return this.columnCheckoutTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CheckinTimeColumn {
                get {
                    return this.columnCheckinTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn AcceptTimeColumn {
                get {
                    return this.columnAcceptTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckoutRow this[int index] {
                get {
                    return ((CheckoutRow)(this.Rows[index]));
                }
            }
            
            public event CheckoutRowChangeEventHandler CheckoutRowChanging;
            
            public event CheckoutRowChangeEventHandler CheckoutRowChanged;
            
            public event CheckoutRowChangeEventHandler CheckoutRowDeleting;
            
            public event CheckoutRowChangeEventHandler CheckoutRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCheckoutRow(CheckoutRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckoutRow AddCheckoutRow(MapRow parentMapRowByCheckoutMapForeignKey, MapUserRow parentMapUserRowByCheckoutMapUserForeignKey, JobRow parentJobRowByCheckoutJobForeignKey, System.DateTime CheckoutTime, System.DateTime CheckinTime, System.DateTime AcceptTime) {
                CheckoutRow rowCheckoutRow = ((CheckoutRow)(this.NewRow()));
                rowCheckoutRow.ItemArray = new object[] {
                        parentMapRowByCheckoutMapForeignKey[0],
                        parentMapUserRowByCheckoutMapUserForeignKey[0],
                        parentJobRowByCheckoutJobForeignKey[0],
                        CheckoutTime,
                        CheckinTime,
                        AcceptTime};
                this.Rows.Add(rowCheckoutRow);
                return rowCheckoutRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckoutRow FindByMapId(int MapId) {
                return ((CheckoutRow)(this.Rows.Find(new object[] {
                            MapId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                CheckoutDataTable cln = ((CheckoutDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new CheckoutDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapId = base.Columns["MapId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnJobId = base.Columns["JobId"];
                this.columnCheckoutTime = base.Columns["CheckoutTime"];
                this.columnCheckinTime = base.Columns["CheckinTime"];
                this.columnAcceptTime = base.Columns["AcceptTime"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapId = new System.Data.DataColumn("MapId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapId);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnJobId = new System.Data.DataColumn("JobId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobId);
                this.columnCheckoutTime = new System.Data.DataColumn("CheckoutTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckoutTime);
                this.columnCheckinTime = new System.Data.DataColumn("CheckinTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckinTime);
                this.columnAcceptTime = new System.Data.DataColumn("AcceptTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnAcceptTime);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnMapId}, true));
                this.columnMapId.AllowDBNull = false;
                this.columnMapId.Unique = true;
                this.columnUserId.AllowDBNull = false;
                this.columnJobId.AllowDBNull = false;
                this.columnCheckoutTime.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckoutRow NewCheckoutRow() {
                return ((CheckoutRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new CheckoutRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(CheckoutRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CheckoutRowChanged != null)) {
                    this.CheckoutRowChanged(this, new CheckoutRowChangeEvent(((CheckoutRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CheckoutRowChanging != null)) {
                    this.CheckoutRowChanging(this, new CheckoutRowChangeEvent(((CheckoutRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CheckoutRowDeleted != null)) {
                    this.CheckoutRowDeleted(this, new CheckoutRowChangeEvent(((CheckoutRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CheckoutRowDeleting != null)) {
                    this.CheckoutRowDeleting(this, new CheckoutRowChangeEvent(((CheckoutRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCheckoutRow(CheckoutRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CheckoutDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DomainDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDomainId;
            
            private System.Data.DataColumn columnDomainName;
            
            private System.Data.DataColumn columnMinValue;
            
            private System.Data.DataColumn columnMaxValue;
            
            private System.Data.DataColumn columnIncrement;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainDataTable() {
                this.TableName = "Domain";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DomainDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DomainDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DomainIdColumn {
                get {
                    return this.columnDomainId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DomainNameColumn {
                get {
                    return this.columnDomainName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MinValueColumn {
                get {
                    return this.columnMinValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MaxValueColumn {
                get {
                    return this.columnMaxValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IncrementColumn {
                get {
                    return this.columnIncrement;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainRow this[int index] {
                get {
                    return ((DomainRow)(this.Rows[index]));
                }
            }
            
            public event DomainRowChangeEventHandler DomainRowChanging;
            
            public event DomainRowChangeEventHandler DomainRowChanged;
            
            public event DomainRowChangeEventHandler DomainRowDeleting;
            
            public event DomainRowChangeEventHandler DomainRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDomainRow(DomainRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainRow AddDomainRow(int DomainId, string DomainName, string MinValue, string MaxValue, string Increment) {
                DomainRow rowDomainRow = ((DomainRow)(this.NewRow()));
                rowDomainRow.ItemArray = new object[] {
                        DomainId,
                        DomainName,
                        MinValue,
                        MaxValue,
                        Increment};
                this.Rows.Add(rowDomainRow);
                return rowDomainRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainRow FindByDomainId(int DomainId) {
                return ((DomainRow)(this.Rows.Find(new object[] {
                            DomainId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DomainDataTable cln = ((DomainDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DomainDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDomainId = base.Columns["DomainId"];
                this.columnDomainName = base.Columns["DomainName"];
                this.columnMinValue = base.Columns["MinValue"];
                this.columnMaxValue = base.Columns["MaxValue"];
                this.columnIncrement = base.Columns["Increment"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDomainId = new System.Data.DataColumn("DomainId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDomainId);
                this.columnDomainName = new System.Data.DataColumn("DomainName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDomainName);
                this.columnMinValue = new System.Data.DataColumn("MinValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinValue);
                this.columnMaxValue = new System.Data.DataColumn("MaxValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxValue);
                this.columnIncrement = new System.Data.DataColumn("Increment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIncrement);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDomainId}, true));
                this.columnDomainId.AllowDBNull = false;
                this.columnDomainId.Unique = true;
                this.columnDomainName.AllowDBNull = false;
                this.columnDomainName.MaxLength = 50;
                this.columnMinValue.AllowDBNull = false;
                this.columnMinValue.MaxLength = 16;
                this.columnMaxValue.AllowDBNull = false;
                this.columnMaxValue.MaxLength = 16;
                this.columnIncrement.AllowDBNull = false;
                this.columnIncrement.MaxLength = 8;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainRow NewDomainRow() {
                return ((DomainRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DomainRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DomainRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DomainRowChanged != null)) {
                    this.DomainRowChanged(this, new DomainRowChangeEvent(((DomainRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DomainRowChanging != null)) {
                    this.DomainRowChanging(this, new DomainRowChangeEvent(((DomainRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DomainRowDeleted != null)) {
                    this.DomainRowDeleted(this, new DomainRowChangeEvent(((DomainRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DomainRowDeleting != null)) {
                    this.DomainRowDeleting(this, new DomainRowChangeEvent(((DomainRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDomainRow(DomainRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DomainDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DomainListDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnDomainId;
            
            private System.Data.DataColumn columnShortValue;
            
            private System.Data.DataColumn columnLongValue;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainListDataTable() {
                this.TableName = "DomainList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DomainListDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DomainListDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DomainIdColumn {
                get {
                    return this.columnDomainId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ShortValueColumn {
                get {
                    return this.columnShortValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LongValueColumn {
                get {
                    return this.columnLongValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainListRow this[int index] {
                get {
                    return ((DomainListRow)(this.Rows[index]));
                }
            }
            
            public event DomainListRowChangeEventHandler DomainListRowChanging;
            
            public event DomainListRowChangeEventHandler DomainListRowChanged;
            
            public event DomainListRowChangeEventHandler DomainListRowDeleting;
            
            public event DomainListRowChangeEventHandler DomainListRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDomainListRow(DomainListRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainListRow AddDomainListRow(DomainRow parentDomainRowByDomainListDomainForeignKey, string ShortValue, string LongValue) {
                DomainListRow rowDomainListRow = ((DomainListRow)(this.NewRow()));
                rowDomainListRow.ItemArray = new object[] {
                        parentDomainRowByDomainListDomainForeignKey[0],
                        ShortValue,
                        LongValue};
                this.Rows.Add(rowDomainListRow);
                return rowDomainListRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainListRow FindByDomainIdShortValue(int DomainId, string ShortValue) {
                return ((DomainListRow)(this.Rows.Find(new object[] {
                            DomainId,
                            ShortValue})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                DomainListDataTable cln = ((DomainListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new DomainListDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDomainId = base.Columns["DomainId"];
                this.columnShortValue = base.Columns["ShortValue"];
                this.columnLongValue = base.Columns["LongValue"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDomainId = new System.Data.DataColumn("DomainId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDomainId);
                this.columnShortValue = new System.Data.DataColumn("ShortValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnShortValue);
                this.columnLongValue = new System.Data.DataColumn("LongValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongValue);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnDomainId,
                                this.columnShortValue}, true));
                this.columnDomainId.AllowDBNull = false;
                this.columnShortValue.AllowDBNull = false;
                this.columnShortValue.MaxLength = 4;
                this.columnLongValue.AllowDBNull = false;
                this.columnLongValue.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainListRow NewDomainListRow() {
                return ((DomainListRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new DomainListRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(DomainListRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DomainListRowChanged != null)) {
                    this.DomainListRowChanged(this, new DomainListRowChangeEvent(((DomainListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DomainListRowChanging != null)) {
                    this.DomainListRowChanging(this, new DomainListRowChangeEvent(((DomainListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DomainListRowDeleted != null)) {
                    this.DomainListRowDeleted(this, new DomainListRowChangeEvent(((DomainListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DomainListRowDeleting != null)) {
                    this.DomainListRowDeleting(this, new DomainListRowChangeEvent(((DomainListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDomainListRow(DomainListRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DomainListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EditionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEditionId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnStatus;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditionDataTable() {
                this.TableName = "Edition";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EditionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EditionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EditionIdColumn {
                get {
                    return this.columnEditionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditionRow this[int index] {
                get {
                    return ((EditionRow)(this.Rows[index]));
                }
            }
            
            public event EditionRowChangeEventHandler EditionRowChanging;
            
            public event EditionRowChangeEventHandler EditionRowChanged;
            
            public event EditionRowChangeEventHandler EditionRowDeleting;
            
            public event EditionRowChangeEventHandler EditionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEditionRow(EditionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditionRow AddEditionRow(int EditionId, string Name, string Status) {
                EditionRow rowEditionRow = ((EditionRow)(this.NewRow()));
                rowEditionRow.ItemArray = new object[] {
                        EditionId,
                        Name,
                        Status};
                this.Rows.Add(rowEditionRow);
                return rowEditionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditionRow FindByEditionId(int EditionId) {
                return ((EditionRow)(this.Rows.Find(new object[] {
                            EditionId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EditionDataTable cln = ((EditionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EditionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEditionId = base.Columns["EditionId"];
                this.columnName = base.Columns["Name"];
                this.columnStatus = base.Columns["Status"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEditionId = new System.Data.DataColumn("EditionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEditionId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnEditionId}, true));
                this.columnEditionId.AllowDBNull = false;
                this.columnEditionId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnStatus.AllowDBNull = false;
                this.columnStatus.MaxLength = 10;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditionRow NewEditionRow() {
                return ((EditionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EditionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EditionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EditionRowChanged != null)) {
                    this.EditionRowChanged(this, new EditionRowChangeEvent(((EditionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EditionRowChanging != null)) {
                    this.EditionRowChanging(this, new EditionRowChangeEvent(((EditionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EditionRowDeleted != null)) {
                    this.EditionRowDeleted(this, new EditionRowChangeEvent(((EditionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EditionRowDeleting != null)) {
                    this.EditionRowDeleting(this, new EditionRowChangeEvent(((EditionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEditionRow(EditionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EditionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EntityDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEntityId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnIsPoint;
            
            private System.Data.DataColumn columnIsLine;
            
            private System.Data.DataColumn columnIsLineTopological;
            
            private System.Data.DataColumn columnIsPolygon;
            
            private System.Data.DataColumn columnIsText;
            
            private System.Data.DataColumn columnFontId;
            
            private System.Data.DataColumn columnLayerId;
            
            private System.Data.DataColumn columnGroupId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityDataTable() {
                this.TableName = "Entity";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntityDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EntityDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EntityIdColumn {
                get {
                    return this.columnEntityId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsPointColumn {
                get {
                    return this.columnIsPoint;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsLineColumn {
                get {
                    return this.columnIsLine;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsLineTopologicalColumn {
                get {
                    return this.columnIsLineTopological;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsPolygonColumn {
                get {
                    return this.columnIsPolygon;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsTextColumn {
                get {
                    return this.columnIsText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FontIdColumn {
                get {
                    return this.columnFontId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LayerIdColumn {
                get {
                    return this.columnLayerId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GroupIdColumn {
                get {
                    return this.columnGroupId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityRow this[int index] {
                get {
                    return ((EntityRow)(this.Rows[index]));
                }
            }
            
            public event EntityRowChangeEventHandler EntityRowChanging;
            
            public event EntityRowChangeEventHandler EntityRowChanged;
            
            public event EntityRowChangeEventHandler EntityRowDeleting;
            
            public event EntityRowChangeEventHandler EntityRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEntityRow(EntityRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityRow AddEntityRow(int EntityId, string Name, string IsPoint, string IsLine, string IsLineTopological, string IsPolygon, string IsText, FontRow parentFontRowByEntityFontForeignKey, LayerRow parentLayerRowByEntityLayerForeignKey, IdGroupRow parentIdGroupRowByEntityIdGroupForeignKey) {
                EntityRow rowEntityRow = ((EntityRow)(this.NewRow()));
                rowEntityRow.ItemArray = new object[] {
                        EntityId,
                        Name,
                        IsPoint,
                        IsLine,
                        IsLineTopological,
                        IsPolygon,
                        IsText,
                        parentFontRowByEntityFontForeignKey[0],
                        parentLayerRowByEntityLayerForeignKey[0],
                        parentIdGroupRowByEntityIdGroupForeignKey[0]};
                this.Rows.Add(rowEntityRow);
                return rowEntityRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityRow FindByEntityId(int EntityId) {
                return ((EntityRow)(this.Rows.Find(new object[] {
                            EntityId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EntityDataTable cln = ((EntityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EntityDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEntityId = base.Columns["EntityId"];
                this.columnName = base.Columns["Name"];
                this.columnIsPoint = base.Columns["IsPoint"];
                this.columnIsLine = base.Columns["IsLine"];
                this.columnIsLineTopological = base.Columns["IsLineTopological"];
                this.columnIsPolygon = base.Columns["IsPolygon"];
                this.columnIsText = base.Columns["IsText"];
                this.columnFontId = base.Columns["FontId"];
                this.columnLayerId = base.Columns["LayerId"];
                this.columnGroupId = base.Columns["GroupId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEntityId = new System.Data.DataColumn("EntityId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntityId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIsPoint = new System.Data.DataColumn("IsPoint", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPoint);
                this.columnIsLine = new System.Data.DataColumn("IsLine", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLine);
                this.columnIsLineTopological = new System.Data.DataColumn("IsLineTopological", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLineTopological);
                this.columnIsPolygon = new System.Data.DataColumn("IsPolygon", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPolygon);
                this.columnIsText = new System.Data.DataColumn("IsText", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsText);
                this.columnFontId = new System.Data.DataColumn("FontId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFontId);
                this.columnLayerId = new System.Data.DataColumn("LayerId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayerId);
                this.columnGroupId = new System.Data.DataColumn("GroupId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnEntityId}, true));
                this.columnEntityId.AllowDBNull = false;
                this.columnEntityId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnIsPoint.AllowDBNull = false;
                this.columnIsPoint.MaxLength = 1;
                this.columnIsLine.AllowDBNull = false;
                this.columnIsLine.MaxLength = 1;
                this.columnIsLineTopological.AllowDBNull = false;
                this.columnIsLineTopological.MaxLength = 1;
                this.columnIsPolygon.AllowDBNull = false;
                this.columnIsPolygon.MaxLength = 1;
                this.columnIsText.AllowDBNull = false;
                this.columnIsText.MaxLength = 1;
                this.columnFontId.AllowDBNull = false;
                this.columnLayerId.AllowDBNull = false;
                this.columnGroupId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityRow NewEntityRow() {
                return ((EntityRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EntityRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EntityRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EntityRowChanged != null)) {
                    this.EntityRowChanged(this, new EntityRowChangeEvent(((EntityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EntityRowChanging != null)) {
                    this.EntityRowChanging(this, new EntityRowChangeEvent(((EntityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EntityRowDeleted != null)) {
                    this.EntityRowDeleted(this, new EntityRowChangeEvent(((EntityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EntityRowDeleting != null)) {
                    this.EntityRowDeleting(this, new EntityRowChangeEvent(((EntityRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEntityRow(EntityRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EntityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EntitySchemaDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEntityId;
            
            private System.Data.DataColumn columnSchemaId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitySchemaDataTable() {
                this.TableName = "EntitySchema";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntitySchemaDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EntitySchemaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EntityIdColumn {
                get {
                    return this.columnEntityId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SchemaIdColumn {
                get {
                    return this.columnSchemaId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitySchemaRow this[int index] {
                get {
                    return ((EntitySchemaRow)(this.Rows[index]));
                }
            }
            
            public event EntitySchemaRowChangeEventHandler EntitySchemaRowChanging;
            
            public event EntitySchemaRowChangeEventHandler EntitySchemaRowChanged;
            
            public event EntitySchemaRowChangeEventHandler EntitySchemaRowDeleting;
            
            public event EntitySchemaRowChangeEventHandler EntitySchemaRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEntitySchemaRow(EntitySchemaRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitySchemaRow AddEntitySchemaRow(EntityRow parentEntityRowByEntitySchemaEntityForeignKey, SchemaRow parentSchemaRowByEntitySchemaSchemaForeignKey) {
                EntitySchemaRow rowEntitySchemaRow = ((EntitySchemaRow)(this.NewRow()));
                rowEntitySchemaRow.ItemArray = new object[] {
                        parentEntityRowByEntitySchemaEntityForeignKey[0],
                        parentSchemaRowByEntitySchemaSchemaForeignKey[0]};
                this.Rows.Add(rowEntitySchemaRow);
                return rowEntitySchemaRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitySchemaRow FindByEntityIdSchemaId(int EntityId, int SchemaId) {
                return ((EntitySchemaRow)(this.Rows.Find(new object[] {
                            EntityId,
                            SchemaId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EntitySchemaDataTable cln = ((EntitySchemaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EntitySchemaDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEntityId = base.Columns["EntityId"];
                this.columnSchemaId = base.Columns["SchemaId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEntityId = new System.Data.DataColumn("EntityId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntityId);
                this.columnSchemaId = new System.Data.DataColumn("SchemaId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchemaId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnEntityId,
                                this.columnSchemaId}, true));
                this.columnEntityId.AllowDBNull = false;
                this.columnSchemaId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitySchemaRow NewEntitySchemaRow() {
                return ((EntitySchemaRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EntitySchemaRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EntitySchemaRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EntitySchemaRowChanged != null)) {
                    this.EntitySchemaRowChanged(this, new EntitySchemaRowChangeEvent(((EntitySchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EntitySchemaRowChanging != null)) {
                    this.EntitySchemaRowChanging(this, new EntitySchemaRowChangeEvent(((EntitySchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EntitySchemaRowDeleted != null)) {
                    this.EntitySchemaRowDeleted(this, new EntitySchemaRowChangeEvent(((EntitySchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EntitySchemaRowDeleting != null)) {
                    this.EntitySchemaRowDeleting(this, new EntitySchemaRowChangeEvent(((EntitySchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEntitySchemaRow(EntitySchemaRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EntitySchemaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FieldDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFieldId;
            
            private System.Data.DataColumn columnFieldName;
            
            private System.Data.DataColumn columnColumnName;
            
            private System.Data.DataColumn columnDataType;
            
            private System.Data.DataColumn columnWidth;
            
            private System.Data.DataColumn columnDomainId;
            
            private System.Data.DataColumn columnDefaultValue;
            
            private System.Data.DataColumn columnIsRequired;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldDataTable() {
                this.TableName = "Field";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FieldDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FieldDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FieldIdColumn {
                get {
                    return this.columnFieldId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FieldNameColumn {
                get {
                    return this.columnFieldName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ColumnNameColumn {
                get {
                    return this.columnColumnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataTypeColumn {
                get {
                    return this.columnDataType;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DomainIdColumn {
                get {
                    return this.columnDomainId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DefaultValueColumn {
                get {
                    return this.columnDefaultValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsRequiredColumn {
                get {
                    return this.columnIsRequired;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow this[int index] {
                get {
                    return ((FieldRow)(this.Rows[index]));
                }
            }
            
            public event FieldRowChangeEventHandler FieldRowChanging;
            
            public event FieldRowChangeEventHandler FieldRowChanged;
            
            public event FieldRowChangeEventHandler FieldRowDeleting;
            
            public event FieldRowChangeEventHandler FieldRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFieldRow(FieldRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow AddFieldRow(int FieldId, string FieldName, string ColumnName, string DataType, int Width, int DomainId, string DefaultValue, string IsRequired) {
                FieldRow rowFieldRow = ((FieldRow)(this.NewRow()));
                rowFieldRow.ItemArray = new object[] {
                        FieldId,
                        FieldName,
                        ColumnName,
                        DataType,
                        Width,
                        DomainId,
                        DefaultValue,
                        IsRequired};
                this.Rows.Add(rowFieldRow);
                return rowFieldRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow FindByFieldId(int FieldId) {
                return ((FieldRow)(this.Rows.Find(new object[] {
                            FieldId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FieldDataTable cln = ((FieldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FieldDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFieldId = base.Columns["FieldId"];
                this.columnFieldName = base.Columns["FieldName"];
                this.columnColumnName = base.Columns["ColumnName"];
                this.columnDataType = base.Columns["DataType"];
                this.columnWidth = base.Columns["Width"];
                this.columnDomainId = base.Columns["DomainId"];
                this.columnDefaultValue = base.Columns["DefaultValue"];
                this.columnIsRequired = base.Columns["IsRequired"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFieldId = new System.Data.DataColumn("FieldId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFieldId);
                this.columnFieldName = new System.Data.DataColumn("FieldName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFieldName);
                this.columnColumnName = new System.Data.DataColumn("ColumnName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnColumnName);
                this.columnDataType = new System.Data.DataColumn("DataType", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDataType);
                this.columnWidth = new System.Data.DataColumn("Width", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnWidth);
                this.columnDomainId = new System.Data.DataColumn("DomainId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDomainId);
                this.columnDefaultValue = new System.Data.DataColumn("DefaultValue", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultValue);
                this.columnIsRequired = new System.Data.DataColumn("IsRequired", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRequired);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnFieldId}, true));
                this.columnFieldId.AllowDBNull = false;
                this.columnFieldId.Unique = true;
                this.columnFieldName.AllowDBNull = false;
                this.columnFieldName.MaxLength = 50;
                this.columnColumnName.AllowDBNull = false;
                this.columnColumnName.MaxLength = 50;
                this.columnDataType.AllowDBNull = false;
                this.columnDataType.MaxLength = 50;
                this.columnWidth.AllowDBNull = false;
                this.columnDomainId.AllowDBNull = false;
                this.columnDefaultValue.AllowDBNull = false;
                this.columnDefaultValue.MaxLength = 32;
                this.columnIsRequired.AllowDBNull = false;
                this.columnIsRequired.MaxLength = 1;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow NewFieldRow() {
                return ((FieldRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FieldRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FieldRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FieldRowChanged != null)) {
                    this.FieldRowChanged(this, new FieldRowChangeEvent(((FieldRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FieldRowChanging != null)) {
                    this.FieldRowChanging(this, new FieldRowChangeEvent(((FieldRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FieldRowDeleted != null)) {
                    this.FieldRowDeleted(this, new FieldRowChangeEvent(((FieldRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FieldRowDeleting != null)) {
                    this.FieldRowDeleting(this, new FieldRowChangeEvent(((FieldRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFieldRow(FieldRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FieldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FontDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFontId;
            
            private System.Data.DataColumn columnTypeFace;
            
            private System.Data.DataColumn columnPointSize;
            
            private System.Data.DataColumn columnIsBold;
            
            private System.Data.DataColumn columnIsItalic;
            
            private System.Data.DataColumn columnIsUnderline;
            
            private System.Data.DataColumn columnFontFile;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontDataTable() {
                this.TableName = "Font";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FontDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FontDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FontIdColumn {
                get {
                    return this.columnFontId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeFaceColumn {
                get {
                    return this.columnTypeFace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PointSizeColumn {
                get {
                    return this.columnPointSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsBoldColumn {
                get {
                    return this.columnIsBold;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsItalicColumn {
                get {
                    return this.columnIsItalic;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsUnderlineColumn {
                get {
                    return this.columnIsUnderline;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FontFileColumn {
                get {
                    return this.columnFontFile;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontRow this[int index] {
                get {
                    return ((FontRow)(this.Rows[index]));
                }
            }
            
            public event FontRowChangeEventHandler FontRowChanging;
            
            public event FontRowChangeEventHandler FontRowChanged;
            
            public event FontRowChangeEventHandler FontRowDeleting;
            
            public event FontRowChangeEventHandler FontRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFontRow(FontRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontRow AddFontRow(int FontId, string TypeFace, float PointSize, string IsBold, string IsItalic, string IsUnderline, string FontFile) {
                FontRow rowFontRow = ((FontRow)(this.NewRow()));
                rowFontRow.ItemArray = new object[] {
                        FontId,
                        TypeFace,
                        PointSize,
                        IsBold,
                        IsItalic,
                        IsUnderline,
                        FontFile};
                this.Rows.Add(rowFontRow);
                return rowFontRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontRow FindByFontId(int FontId) {
                return ((FontRow)(this.Rows.Find(new object[] {
                            FontId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FontDataTable cln = ((FontDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FontDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFontId = base.Columns["FontId"];
                this.columnTypeFace = base.Columns["TypeFace"];
                this.columnPointSize = base.Columns["PointSize"];
                this.columnIsBold = base.Columns["IsBold"];
                this.columnIsItalic = base.Columns["IsItalic"];
                this.columnIsUnderline = base.Columns["IsUnderline"];
                this.columnFontFile = base.Columns["FontFile"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFontId = new System.Data.DataColumn("FontId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFontId);
                this.columnTypeFace = new System.Data.DataColumn("TypeFace", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeFace);
                this.columnPointSize = new System.Data.DataColumn("PointSize", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPointSize);
                this.columnIsBold = new System.Data.DataColumn("IsBold", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsBold);
                this.columnIsItalic = new System.Data.DataColumn("IsItalic", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsItalic);
                this.columnIsUnderline = new System.Data.DataColumn("IsUnderline", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsUnderline);
                this.columnFontFile = new System.Data.DataColumn("FontFile", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFontFile);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnFontId}, true));
                this.columnFontId.AllowDBNull = false;
                this.columnFontId.Unique = true;
                this.columnTypeFace.AllowDBNull = false;
                this.columnTypeFace.MaxLength = 24;
                this.columnPointSize.AllowDBNull = false;
                this.columnIsBold.AllowDBNull = false;
                this.columnIsBold.MaxLength = 1;
                this.columnIsItalic.AllowDBNull = false;
                this.columnIsItalic.MaxLength = 1;
                this.columnIsUnderline.AllowDBNull = false;
                this.columnIsUnderline.MaxLength = 1;
                this.columnFontFile.AllowDBNull = false;
                this.columnFontFile.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontRow NewFontRow() {
                return ((FontRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FontRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FontRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FontRowChanged != null)) {
                    this.FontRowChanged(this, new FontRowChangeEvent(((FontRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FontRowChanging != null)) {
                    this.FontRowChanging(this, new FontRowChangeEvent(((FontRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FontRowDeleted != null)) {
                    this.FontRowDeleted(this, new FontRowChangeEvent(((FontRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FontRowDeleting != null)) {
                    this.FontRowDeleting(this, new FontRowChangeEvent(((FontRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFontRow(FontRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FontDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IdAllocationDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLowestId;
            
            private System.Data.DataColumn columnHighestId;
            
            private System.Data.DataColumn columnFileName;
            
            private System.Data.DataColumn columnGroupId;
            
            private System.Data.DataColumn columnUserName;
            
            private System.Data.DataColumn columnTimeAllocated;
            
            private System.Data.DataColumn columnNumUsed;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationDataTable() {
                this.TableName = "IdAllocation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IdAllocationDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IdAllocationDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LowestIdColumn {
                get {
                    return this.columnLowestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HighestIdColumn {
                get {
                    return this.columnHighestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GroupIdColumn {
                get {
                    return this.columnGroupId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeAllocatedColumn {
                get {
                    return this.columnTimeAllocated;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumUsedColumn {
                get {
                    return this.columnNumUsed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRow this[int index] {
                get {
                    return ((IdAllocationRow)(this.Rows[index]));
                }
            }
            
            public event IdAllocationRowChangeEventHandler IdAllocationRowChanging;
            
            public event IdAllocationRowChangeEventHandler IdAllocationRowChanged;
            
            public event IdAllocationRowChangeEventHandler IdAllocationRowDeleting;
            
            public event IdAllocationRowChangeEventHandler IdAllocationRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIdAllocationRow(IdAllocationRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRow AddIdAllocationRow(int LowestId, int HighestId, string FileName, IdGroupRow parentIdGroupRowByIdAllocationIdGroupForeignKey, string UserName, System.DateTime TimeAllocated, int NumUsed) {
                IdAllocationRow rowIdAllocationRow = ((IdAllocationRow)(this.NewRow()));
                rowIdAllocationRow.ItemArray = new object[] {
                        LowestId,
                        HighestId,
                        FileName,
                        parentIdGroupRowByIdAllocationIdGroupForeignKey[0],
                        UserName,
                        TimeAllocated,
                        NumUsed};
                this.Rows.Add(rowIdAllocationRow);
                return rowIdAllocationRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRow FindByLowestId(int LowestId) {
                return ((IdAllocationRow)(this.Rows.Find(new object[] {
                            LowestId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                IdAllocationDataTable cln = ((IdAllocationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new IdAllocationDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLowestId = base.Columns["LowestId"];
                this.columnHighestId = base.Columns["HighestId"];
                this.columnFileName = base.Columns["FileName"];
                this.columnGroupId = base.Columns["GroupId"];
                this.columnUserName = base.Columns["UserName"];
                this.columnTimeAllocated = base.Columns["TimeAllocated"];
                this.columnNumUsed = base.Columns["NumUsed"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLowestId = new System.Data.DataColumn("LowestId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLowestId);
                this.columnHighestId = new System.Data.DataColumn("HighestId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHighestId);
                this.columnFileName = new System.Data.DataColumn("FileName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileName);
                this.columnGroupId = new System.Data.DataColumn("GroupId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupId);
                this.columnUserName = new System.Data.DataColumn("UserName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnTimeAllocated = new System.Data.DataColumn("TimeAllocated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeAllocated);
                this.columnNumUsed = new System.Data.DataColumn("NumUsed", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumUsed);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLowestId}, true));
                this.columnLowestId.AllowDBNull = false;
                this.columnLowestId.Unique = true;
                this.columnHighestId.AllowDBNull = false;
                this.columnFileName.AllowDBNull = false;
                this.columnFileName.MaxLength = 50;
                this.columnGroupId.AllowDBNull = false;
                this.columnUserName.AllowDBNull = false;
                this.columnUserName.MaxLength = 50;
                this.columnTimeAllocated.AllowDBNull = false;
                this.columnNumUsed.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRow NewIdAllocationRow() {
                return ((IdAllocationRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new IdAllocationRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(IdAllocationRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IdAllocationRowChanged != null)) {
                    this.IdAllocationRowChanged(this, new IdAllocationRowChangeEvent(((IdAllocationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IdAllocationRowChanging != null)) {
                    this.IdAllocationRowChanging(this, new IdAllocationRowChangeEvent(((IdAllocationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IdAllocationRowDeleted != null)) {
                    this.IdAllocationRowDeleted(this, new IdAllocationRowChangeEvent(((IdAllocationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IdAllocationRowDeleting != null)) {
                    this.IdAllocationRowDeleting(this, new IdAllocationRowChangeEvent(((IdAllocationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIdAllocationRow(IdAllocationRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IdAllocationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IdFreeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnGroupId;
            
            private System.Data.DataColumn columnLowestId;
            
            private System.Data.DataColumn columnHighestId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeDataTable() {
                this.TableName = "IdFree";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IdFreeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IdFreeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GroupIdColumn {
                get {
                    return this.columnGroupId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LowestIdColumn {
                get {
                    return this.columnLowestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HighestIdColumn {
                get {
                    return this.columnHighestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeRow this[int index] {
                get {
                    return ((IdFreeRow)(this.Rows[index]));
                }
            }
            
            public event IdFreeRowChangeEventHandler IdFreeRowChanging;
            
            public event IdFreeRowChangeEventHandler IdFreeRowChanged;
            
            public event IdFreeRowChangeEventHandler IdFreeRowDeleting;
            
            public event IdFreeRowChangeEventHandler IdFreeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIdFreeRow(IdFreeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeRow AddIdFreeRow(IdGroupRow parentIdGroupRowByIdFreeIdGroupForeignKey, int LowestId, int HighestId) {
                IdFreeRow rowIdFreeRow = ((IdFreeRow)(this.NewRow()));
                rowIdFreeRow.ItemArray = new object[] {
                        parentIdGroupRowByIdFreeIdGroupForeignKey[0],
                        LowestId,
                        HighestId};
                this.Rows.Add(rowIdFreeRow);
                return rowIdFreeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeRow FindByGroupIdLowestId(int GroupId, int LowestId) {
                return ((IdFreeRow)(this.Rows.Find(new object[] {
                            GroupId,
                            LowestId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                IdFreeDataTable cln = ((IdFreeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new IdFreeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGroupId = base.Columns["GroupId"];
                this.columnLowestId = base.Columns["LowestId"];
                this.columnHighestId = base.Columns["HighestId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGroupId = new System.Data.DataColumn("GroupId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupId);
                this.columnLowestId = new System.Data.DataColumn("LowestId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLowestId);
                this.columnHighestId = new System.Data.DataColumn("HighestId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHighestId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnGroupId,
                                this.columnLowestId}, true));
                this.columnGroupId.AllowDBNull = false;
                this.columnLowestId.AllowDBNull = false;
                this.columnHighestId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeRow NewIdFreeRow() {
                return ((IdFreeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new IdFreeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(IdFreeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IdFreeRowChanged != null)) {
                    this.IdFreeRowChanged(this, new IdFreeRowChangeEvent(((IdFreeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IdFreeRowChanging != null)) {
                    this.IdFreeRowChanging(this, new IdFreeRowChangeEvent(((IdFreeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IdFreeRowDeleted != null)) {
                    this.IdFreeRowDeleted(this, new IdFreeRowChangeEvent(((IdFreeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IdFreeRowDeleting != null)) {
                    this.IdFreeRowDeleting(this, new IdFreeRowChangeEvent(((IdFreeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIdFreeRow(IdFreeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IdFreeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IdGroupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnGroupId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnLowestId;
            
            private System.Data.DataColumn columnHighestId;
            
            private System.Data.DataColumn columnPacketSize;
            
            private System.Data.DataColumn columnCheckDigit;
            
            private System.Data.DataColumn columnKeyFormat;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupDataTable() {
                this.TableName = "IdGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IdGroupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IdGroupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GroupIdColumn {
                get {
                    return this.columnGroupId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LowestIdColumn {
                get {
                    return this.columnLowestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HighestIdColumn {
                get {
                    return this.columnHighestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PacketSizeColumn {
                get {
                    return this.columnPacketSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CheckDigitColumn {
                get {
                    return this.columnCheckDigit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KeyFormatColumn {
                get {
                    return this.columnKeyFormat;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow this[int index] {
                get {
                    return ((IdGroupRow)(this.Rows[index]));
                }
            }
            
            public event IdGroupRowChangeEventHandler IdGroupRowChanging;
            
            public event IdGroupRowChangeEventHandler IdGroupRowChanged;
            
            public event IdGroupRowChangeEventHandler IdGroupRowDeleting;
            
            public event IdGroupRowChangeEventHandler IdGroupRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIdGroupRow(IdGroupRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow AddIdGroupRow(int GroupId, string Name, int LowestId, int HighestId, int PacketSize, string CheckDigit, string KeyFormat) {
                IdGroupRow rowIdGroupRow = ((IdGroupRow)(this.NewRow()));
                rowIdGroupRow.ItemArray = new object[] {
                        GroupId,
                        Name,
                        LowestId,
                        HighestId,
                        PacketSize,
                        CheckDigit,
                        KeyFormat};
                this.Rows.Add(rowIdGroupRow);
                return rowIdGroupRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow FindByGroupId(int GroupId) {
                return ((IdGroupRow)(this.Rows.Find(new object[] {
                            GroupId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                IdGroupDataTable cln = ((IdGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new IdGroupDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGroupId = base.Columns["GroupId"];
                this.columnName = base.Columns["Name"];
                this.columnLowestId = base.Columns["LowestId"];
                this.columnHighestId = base.Columns["HighestId"];
                this.columnPacketSize = base.Columns["PacketSize"];
                this.columnCheckDigit = base.Columns["CheckDigit"];
                this.columnKeyFormat = base.Columns["KeyFormat"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGroupId = new System.Data.DataColumn("GroupId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnLowestId = new System.Data.DataColumn("LowestId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLowestId);
                this.columnHighestId = new System.Data.DataColumn("HighestId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHighestId);
                this.columnPacketSize = new System.Data.DataColumn("PacketSize", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPacketSize);
                this.columnCheckDigit = new System.Data.DataColumn("CheckDigit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckDigit);
                this.columnKeyFormat = new System.Data.DataColumn("KeyFormat", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyFormat);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnGroupId}, true));
                this.columnGroupId.AllowDBNull = false;
                this.columnGroupId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnLowestId.AllowDBNull = false;
                this.columnHighestId.AllowDBNull = false;
                this.columnPacketSize.AllowDBNull = false;
                this.columnCheckDigit.AllowDBNull = false;
                this.columnCheckDigit.MaxLength = 1;
                this.columnKeyFormat.AllowDBNull = false;
                this.columnKeyFormat.MaxLength = 8;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow NewIdGroupRow() {
                return ((IdGroupRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new IdGroupRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(IdGroupRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IdGroupRowChanged != null)) {
                    this.IdGroupRowChanged(this, new IdGroupRowChangeEvent(((IdGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IdGroupRowChanging != null)) {
                    this.IdGroupRowChanging(this, new IdGroupRowChangeEvent(((IdGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IdGroupRowDeleted != null)) {
                    this.IdGroupRowDeleted(this, new IdGroupRowChangeEvent(((IdGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IdGroupRowDeleting != null)) {
                    this.IdGroupRowDeleting(this, new IdGroupRowChangeEvent(((IdGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIdGroupRow(IdGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IdGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JobDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnJobId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnIsActive;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobDataTable() {
                this.TableName = "Job";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JobDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JobDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JobIdColumn {
                get {
                    return this.columnJobId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow this[int index] {
                get {
                    return ((JobRow)(this.Rows[index]));
                }
            }
            
            public event JobRowChangeEventHandler JobRowChanging;
            
            public event JobRowChangeEventHandler JobRowChanged;
            
            public event JobRowChangeEventHandler JobRowDeleting;
            
            public event JobRowChangeEventHandler JobRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJobRow(JobRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow AddJobRow(int JobId, string Name, string IsActive) {
                JobRow rowJobRow = ((JobRow)(this.NewRow()));
                rowJobRow.ItemArray = new object[] {
                        JobId,
                        Name,
                        IsActive};
                this.Rows.Add(rowJobRow);
                return rowJobRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow FindByJobId(int JobId) {
                return ((JobRow)(this.Rows.Find(new object[] {
                            JobId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                JobDataTable cln = ((JobDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new JobDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnJobId = base.Columns["JobId"];
                this.columnName = base.Columns["Name"];
                this.columnIsActive = base.Columns["IsActive"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnJobId = new System.Data.DataColumn("JobId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIsActive = new System.Data.DataColumn("IsActive", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnJobId}, true));
                this.columnJobId.AllowDBNull = false;
                this.columnJobId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnIsActive.AllowDBNull = false;
                this.columnIsActive.MaxLength = 1;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow NewJobRow() {
                return ((JobRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new JobRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(JobRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JobRowChanged != null)) {
                    this.JobRowChanged(this, new JobRowChangeEvent(((JobRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JobRowChanging != null)) {
                    this.JobRowChanging(this, new JobRowChangeEvent(((JobRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JobRowDeleted != null)) {
                    this.JobRowDeleted(this, new JobRowChangeEvent(((JobRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JobRowDeleting != null)) {
                    this.JobRowDeleting(this, new JobRowChangeEvent(((JobRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJobRow(JobRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JobDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LayerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLayerId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnThemeId;
            
            private System.Data.DataColumn columnThemeSequence;
            
            private System.Data.DataColumn columnDefaultPointId;
            
            private System.Data.DataColumn columnDefaultLineId;
            
            private System.Data.DataColumn columnDefaultPolygonId;
            
            private System.Data.DataColumn columnDefaultTextId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerDataTable() {
                this.TableName = "Layer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LayerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LayerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LayerIdColumn {
                get {
                    return this.columnLayerId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ThemeIdColumn {
                get {
                    return this.columnThemeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ThemeSequenceColumn {
                get {
                    return this.columnThemeSequence;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DefaultPointIdColumn {
                get {
                    return this.columnDefaultPointId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DefaultLineIdColumn {
                get {
                    return this.columnDefaultLineId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DefaultPolygonIdColumn {
                get {
                    return this.columnDefaultPolygonId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DefaultTextIdColumn {
                get {
                    return this.columnDefaultTextId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow this[int index] {
                get {
                    return ((LayerRow)(this.Rows[index]));
                }
            }
            
            public event LayerRowChangeEventHandler LayerRowChanging;
            
            public event LayerRowChangeEventHandler LayerRowChanged;
            
            public event LayerRowChangeEventHandler LayerRowDeleting;
            
            public event LayerRowChangeEventHandler LayerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLayerRow(LayerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow AddLayerRow(int LayerId, string Name, ThemeRow parentThemeRowByLayerThemeForeignKey, int ThemeSequence, EntityRow parentEntityRowByLayerEntityForeignKey1, EntityRow parentEntityRowByLayerEntityForeignKey2, EntityRow parentEntityRowByLayerEntityForeignKey3, EntityRow parentEntityRowByLayerEntityForeignKey4) {
                LayerRow rowLayerRow = ((LayerRow)(this.NewRow()));
                rowLayerRow.ItemArray = new object[] {
                        LayerId,
                        Name,
                        parentThemeRowByLayerThemeForeignKey[0],
                        ThemeSequence,
                        parentEntityRowByLayerEntityForeignKey1[0],
                        parentEntityRowByLayerEntityForeignKey2[0],
                        parentEntityRowByLayerEntityForeignKey3[0],
                        parentEntityRowByLayerEntityForeignKey4[0]};
                this.Rows.Add(rowLayerRow);
                return rowLayerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow FindByLayerId(int LayerId) {
                return ((LayerRow)(this.Rows.Find(new object[] {
                            LayerId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LayerDataTable cln = ((LayerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LayerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLayerId = base.Columns["LayerId"];
                this.columnName = base.Columns["Name"];
                this.columnThemeId = base.Columns["ThemeId"];
                this.columnThemeSequence = base.Columns["ThemeSequence"];
                this.columnDefaultPointId = base.Columns["DefaultPointId"];
                this.columnDefaultLineId = base.Columns["DefaultLineId"];
                this.columnDefaultPolygonId = base.Columns["DefaultPolygonId"];
                this.columnDefaultTextId = base.Columns["DefaultTextId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLayerId = new System.Data.DataColumn("LayerId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayerId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnThemeId = new System.Data.DataColumn("ThemeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnThemeId);
                this.columnThemeSequence = new System.Data.DataColumn("ThemeSequence", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnThemeSequence);
                this.columnDefaultPointId = new System.Data.DataColumn("DefaultPointId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultPointId);
                this.columnDefaultLineId = new System.Data.DataColumn("DefaultLineId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultLineId);
                this.columnDefaultPolygonId = new System.Data.DataColumn("DefaultPolygonId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultPolygonId);
                this.columnDefaultTextId = new System.Data.DataColumn("DefaultTextId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultTextId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLayerId}, true));
                this.columnLayerId.AllowDBNull = false;
                this.columnLayerId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnThemeId.AllowDBNull = false;
                this.columnThemeSequence.AllowDBNull = false;
                this.columnDefaultPointId.AllowDBNull = false;
                this.columnDefaultLineId.AllowDBNull = false;
                this.columnDefaultPolygonId.AllowDBNull = false;
                this.columnDefaultTextId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow NewLayerRow() {
                return ((LayerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LayerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LayerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LayerRowChanged != null)) {
                    this.LayerRowChanged(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LayerRowChanging != null)) {
                    this.LayerRowChanging(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LayerRowDeleted != null)) {
                    this.LayerRowDeleted(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LayerRowDeleting != null)) {
                    this.LayerRowDeleting(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLayerRow(LayerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LayerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MapDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnMapId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnVersion;
            
            private System.Data.DataColumn columnVersionTime;
            
            private System.Data.DataColumn columnJobId;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnArchiveId;
            
            private System.Data.DataColumn columnStatus;
            
            private System.Data.DataColumn columnIsActive;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapDataTable() {
                this.TableName = "Map";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MapDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MapDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn MapIdColumn {
                get {
                    return this.columnMapId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn VersionTimeColumn {
                get {
                    return this.columnVersionTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JobIdColumn {
                get {
                    return this.columnJobId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArchiveIdColumn {
                get {
                    return this.columnArchiveId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow this[int index] {
                get {
                    return ((MapRow)(this.Rows[index]));
                }
            }
            
            public event MapRowChangeEventHandler MapRowChanging;
            
            public event MapRowChangeEventHandler MapRowChanged;
            
            public event MapRowChangeEventHandler MapRowDeleting;
            
            public event MapRowChangeEventHandler MapRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMapRow(MapRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow AddMapRow(int MapId, string Name, short Version, System.DateTime VersionTime, JobRow parentJobRowByMapJobForeignKey, MapUserRow parentMapUserRowByMapMapUserForeignKey, ArchiveRow parentArchiveRowByMapArchiveForeignKey, string Status, string IsActive) {
                MapRow rowMapRow = ((MapRow)(this.NewRow()));
                rowMapRow.ItemArray = new object[] {
                        MapId,
                        Name,
                        Version,
                        VersionTime,
                        parentJobRowByMapJobForeignKey[0],
                        parentMapUserRowByMapMapUserForeignKey[0],
                        parentArchiveRowByMapArchiveForeignKey[0],
                        Status,
                        IsActive};
                this.Rows.Add(rowMapRow);
                return rowMapRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow FindByMapId(int MapId) {
                return ((MapRow)(this.Rows.Find(new object[] {
                            MapId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MapDataTable cln = ((MapDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MapDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMapId = base.Columns["MapId"];
                this.columnName = base.Columns["Name"];
                this.columnVersion = base.Columns["Version"];
                this.columnVersionTime = base.Columns["VersionTime"];
                this.columnJobId = base.Columns["JobId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnArchiveId = base.Columns["ArchiveId"];
                this.columnStatus = base.Columns["Status"];
                this.columnIsActive = base.Columns["IsActive"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMapId = new System.Data.DataColumn("MapId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnMapId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnVersion = new System.Data.DataColumn("Version", typeof(short), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersion);
                this.columnVersionTime = new System.Data.DataColumn("VersionTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersionTime);
                this.columnJobId = new System.Data.DataColumn("JobId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobId);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnArchiveId = new System.Data.DataColumn("ArchiveId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArchiveId);
                this.columnStatus = new System.Data.DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnIsActive = new System.Data.DataColumn("IsActive", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnMapId}, true));
                this.columnMapId.AllowDBNull = false;
                this.columnMapId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnVersion.AllowDBNull = false;
                this.columnVersionTime.AllowDBNull = false;
                this.columnJobId.AllowDBNull = false;
                this.columnUserId.AllowDBNull = false;
                this.columnArchiveId.AllowDBNull = false;
                this.columnStatus.AllowDBNull = false;
                this.columnStatus.MaxLength = 8;
                this.columnIsActive.AllowDBNull = false;
                this.columnIsActive.MaxLength = 1;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow NewMapRow() {
                return ((MapRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MapRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MapRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MapRowChanged != null)) {
                    this.MapRowChanged(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MapRowChanging != null)) {
                    this.MapRowChanging(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MapRowDeleted != null)) {
                    this.MapRowDeleted(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MapRowDeleting != null)) {
                    this.MapRowDeleting(this, new MapRowChangeEvent(((MapRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMapRow(MapRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MapDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MapUserDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnIsActive;
            
            private System.Data.DataColumn columnCanCheckout;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapUserDataTable() {
                this.TableName = "MapUser";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MapUserDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MapUserDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CanCheckoutColumn {
                get {
                    return this.columnCanCheckout;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapUserRow this[int index] {
                get {
                    return ((MapUserRow)(this.Rows[index]));
                }
            }
            
            public event MapUserRowChangeEventHandler MapUserRowChanging;
            
            public event MapUserRowChangeEventHandler MapUserRowChanged;
            
            public event MapUserRowChangeEventHandler MapUserRowDeleting;
            
            public event MapUserRowChangeEventHandler MapUserRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMapUserRow(MapUserRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapUserRow AddMapUserRow(int UserId, string Name, string IsActive, string CanCheckout) {
                MapUserRow rowMapUserRow = ((MapUserRow)(this.NewRow()));
                rowMapUserRow.ItemArray = new object[] {
                        UserId,
                        Name,
                        IsActive,
                        CanCheckout};
                this.Rows.Add(rowMapUserRow);
                return rowMapUserRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapUserRow FindByUserId(int UserId) {
                return ((MapUserRow)(this.Rows.Find(new object[] {
                            UserId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                MapUserDataTable cln = ((MapUserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new MapUserDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnName = base.Columns["Name"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnCanCheckout = base.Columns["CanCheckout"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIsActive = new System.Data.DataColumn("IsActive", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnCanCheckout = new System.Data.DataColumn("CanCheckout", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCanCheckout);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUserId}, true));
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnIsActive.AllowDBNull = false;
                this.columnIsActive.MaxLength = 1;
                this.columnCanCheckout.AllowDBNull = false;
                this.columnCanCheckout.MaxLength = 1;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapUserRow NewMapUserRow() {
                return ((MapUserRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new MapUserRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(MapUserRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MapUserRowChanged != null)) {
                    this.MapUserRowChanged(this, new MapUserRowChangeEvent(((MapUserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MapUserRowChanging != null)) {
                    this.MapUserRowChanging(this, new MapUserRowChangeEvent(((MapUserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MapUserRowDeleted != null)) {
                    this.MapUserRowDeleted(this, new MapUserRowChangeEvent(((MapUserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MapUserRowDeleting != null)) {
                    this.MapUserRowDeleting(this, new MapUserRowChangeEvent(((MapUserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMapUserRow(MapUserRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MapUserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PropertyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyDataTable() {
                this.TableName = "Property";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PropertyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PropertyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow this[int index] {
                get {
                    return ((PropertyRow)(this.Rows[index]));
                }
            }
            
            public event PropertyRowChangeEventHandler PropertyRowChanging;
            
            public event PropertyRowChangeEventHandler PropertyRowChanged;
            
            public event PropertyRowChangeEventHandler PropertyRowDeleting;
            
            public event PropertyRowChangeEventHandler PropertyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPropertyRow(PropertyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow AddPropertyRow(string Name, string Value, string Description) {
                PropertyRow rowPropertyRow = ((PropertyRow)(this.NewRow()));
                rowPropertyRow.ItemArray = new object[] {
                        Name,
                        Value,
                        Description};
                this.Rows.Add(rowPropertyRow);
                return rowPropertyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow FindByName(string Name) {
                return ((PropertyRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PropertyDataTable cln = ((PropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PropertyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnValue = base.Columns["Value"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.MaxLength = 50;
                this.columnValue.AllowDBNull = false;
                this.columnValue.MaxLength = 100;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 200;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow NewPropertyRow() {
                return ((PropertyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PropertyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PropertyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PropertyRowChanged != null)) {
                    this.PropertyRowChanged(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PropertyRowChanging != null)) {
                    this.PropertyRowChanging(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PropertyRowDeleted != null)) {
                    this.PropertyRowDeleted(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PropertyRowDeleting != null)) {
                    this.PropertyRowDeleting(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePropertyRow(PropertyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PropertyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SchemaDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSchemaId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnTableName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaDataTable() {
                this.TableName = "Schema";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchemaDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SchemaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SchemaIdColumn {
                get {
                    return this.columnSchemaId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TableNameColumn {
                get {
                    return this.columnTableName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow this[int index] {
                get {
                    return ((SchemaRow)(this.Rows[index]));
                }
            }
            
            public event SchemaRowChangeEventHandler SchemaRowChanging;
            
            public event SchemaRowChangeEventHandler SchemaRowChanged;
            
            public event SchemaRowChangeEventHandler SchemaRowDeleting;
            
            public event SchemaRowChangeEventHandler SchemaRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSchemaRow(SchemaRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow AddSchemaRow(int SchemaId, string Name, string TableName) {
                SchemaRow rowSchemaRow = ((SchemaRow)(this.NewRow()));
                rowSchemaRow.ItemArray = new object[] {
                        SchemaId,
                        Name,
                        TableName};
                this.Rows.Add(rowSchemaRow);
                return rowSchemaRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow FindBySchemaId(int SchemaId) {
                return ((SchemaRow)(this.Rows.Find(new object[] {
                            SchemaId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SchemaDataTable cln = ((SchemaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SchemaDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSchemaId = base.Columns["SchemaId"];
                this.columnName = base.Columns["Name"];
                this.columnTableName = base.Columns["TableName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSchemaId = new System.Data.DataColumn("SchemaId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchemaId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnTableName = new System.Data.DataColumn("TableName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSchemaId}, true));
                this.columnSchemaId.AllowDBNull = false;
                this.columnSchemaId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnTableName.AllowDBNull = false;
                this.columnTableName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow NewSchemaRow() {
                return ((SchemaRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SchemaRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SchemaRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SchemaRowChanged != null)) {
                    this.SchemaRowChanged(this, new SchemaRowChangeEvent(((SchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SchemaRowChanging != null)) {
                    this.SchemaRowChanging(this, new SchemaRowChangeEvent(((SchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SchemaRowDeleted != null)) {
                    this.SchemaRowDeleted(this, new SchemaRowChangeEvent(((SchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SchemaRowDeleting != null)) {
                    this.SchemaRowDeleting(this, new SchemaRowChangeEvent(((SchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSchemaRow(SchemaRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SchemaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SchemaFieldDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSchemaId;
            
            private System.Data.DataColumn columnFieldSequence;
            
            private System.Data.DataColumn columnFieldId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaFieldDataTable() {
                this.TableName = "SchemaField";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchemaFieldDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SchemaFieldDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SchemaIdColumn {
                get {
                    return this.columnSchemaId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FieldSequenceColumn {
                get {
                    return this.columnFieldSequence;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FieldIdColumn {
                get {
                    return this.columnFieldId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaFieldRow this[int index] {
                get {
                    return ((SchemaFieldRow)(this.Rows[index]));
                }
            }
            
            public event SchemaFieldRowChangeEventHandler SchemaFieldRowChanging;
            
            public event SchemaFieldRowChangeEventHandler SchemaFieldRowChanged;
            
            public event SchemaFieldRowChangeEventHandler SchemaFieldRowDeleting;
            
            public event SchemaFieldRowChangeEventHandler SchemaFieldRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSchemaFieldRow(SchemaFieldRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaFieldRow AddSchemaFieldRow(SchemaRow parentSchemaRowBySchemaFieldSchamaForeignKey, int FieldSequence, FieldRow parentFieldRowBySchemaFieldFieldForeignKey) {
                SchemaFieldRow rowSchemaFieldRow = ((SchemaFieldRow)(this.NewRow()));
                rowSchemaFieldRow.ItemArray = new object[] {
                        parentSchemaRowBySchemaFieldSchamaForeignKey[0],
                        FieldSequence,
                        parentFieldRowBySchemaFieldFieldForeignKey[0]};
                this.Rows.Add(rowSchemaFieldRow);
                return rowSchemaFieldRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaFieldRow FindBySchemaIdFieldSequence(int SchemaId, int FieldSequence) {
                return ((SchemaFieldRow)(this.Rows.Find(new object[] {
                            SchemaId,
                            FieldSequence})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SchemaFieldDataTable cln = ((SchemaFieldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SchemaFieldDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSchemaId = base.Columns["SchemaId"];
                this.columnFieldSequence = base.Columns["FieldSequence"];
                this.columnFieldId = base.Columns["FieldId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSchemaId = new System.Data.DataColumn("SchemaId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchemaId);
                this.columnFieldSequence = new System.Data.DataColumn("FieldSequence", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFieldSequence);
                this.columnFieldId = new System.Data.DataColumn("FieldId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFieldId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSchemaId,
                                this.columnFieldSequence}, true));
                this.columnSchemaId.AllowDBNull = false;
                this.columnFieldSequence.AllowDBNull = false;
                this.columnFieldId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaFieldRow NewSchemaFieldRow() {
                return ((SchemaFieldRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SchemaFieldRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SchemaFieldRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SchemaFieldRowChanged != null)) {
                    this.SchemaFieldRowChanged(this, new SchemaFieldRowChangeEvent(((SchemaFieldRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SchemaFieldRowChanging != null)) {
                    this.SchemaFieldRowChanging(this, new SchemaFieldRowChangeEvent(((SchemaFieldRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SchemaFieldRowDeleted != null)) {
                    this.SchemaFieldRowDeleted(this, new SchemaFieldRowChangeEvent(((SchemaFieldRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SchemaFieldRowDeleting != null)) {
                    this.SchemaFieldRowDeleting(this, new SchemaFieldRowChangeEvent(((SchemaFieldRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSchemaFieldRow(SchemaFieldRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SchemaFieldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SchemaTemplateDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSchemaId;
            
            private System.Data.DataColumn columnTemplateId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateDataTable() {
                this.TableName = "SchemaTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchemaTemplateDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SchemaTemplateDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SchemaIdColumn {
                get {
                    return this.columnSchemaId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TemplateIdColumn {
                get {
                    return this.columnTemplateId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRow this[int index] {
                get {
                    return ((SchemaTemplateRow)(this.Rows[index]));
                }
            }
            
            public event SchemaTemplateRowChangeEventHandler SchemaTemplateRowChanging;
            
            public event SchemaTemplateRowChangeEventHandler SchemaTemplateRowChanged;
            
            public event SchemaTemplateRowChangeEventHandler SchemaTemplateRowDeleting;
            
            public event SchemaTemplateRowChangeEventHandler SchemaTemplateRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSchemaTemplateRow(SchemaTemplateRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRow AddSchemaTemplateRow(SchemaRow parentSchemaRowBySchemaTemplateSchemaForeignKey, TemplateRow parentTemplateRowBySchemaTemplateTemplateForeignKey) {
                SchemaTemplateRow rowSchemaTemplateRow = ((SchemaTemplateRow)(this.NewRow()));
                rowSchemaTemplateRow.ItemArray = new object[] {
                        parentSchemaRowBySchemaTemplateSchemaForeignKey[0],
                        parentTemplateRowBySchemaTemplateTemplateForeignKey[0]};
                this.Rows.Add(rowSchemaTemplateRow);
                return rowSchemaTemplateRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRow FindBySchemaIdTemplateId(int SchemaId, int TemplateId) {
                return ((SchemaTemplateRow)(this.Rows.Find(new object[] {
                            SchemaId,
                            TemplateId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SchemaTemplateDataTable cln = ((SchemaTemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SchemaTemplateDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSchemaId = base.Columns["SchemaId"];
                this.columnTemplateId = base.Columns["TemplateId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSchemaId = new System.Data.DataColumn("SchemaId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchemaId);
                this.columnTemplateId = new System.Data.DataColumn("TemplateId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSchemaId,
                                this.columnTemplateId}, true));
                this.columnSchemaId.AllowDBNull = false;
                this.columnTemplateId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRow NewSchemaTemplateRow() {
                return ((SchemaTemplateRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SchemaTemplateRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SchemaTemplateRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SchemaTemplateRowChanged != null)) {
                    this.SchemaTemplateRowChanged(this, new SchemaTemplateRowChangeEvent(((SchemaTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SchemaTemplateRowChanging != null)) {
                    this.SchemaTemplateRowChanging(this, new SchemaTemplateRowChangeEvent(((SchemaTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SchemaTemplateRowDeleted != null)) {
                    this.SchemaTemplateRowDeleted(this, new SchemaTemplateRowChangeEvent(((SchemaTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SchemaTemplateRowDeleting != null)) {
                    this.SchemaTemplateRowDeleting(this, new SchemaTemplateRowChangeEvent(((SchemaTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSchemaTemplateRow(SchemaTemplateRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SchemaTemplateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SysIdDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLastId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysIdDataTable() {
                this.TableName = "SysId";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SysIdDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SysIdDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LastIdColumn {
                get {
                    return this.columnLastId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysIdRow this[int index] {
                get {
                    return ((SysIdRow)(this.Rows[index]));
                }
            }
            
            public event SysIdRowChangeEventHandler SysIdRowChanging;
            
            public event SysIdRowChangeEventHandler SysIdRowChanged;
            
            public event SysIdRowChangeEventHandler SysIdRowDeleting;
            
            public event SysIdRowChangeEventHandler SysIdRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSysIdRow(SysIdRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysIdRow AddSysIdRow(int LastId) {
                SysIdRow rowSysIdRow = ((SysIdRow)(this.NewRow()));
                rowSysIdRow.ItemArray = new object[] {
                        LastId};
                this.Rows.Add(rowSysIdRow);
                return rowSysIdRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SysIdDataTable cln = ((SysIdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SysIdDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLastId = base.Columns["LastId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLastId = new System.Data.DataColumn("LastId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastId);
                this.columnLastId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysIdRow NewSysIdRow() {
                return ((SysIdRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SysIdRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SysIdRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SysIdRowChanged != null)) {
                    this.SysIdRowChanged(this, new SysIdRowChangeEvent(((SysIdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SysIdRowChanging != null)) {
                    this.SysIdRowChanging(this, new SysIdRowChangeEvent(((SysIdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SysIdRowDeleted != null)) {
                    this.SysIdRowDeleted(this, new SysIdRowChangeEvent(((SysIdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SysIdRowDeleting != null)) {
                    this.SysIdRowDeleting(this, new SysIdRowChangeEvent(((SysIdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSysIdRow(SysIdRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SysIdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TemplateDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTemplateId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnTemplateFormat;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateDataTable() {
                this.TableName = "Template";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TemplateDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TemplateIdColumn {
                get {
                    return this.columnTemplateId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TemplateFormatColumn {
                get {
                    return this.columnTemplateFormat;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow this[int index] {
                get {
                    return ((TemplateRow)(this.Rows[index]));
                }
            }
            
            public event TemplateRowChangeEventHandler TemplateRowChanging;
            
            public event TemplateRowChangeEventHandler TemplateRowChanged;
            
            public event TemplateRowChangeEventHandler TemplateRowDeleting;
            
            public event TemplateRowChangeEventHandler TemplateRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemplateRow(TemplateRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow AddTemplateRow(int TemplateId, string Name, string TemplateFormat) {
                TemplateRow rowTemplateRow = ((TemplateRow)(this.NewRow()));
                rowTemplateRow.ItemArray = new object[] {
                        TemplateId,
                        Name,
                        TemplateFormat};
                this.Rows.Add(rowTemplateRow);
                return rowTemplateRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow FindByTemplateId(int TemplateId) {
                return ((TemplateRow)(this.Rows.Find(new object[] {
                            TemplateId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TemplateDataTable cln = ((TemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TemplateDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTemplateId = base.Columns["TemplateId"];
                this.columnName = base.Columns["Name"];
                this.columnTemplateFormat = base.Columns["TemplateFormat"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTemplateId = new System.Data.DataColumn("TemplateId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnTemplateFormat = new System.Data.DataColumn("TemplateFormat", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateFormat);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTemplateId}, true));
                this.columnTemplateId.AllowDBNull = false;
                this.columnTemplateId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 80;
                this.columnTemplateFormat.AllowDBNull = false;
                this.columnTemplateFormat.MaxLength = 64;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow NewTemplateRow() {
                return ((TemplateRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TemplateRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TemplateRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TemplateRowChanged != null)) {
                    this.TemplateRowChanged(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TemplateRowChanging != null)) {
                    this.TemplateRowChanging(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TemplateRowDeleted != null)) {
                    this.TemplateRowDeleted(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TemplateRowDeleting != null)) {
                    this.TemplateRowDeleting(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemplateRow(TemplateRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TemplateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ThemeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnThemeId;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeDataTable() {
                this.TableName = "Theme";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ThemeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ThemeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ThemeIdColumn {
                get {
                    return this.columnThemeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeRow this[int index] {
                get {
                    return ((ThemeRow)(this.Rows[index]));
                }
            }
            
            public event ThemeRowChangeEventHandler ThemeRowChanging;
            
            public event ThemeRowChangeEventHandler ThemeRowChanged;
            
            public event ThemeRowChangeEventHandler ThemeRowDeleting;
            
            public event ThemeRowChangeEventHandler ThemeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddThemeRow(ThemeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeRow AddThemeRow(int ThemeId, string Name) {
                ThemeRow rowThemeRow = ((ThemeRow)(this.NewRow()));
                rowThemeRow.ItemArray = new object[] {
                        ThemeId,
                        Name};
                this.Rows.Add(rowThemeRow);
                return rowThemeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeRow FindByThemeId(int ThemeId) {
                return ((ThemeRow)(this.Rows.Find(new object[] {
                            ThemeId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ThemeDataTable cln = ((ThemeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ThemeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnThemeId = base.Columns["ThemeId"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnThemeId = new System.Data.DataColumn("ThemeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnThemeId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnThemeId}, true));
                this.columnThemeId.AllowDBNull = false;
                this.columnThemeId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeRow NewThemeRow() {
                return ((ThemeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ThemeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ThemeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ThemeRowChanged != null)) {
                    this.ThemeRowChanged(this, new ThemeRowChangeEvent(((ThemeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ThemeRowChanging != null)) {
                    this.ThemeRowChanging(this, new ThemeRowChangeEvent(((ThemeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ThemeRowDeleted != null)) {
                    this.ThemeRowDeleted(this, new ThemeRowChangeEvent(((ThemeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ThemeRowDeleting != null)) {
                    this.ThemeRowDeleting(this, new ThemeRowChangeEvent(((ThemeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveThemeRow(ThemeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ThemeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ArchiveRow : System.Data.DataRow {
            
            private ArchiveDataTable tableArchive;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ArchiveRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableArchive = ((ArchiveDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ArchiveId {
                get {
                    return ((int)(this[this.tableArchive.ArchiveIdColumn]));
                }
                set {
                    this[this.tableArchive.ArchiveIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ArchiveTime {
                get {
                    return ((System.DateTime)(this[this.tableArchive.ArchiveTimeColumn]));
                }
                set {
                    this[this.tableArchive.ArchiveTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MapId {
                get {
                    return ((int)(this[this.tableArchive.MapIdColumn]));
                }
                set {
                    this[this.tableArchive.MapIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Version {
                get {
                    return ((short)(this[this.tableArchive.VersionColumn]));
                }
                set {
                    this[this.tableArchive.VersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime VersionTime {
                get {
                    return ((System.DateTime)(this[this.tableArchive.VersionTimeColumn]));
                }
                set {
                    this[this.tableArchive.VersionTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobId {
                get {
                    return ((int)(this[this.tableArchive.JobIdColumn]));
                }
                set {
                    this[this.tableArchive.JobIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableArchive.UserIdColumn]));
                }
                set {
                    this[this.tableArchive.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PrevArchiveId {
                get {
                    return ((int)(this[this.tableArchive.PrevArchiveIdColumn]));
                }
                set {
                    this[this.tableArchive.PrevArchiveIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArchiveRow ArchiveRowParent {
                get {
                    return ((ArchiveRow)(this.GetParentRow(this.Table.ParentRelations["ArchiveArchiveForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ArchiveArchiveForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow JobRow {
                get {
                    return ((JobRow)(this.GetParentRow(this.Table.ParentRelations["ArchiveJobForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ArchiveJobForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow MapRow {
                get {
                    return ((MapRow)(this.GetParentRow(this.Table.ParentRelations["ArchiveMapForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ArchiveMapForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapUserRow MapUserRow {
                get {
                    return ((MapUserRow)(this.GetParentRow(this.Table.ParentRelations["ArchiveMapUserForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ArchiveMapUserForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArchiveRow[] GetArchiveRows() {
                return ((ArchiveRow[])(base.GetChildRows(this.Table.ChildRelations["ArchiveArchiveForeignKey"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow[] GetMapRows() {
                return ((MapRow[])(base.GetChildRows(this.Table.ChildRelations["MapArchiveForeignKey"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CheckoutRow : System.Data.DataRow {
            
            private CheckoutDataTable tableCheckout;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CheckoutRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCheckout = ((CheckoutDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MapId {
                get {
                    return ((int)(this[this.tableCheckout.MapIdColumn]));
                }
                set {
                    this[this.tableCheckout.MapIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableCheckout.UserIdColumn]));
                }
                set {
                    this[this.tableCheckout.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobId {
                get {
                    return ((int)(this[this.tableCheckout.JobIdColumn]));
                }
                set {
                    this[this.tableCheckout.JobIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CheckoutTime {
                get {
                    return ((System.DateTime)(this[this.tableCheckout.CheckoutTimeColumn]));
                }
                set {
                    this[this.tableCheckout.CheckoutTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CheckinTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCheckout.CheckinTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'CheckinTime\' in table \'Checkout\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckout.CheckinTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AcceptTime {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableCheckout.AcceptTimeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'AcceptTime\' in table \'Checkout\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCheckout.AcceptTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow JobRow {
                get {
                    return ((JobRow)(this.GetParentRow(this.Table.ParentRelations["CheckoutJobForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CheckoutJobForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow MapRow {
                get {
                    return ((MapRow)(this.GetParentRow(this.Table.ParentRelations["CheckoutMapForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CheckoutMapForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapUserRow MapUserRow {
                get {
                    return ((MapUserRow)(this.GetParentRow(this.Table.ParentRelations["CheckoutMapUserForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CheckoutMapUserForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckinTimeNull() {
                return this.IsNull(this.tableCheckout.CheckinTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckinTimeNull() {
                this[this.tableCheckout.CheckinTimeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAcceptTimeNull() {
                return this.IsNull(this.tableCheckout.AcceptTimeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAcceptTimeNull() {
                this[this.tableCheckout.AcceptTimeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DomainRow : System.Data.DataRow {
            
            private DomainDataTable tableDomain;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DomainRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDomain = ((DomainDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DomainId {
                get {
                    return ((int)(this[this.tableDomain.DomainIdColumn]));
                }
                set {
                    this[this.tableDomain.DomainIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DomainName {
                get {
                    return ((string)(this[this.tableDomain.DomainNameColumn]));
                }
                set {
                    this[this.tableDomain.DomainNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MinValue {
                get {
                    return ((string)(this[this.tableDomain.MinValueColumn]));
                }
                set {
                    this[this.tableDomain.MinValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MaxValue {
                get {
                    return ((string)(this[this.tableDomain.MaxValueColumn]));
                }
                set {
                    this[this.tableDomain.MaxValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Increment {
                get {
                    return ((string)(this[this.tableDomain.IncrementColumn]));
                }
                set {
                    this[this.tableDomain.IncrementColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainListRow[] GetDomainListRows() {
                return ((DomainListRow[])(base.GetChildRows(this.Table.ChildRelations["DomainListDomainForeignKey"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DomainListRow : System.Data.DataRow {
            
            private DomainListDataTable tableDomainList;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DomainListRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDomainList = ((DomainListDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DomainId {
                get {
                    return ((int)(this[this.tableDomainList.DomainIdColumn]));
                }
                set {
                    this[this.tableDomainList.DomainIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShortValue {
                get {
                    return ((string)(this[this.tableDomainList.ShortValueColumn]));
                }
                set {
                    this[this.tableDomainList.ShortValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LongValue {
                get {
                    return ((string)(this[this.tableDomainList.LongValueColumn]));
                }
                set {
                    this[this.tableDomainList.LongValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainRow DomainRow {
                get {
                    return ((DomainRow)(this.GetParentRow(this.Table.ParentRelations["DomainListDomainForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DomainListDomainForeignKey"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EditionRow : System.Data.DataRow {
            
            private EditionDataTable tableEdition;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EditionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEdition = ((EditionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EditionId {
                get {
                    return ((int)(this[this.tableEdition.EditionIdColumn]));
                }
                set {
                    this[this.tableEdition.EditionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableEdition.NameColumn]));
                }
                set {
                    this[this.tableEdition.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    return ((string)(this[this.tableEdition.StatusColumn]));
                }
                set {
                    this[this.tableEdition.StatusColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EntityRow : System.Data.DataRow {
            
            private EntityDataTable tableEntity;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntityRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEntity = ((EntityDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EntityId {
                get {
                    return ((int)(this[this.tableEntity.EntityIdColumn]));
                }
                set {
                    this[this.tableEntity.EntityIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableEntity.NameColumn]));
                }
                set {
                    this[this.tableEntity.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPoint {
                get {
                    return ((string)(this[this.tableEntity.IsPointColumn]));
                }
                set {
                    this[this.tableEntity.IsPointColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsLine {
                get {
                    return ((string)(this[this.tableEntity.IsLineColumn]));
                }
                set {
                    this[this.tableEntity.IsLineColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsLineTopological {
                get {
                    return ((string)(this[this.tableEntity.IsLineTopologicalColumn]));
                }
                set {
                    this[this.tableEntity.IsLineTopologicalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPolygon {
                get {
                    return ((string)(this[this.tableEntity.IsPolygonColumn]));
                }
                set {
                    this[this.tableEntity.IsPolygonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsText {
                get {
                    return ((string)(this[this.tableEntity.IsTextColumn]));
                }
                set {
                    this[this.tableEntity.IsTextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FontId {
                get {
                    return ((int)(this[this.tableEntity.FontIdColumn]));
                }
                set {
                    this[this.tableEntity.FontIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LayerId {
                get {
                    return ((int)(this[this.tableEntity.LayerIdColumn]));
                }
                set {
                    this[this.tableEntity.LayerIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupId {
                get {
                    return ((int)(this[this.tableEntity.GroupIdColumn]));
                }
                set {
                    this[this.tableEntity.GroupIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontRow FontRow {
                get {
                    return ((FontRow)(this.GetParentRow(this.Table.ParentRelations["EntityFontForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EntityFontForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow IdGroupRow {
                get {
                    return ((IdGroupRow)(this.GetParentRow(this.Table.ParentRelations["EntityIdGroupForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EntityIdGroupForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow LayerRow {
                get {
                    return ((LayerRow)(this.GetParentRow(this.Table.ParentRelations["EntityLayerForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EntityLayerForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitySchemaRow[] GetEntitySchemaRows() {
                return ((EntitySchemaRow[])(base.GetChildRows(this.Table.ChildRelations["EntitySchemaEntityForeignKey"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow[] GetLayerRowsByLayerEntityForeignKey1() {
                return ((LayerRow[])(base.GetChildRows(this.Table.ChildRelations["LayerEntityForeignKey1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow[] GetLayerRowsByLayerEntityForeignKey2() {
                return ((LayerRow[])(base.GetChildRows(this.Table.ChildRelations["LayerEntityForeignKey2"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow[] GetLayerRowsByLayerEntityForeignKey3() {
                return ((LayerRow[])(base.GetChildRows(this.Table.ChildRelations["LayerEntityForeignKey3"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow[] GetLayerRowsByLayerEntityForeignKey4() {
                return ((LayerRow[])(base.GetChildRows(this.Table.ChildRelations["LayerEntityForeignKey4"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EntitySchemaRow : System.Data.DataRow {
            
            private EntitySchemaDataTable tableEntitySchema;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntitySchemaRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEntitySchema = ((EntitySchemaDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EntityId {
                get {
                    return ((int)(this[this.tableEntitySchema.EntityIdColumn]));
                }
                set {
                    this[this.tableEntitySchema.EntityIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SchemaId {
                get {
                    return ((int)(this[this.tableEntitySchema.SchemaIdColumn]));
                }
                set {
                    this[this.tableEntitySchema.SchemaIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityRow EntityRow {
                get {
                    return ((EntityRow)(this.GetParentRow(this.Table.ParentRelations["EntitySchemaEntityForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EntitySchemaEntityForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow SchemaRow {
                get {
                    return ((SchemaRow)(this.GetParentRow(this.Table.ParentRelations["EntitySchemaSchemaForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["EntitySchemaSchemaForeignKey"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FieldRow : System.Data.DataRow {
            
            private FieldDataTable tableField;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FieldRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableField = ((FieldDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FieldId {
                get {
                    return ((int)(this[this.tableField.FieldIdColumn]));
                }
                set {
                    this[this.tableField.FieldIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FieldName {
                get {
                    return ((string)(this[this.tableField.FieldNameColumn]));
                }
                set {
                    this[this.tableField.FieldNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ColumnName {
                get {
                    return ((string)(this[this.tableField.ColumnNameColumn]));
                }
                set {
                    this[this.tableField.ColumnNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DataType {
                get {
                    return ((string)(this[this.tableField.DataTypeColumn]));
                }
                set {
                    this[this.tableField.DataTypeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Width {
                get {
                    return ((int)(this[this.tableField.WidthColumn]));
                }
                set {
                    this[this.tableField.WidthColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DomainId {
                get {
                    return ((int)(this[this.tableField.DomainIdColumn]));
                }
                set {
                    this[this.tableField.DomainIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DefaultValue {
                get {
                    return ((string)(this[this.tableField.DefaultValueColumn]));
                }
                set {
                    this[this.tableField.DefaultValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsRequired {
                get {
                    return ((string)(this[this.tableField.IsRequiredColumn]));
                }
                set {
                    this[this.tableField.IsRequiredColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaFieldRow[] GetSchemaFieldRows() {
                return ((SchemaFieldRow[])(base.GetChildRows(this.Table.ChildRelations["SchemaFieldFieldForeignKey"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FontRow : System.Data.DataRow {
            
            private FontDataTable tableFont;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FontRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFont = ((FontDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FontId {
                get {
                    return ((int)(this[this.tableFont.FontIdColumn]));
                }
                set {
                    this[this.tableFont.FontIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeFace {
                get {
                    return ((string)(this[this.tableFont.TypeFaceColumn]));
                }
                set {
                    this[this.tableFont.TypeFaceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PointSize {
                get {
                    return ((float)(this[this.tableFont.PointSizeColumn]));
                }
                set {
                    this[this.tableFont.PointSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsBold {
                get {
                    return ((string)(this[this.tableFont.IsBoldColumn]));
                }
                set {
                    this[this.tableFont.IsBoldColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsItalic {
                get {
                    return ((string)(this[this.tableFont.IsItalicColumn]));
                }
                set {
                    this[this.tableFont.IsItalicColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsUnderline {
                get {
                    return ((string)(this[this.tableFont.IsUnderlineColumn]));
                }
                set {
                    this[this.tableFont.IsUnderlineColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontFile {
                get {
                    return ((string)(this[this.tableFont.FontFileColumn]));
                }
                set {
                    this[this.tableFont.FontFileColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityRow[] GetEntityRows() {
                return ((EntityRow[])(base.GetChildRows(this.Table.ChildRelations["EntityFontForeignKey"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IdAllocationRow : System.Data.DataRow {
            
            private IdAllocationDataTable tableIdAllocation;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IdAllocationRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIdAllocation = ((IdAllocationDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LowestId {
                get {
                    return ((int)(this[this.tableIdAllocation.LowestIdColumn]));
                }
                set {
                    this[this.tableIdAllocation.LowestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HighestId {
                get {
                    return ((int)(this[this.tableIdAllocation.HighestIdColumn]));
                }
                set {
                    this[this.tableIdAllocation.HighestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FileName {
                get {
                    return ((string)(this[this.tableIdAllocation.FileNameColumn]));
                }
                set {
                    this[this.tableIdAllocation.FileNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupId {
                get {
                    return ((int)(this[this.tableIdAllocation.GroupIdColumn]));
                }
                set {
                    this[this.tableIdAllocation.GroupIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    return ((string)(this[this.tableIdAllocation.UserNameColumn]));
                }
                set {
                    this[this.tableIdAllocation.UserNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeAllocated {
                get {
                    return ((System.DateTime)(this[this.tableIdAllocation.TimeAllocatedColumn]));
                }
                set {
                    this[this.tableIdAllocation.TimeAllocatedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumUsed {
                get {
                    return ((int)(this[this.tableIdAllocation.NumUsedColumn]));
                }
                set {
                    this[this.tableIdAllocation.NumUsedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow IdGroupRow {
                get {
                    return ((IdGroupRow)(this.GetParentRow(this.Table.ParentRelations["IdAllocationIdGroupForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["IdAllocationIdGroupForeignKey"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IdFreeRow : System.Data.DataRow {
            
            private IdFreeDataTable tableIdFree;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IdFreeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIdFree = ((IdFreeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupId {
                get {
                    return ((int)(this[this.tableIdFree.GroupIdColumn]));
                }
                set {
                    this[this.tableIdFree.GroupIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LowestId {
                get {
                    return ((int)(this[this.tableIdFree.LowestIdColumn]));
                }
                set {
                    this[this.tableIdFree.LowestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HighestId {
                get {
                    return ((int)(this[this.tableIdFree.HighestIdColumn]));
                }
                set {
                    this[this.tableIdFree.HighestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow IdGroupRow {
                get {
                    return ((IdGroupRow)(this.GetParentRow(this.Table.ParentRelations["IdFreeIdGroupForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["IdFreeIdGroupForeignKey"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IdGroupRow : System.Data.DataRow {
            
            private IdGroupDataTable tableIdGroup;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IdGroupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIdGroup = ((IdGroupDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupId {
                get {
                    return ((int)(this[this.tableIdGroup.GroupIdColumn]));
                }
                set {
                    this[this.tableIdGroup.GroupIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableIdGroup.NameColumn]));
                }
                set {
                    this[this.tableIdGroup.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LowestId {
                get {
                    return ((int)(this[this.tableIdGroup.LowestIdColumn]));
                }
                set {
                    this[this.tableIdGroup.LowestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HighestId {
                get {
                    return ((int)(this[this.tableIdGroup.HighestIdColumn]));
                }
                set {
                    this[this.tableIdGroup.HighestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PacketSize {
                get {
                    return ((int)(this[this.tableIdGroup.PacketSizeColumn]));
                }
                set {
                    this[this.tableIdGroup.PacketSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckDigit {
                get {
                    return ((string)(this[this.tableIdGroup.CheckDigitColumn]));
                }
                set {
                    this[this.tableIdGroup.CheckDigitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyFormat {
                get {
                    return ((string)(this[this.tableIdGroup.KeyFormatColumn]));
                }
                set {
                    this[this.tableIdGroup.KeyFormatColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityRow[] GetEntityRows() {
                return ((EntityRow[])(base.GetChildRows(this.Table.ChildRelations["EntityIdGroupForeignKey"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRow[] GetIdAllocationRows() {
                return ((IdAllocationRow[])(base.GetChildRows(this.Table.ChildRelations["IdAllocationIdGroupForeignKey"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeRow[] GetIdFreeRows() {
                return ((IdFreeRow[])(base.GetChildRows(this.Table.ChildRelations["IdFreeIdGroupForeignKey"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JobRow : System.Data.DataRow {
            
            private JobDataTable tableJob;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JobRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJob = ((JobDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobId {
                get {
                    return ((int)(this[this.tableJob.JobIdColumn]));
                }
                set {
                    this[this.tableJob.JobIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableJob.NameColumn]));
                }
                set {
                    this[this.tableJob.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsActive {
                get {
                    return ((string)(this[this.tableJob.IsActiveColumn]));
                }
                set {
                    this[this.tableJob.IsActiveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArchiveRow[] GetArchiveRows() {
                return ((ArchiveRow[])(base.GetChildRows(this.Table.ChildRelations["ArchiveJobForeignKey"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckoutRow[] GetCheckoutRows() {
                return ((CheckoutRow[])(base.GetChildRows(this.Table.ChildRelations["CheckoutJobForeignKey"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow[] GetMapRows() {
                return ((MapRow[])(base.GetChildRows(this.Table.ChildRelations["MapJobForeignKey"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LayerRow : System.Data.DataRow {
            
            private LayerDataTable tableLayer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LayerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLayer = ((LayerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LayerId {
                get {
                    return ((int)(this[this.tableLayer.LayerIdColumn]));
                }
                set {
                    this[this.tableLayer.LayerIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLayer.NameColumn]));
                }
                set {
                    this[this.tableLayer.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ThemeId {
                get {
                    return ((int)(this[this.tableLayer.ThemeIdColumn]));
                }
                set {
                    this[this.tableLayer.ThemeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ThemeSequence {
                get {
                    return ((int)(this[this.tableLayer.ThemeSequenceColumn]));
                }
                set {
                    this[this.tableLayer.ThemeSequenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DefaultPointId {
                get {
                    return ((int)(this[this.tableLayer.DefaultPointIdColumn]));
                }
                set {
                    this[this.tableLayer.DefaultPointIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DefaultLineId {
                get {
                    return ((int)(this[this.tableLayer.DefaultLineIdColumn]));
                }
                set {
                    this[this.tableLayer.DefaultLineIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DefaultPolygonId {
                get {
                    return ((int)(this[this.tableLayer.DefaultPolygonIdColumn]));
                }
                set {
                    this[this.tableLayer.DefaultPolygonIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DefaultTextId {
                get {
                    return ((int)(this[this.tableLayer.DefaultTextIdColumn]));
                }
                set {
                    this[this.tableLayer.DefaultTextIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityRow EntityRowByLayerEntityForeignKey1 {
                get {
                    return ((EntityRow)(this.GetParentRow(this.Table.ParentRelations["LayerEntityForeignKey1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LayerEntityForeignKey1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityRow EntityRowByLayerEntityForeignKey2 {
                get {
                    return ((EntityRow)(this.GetParentRow(this.Table.ParentRelations["LayerEntityForeignKey2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LayerEntityForeignKey2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityRow EntityRowByLayerEntityForeignKey3 {
                get {
                    return ((EntityRow)(this.GetParentRow(this.Table.ParentRelations["LayerEntityForeignKey3"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LayerEntityForeignKey3"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityRow EntityRowByLayerEntityForeignKey4 {
                get {
                    return ((EntityRow)(this.GetParentRow(this.Table.ParentRelations["LayerEntityForeignKey4"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LayerEntityForeignKey4"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeRow ThemeRow {
                get {
                    return ((ThemeRow)(this.GetParentRow(this.Table.ParentRelations["LayerThemeForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LayerThemeForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityRow[] GetEntityRows() {
                return ((EntityRow[])(base.GetChildRows(this.Table.ChildRelations["EntityLayerForeignKey"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MapRow : System.Data.DataRow {
            
            private MapDataTable tableMap;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MapRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMap = ((MapDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MapId {
                get {
                    return ((int)(this[this.tableMap.MapIdColumn]));
                }
                set {
                    this[this.tableMap.MapIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableMap.NameColumn]));
                }
                set {
                    this[this.tableMap.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short Version {
                get {
                    return ((short)(this[this.tableMap.VersionColumn]));
                }
                set {
                    this[this.tableMap.VersionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime VersionTime {
                get {
                    return ((System.DateTime)(this[this.tableMap.VersionTimeColumn]));
                }
                set {
                    this[this.tableMap.VersionTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobId {
                get {
                    return ((int)(this[this.tableMap.JobIdColumn]));
                }
                set {
                    this[this.tableMap.JobIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableMap.UserIdColumn]));
                }
                set {
                    this[this.tableMap.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ArchiveId {
                get {
                    return ((int)(this[this.tableMap.ArchiveIdColumn]));
                }
                set {
                    this[this.tableMap.ArchiveIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    return ((string)(this[this.tableMap.StatusColumn]));
                }
                set {
                    this[this.tableMap.StatusColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsActive {
                get {
                    return ((string)(this[this.tableMap.IsActiveColumn]));
                }
                set {
                    this[this.tableMap.IsActiveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArchiveRow ArchiveRow {
                get {
                    return ((ArchiveRow)(this.GetParentRow(this.Table.ParentRelations["MapArchiveForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MapArchiveForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow JobRow {
                get {
                    return ((JobRow)(this.GetParentRow(this.Table.ParentRelations["MapJobForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MapJobForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapUserRow MapUserRow {
                get {
                    return ((MapUserRow)(this.GetParentRow(this.Table.ParentRelations["MapMapUserForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["MapMapUserForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArchiveRow[] GetArchiveRows() {
                return ((ArchiveRow[])(base.GetChildRows(this.Table.ChildRelations["ArchiveMapForeignKey"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckoutRow[] GetCheckoutRows() {
                return ((CheckoutRow[])(base.GetChildRows(this.Table.ChildRelations["CheckoutMapForeignKey"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MapUserRow : System.Data.DataRow {
            
            private MapUserDataTable tableMapUser;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MapUserRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMapUser = ((MapUserDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableMapUser.UserIdColumn]));
                }
                set {
                    this[this.tableMapUser.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableMapUser.NameColumn]));
                }
                set {
                    this[this.tableMapUser.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsActive {
                get {
                    return ((string)(this[this.tableMapUser.IsActiveColumn]));
                }
                set {
                    this[this.tableMapUser.IsActiveColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CanCheckout {
                get {
                    return ((string)(this[this.tableMapUser.CanCheckoutColumn]));
                }
                set {
                    this[this.tableMapUser.CanCheckoutColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArchiveRow[] GetArchiveRows() {
                return ((ArchiveRow[])(base.GetChildRows(this.Table.ChildRelations["ArchiveMapUserForeignKey"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckoutRow[] GetCheckoutRows() {
                return ((CheckoutRow[])(base.GetChildRows(this.Table.ChildRelations["CheckoutMapUserForeignKey"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow[] GetMapRows() {
                return ((MapRow[])(base.GetChildRows(this.Table.ChildRelations["MapMapUserForeignKey"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PropertyRow : System.Data.DataRow {
            
            private PropertyDataTable tableProperty;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PropertyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProperty = ((PropertyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableProperty.NameColumn]));
                }
                set {
                    this[this.tableProperty.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableProperty.ValueColumn]));
                }
                set {
                    this[this.tableProperty.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableProperty.DescriptionColumn]));
                }
                set {
                    this[this.tableProperty.DescriptionColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SchemaRow : System.Data.DataRow {
            
            private SchemaDataTable tableSchema;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchemaRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSchema = ((SchemaDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SchemaId {
                get {
                    return ((int)(this[this.tableSchema.SchemaIdColumn]));
                }
                set {
                    this[this.tableSchema.SchemaIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSchema.NameColumn]));
                }
                set {
                    this[this.tableSchema.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TableName {
                get {
                    return ((string)(this[this.tableSchema.TableNameColumn]));
                }
                set {
                    this[this.tableSchema.TableNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitySchemaRow[] GetEntitySchemaRows() {
                return ((EntitySchemaRow[])(base.GetChildRows(this.Table.ChildRelations["EntitySchemaSchemaForeignKey"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaFieldRow[] GetSchemaFieldRows() {
                return ((SchemaFieldRow[])(base.GetChildRows(this.Table.ChildRelations["SchemaFieldSchamaForeignKey"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRow[] GetSchemaTemplateRows() {
                return ((SchemaTemplateRow[])(base.GetChildRows(this.Table.ChildRelations["SchemaTemplateSchemaForeignKey"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SchemaFieldRow : System.Data.DataRow {
            
            private SchemaFieldDataTable tableSchemaField;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchemaFieldRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSchemaField = ((SchemaFieldDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SchemaId {
                get {
                    return ((int)(this[this.tableSchemaField.SchemaIdColumn]));
                }
                set {
                    this[this.tableSchemaField.SchemaIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FieldSequence {
                get {
                    return ((int)(this[this.tableSchemaField.FieldSequenceColumn]));
                }
                set {
                    this[this.tableSchemaField.FieldSequenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FieldId {
                get {
                    return ((int)(this[this.tableSchemaField.FieldIdColumn]));
                }
                set {
                    this[this.tableSchemaField.FieldIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow FieldRow {
                get {
                    return ((FieldRow)(this.GetParentRow(this.Table.ParentRelations["SchemaFieldFieldForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SchemaFieldFieldForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow SchemaRow {
                get {
                    return ((SchemaRow)(this.GetParentRow(this.Table.ParentRelations["SchemaFieldSchamaForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SchemaFieldSchamaForeignKey"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SchemaTemplateRow : System.Data.DataRow {
            
            private SchemaTemplateDataTable tableSchemaTemplate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchemaTemplateRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSchemaTemplate = ((SchemaTemplateDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SchemaId {
                get {
                    return ((int)(this[this.tableSchemaTemplate.SchemaIdColumn]));
                }
                set {
                    this[this.tableSchemaTemplate.SchemaIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateId {
                get {
                    return ((int)(this[this.tableSchemaTemplate.TemplateIdColumn]));
                }
                set {
                    this[this.tableSchemaTemplate.TemplateIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow SchemaRow {
                get {
                    return ((SchemaRow)(this.GetParentRow(this.Table.ParentRelations["SchemaTemplateSchemaForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SchemaTemplateSchemaForeignKey"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow TemplateRow {
                get {
                    return ((TemplateRow)(this.GetParentRow(this.Table.ParentRelations["SchemaTemplateTemplateForeignKey"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SchemaTemplateTemplateForeignKey"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SysIdRow : System.Data.DataRow {
            
            private SysIdDataTable tableSysId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SysIdRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSysId = ((SysIdDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LastId {
                get {
                    return ((int)(this[this.tableSysId.LastIdColumn]));
                }
                set {
                    this[this.tableSysId.LastIdColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TemplateRow : System.Data.DataRow {
            
            private TemplateDataTable tableTemplate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemplate = ((TemplateDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateId {
                get {
                    return ((int)(this[this.tableTemplate.TemplateIdColumn]));
                }
                set {
                    this[this.tableTemplate.TemplateIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTemplate.NameColumn]));
                }
                set {
                    this[this.tableTemplate.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TemplateFormat {
                get {
                    return ((string)(this[this.tableTemplate.TemplateFormatColumn]));
                }
                set {
                    this[this.tableTemplate.TemplateFormatColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRow[] GetSchemaTemplateRows() {
                return ((SchemaTemplateRow[])(base.GetChildRows(this.Table.ChildRelations["SchemaTemplateTemplateForeignKey"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ThemeRow : System.Data.DataRow {
            
            private ThemeDataTable tableTheme;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ThemeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTheme = ((ThemeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ThemeId {
                get {
                    return ((int)(this[this.tableTheme.ThemeIdColumn]));
                }
                set {
                    this[this.tableTheme.ThemeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTheme.NameColumn]));
                }
                set {
                    this[this.tableTheme.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow[] GetLayerRows() {
                return ((LayerRow[])(base.GetChildRows(this.Table.ChildRelations["LayerThemeForeignKey"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ArchiveRowChangeEvent : System.EventArgs {
            
            private ArchiveRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArchiveRowChangeEvent(ArchiveRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ArchiveRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CheckoutRowChangeEvent : System.EventArgs {
            
            private CheckoutRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckoutRowChangeEvent(CheckoutRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CheckoutRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DomainRowChangeEvent : System.EventArgs {
            
            private DomainRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainRowChangeEvent(DomainRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DomainListRowChangeEvent : System.EventArgs {
            
            private DomainListRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainListRowChangeEvent(DomainListRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DomainListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EditionRowChangeEvent : System.EventArgs {
            
            private EditionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditionRowChangeEvent(EditionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EntityRowChangeEvent : System.EventArgs {
            
            private EntityRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityRowChangeEvent(EntityRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EntitySchemaRowChangeEvent : System.EventArgs {
            
            private EntitySchemaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitySchemaRowChangeEvent(EntitySchemaRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntitySchemaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FieldRowChangeEvent : System.EventArgs {
            
            private FieldRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRowChangeEvent(FieldRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FieldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FontRowChangeEvent : System.EventArgs {
            
            private FontRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontRowChangeEvent(FontRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IdAllocationRowChangeEvent : System.EventArgs {
            
            private IdAllocationRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRowChangeEvent(IdAllocationRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IdFreeRowChangeEvent : System.EventArgs {
            
            private IdFreeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeRowChangeEvent(IdFreeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IdGroupRowChangeEvent : System.EventArgs {
            
            private IdGroupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRowChangeEvent(IdGroupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JobRowChangeEvent : System.EventArgs {
            
            private JobRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRowChangeEvent(JobRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LayerRowChangeEvent : System.EventArgs {
            
            private LayerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRowChangeEvent(LayerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MapRowChangeEvent : System.EventArgs {
            
            private MapRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRowChangeEvent(MapRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MapUserRowChangeEvent : System.EventArgs {
            
            private MapUserRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapUserRowChangeEvent(MapUserRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MapUserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PropertyRowChangeEvent : System.EventArgs {
            
            private PropertyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRowChangeEvent(PropertyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SchemaRowChangeEvent : System.EventArgs {
            
            private SchemaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRowChangeEvent(SchemaRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SchemaFieldRowChangeEvent : System.EventArgs {
            
            private SchemaFieldRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaFieldRowChangeEvent(SchemaFieldRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaFieldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SchemaTemplateRowChangeEvent : System.EventArgs {
            
            private SchemaTemplateRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRowChangeEvent(SchemaTemplateRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SysIdRowChangeEvent : System.EventArgs {
            
            private SysIdRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysIdRowChangeEvent(SysIdRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysIdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TemplateRowChangeEvent : System.EventArgs {
            
            private TemplateRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRowChangeEvent(TemplateRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ThemeRowChangeEvent : System.EventArgs {
            
            private ThemeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeRowChangeEvent(ThemeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Backsight.Data.BacksightDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ArchiveTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ArchiveTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Archive";
            tableMapping.ColumnMappings.Add("ArchiveId", "ArchiveId");
            tableMapping.ColumnMappings.Add("ArchiveTime", "ArchiveTime");
            tableMapping.ColumnMappings.Add("MapId", "MapId");
            tableMapping.ColumnMappings.Add("Version", "Version");
            tableMapping.ColumnMappings.Add("VersionTime", "VersionTime");
            tableMapping.ColumnMappings.Add("JobId", "JobId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("PrevArchiveId", "PrevArchiveId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Archive] WHERE (([ArchiveId] = @Original_ArchiveId) AND ([ArchiveTime] = @Original_ArchiveTime) AND ([MapId] = @Original_MapId) AND ([Version] = @Original_Version) AND ([VersionTime] = @Original_VersionTime) AND ([JobId] = @Original_JobId) AND ([UserId] = @Original_UserId) AND ([PrevArchiveId] = @Original_PrevArchiveId))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ArchiveId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ArchiveId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ArchiveTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ArchiveTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MapId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MapId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Version", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Version", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_VersionTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VersionTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PrevArchiveId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PrevArchiveId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Archive] ([ArchiveId], [ArchiveTime], [MapId], [Version], [VersionTime], [JobId], [UserId], [PrevArchiveId]) VALUES (@ArchiveId, @ArchiveTime, @MapId, @Version, @VersionTime, @JobId, @UserId, @PrevArchiveId);
SELECT ArchiveId, ArchiveTime, MapId, Version, VersionTime, JobId, UserId, PrevArchiveId FROM Archive WHERE (ArchiveId = @ArchiveId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ArchiveId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ArchiveId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ArchiveTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ArchiveTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MapId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MapId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Version", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Version", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VersionTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VersionTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PrevArchiveId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PrevArchiveId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Archive] SET [ArchiveId] = @ArchiveId, [ArchiveTime] = @ArchiveTime, [MapId] = @MapId, [Version] = @Version, [VersionTime] = @VersionTime, [JobId] = @JobId, [UserId] = @UserId, [PrevArchiveId] = @PrevArchiveId WHERE (([ArchiveId] = @Original_ArchiveId) AND ([ArchiveTime] = @Original_ArchiveTime) AND ([MapId] = @Original_MapId) AND ([Version] = @Original_Version) AND ([VersionTime] = @Original_VersionTime) AND ([JobId] = @Original_JobId) AND ([UserId] = @Original_UserId) AND ([PrevArchiveId] = @Original_PrevArchiveId));
SELECT ArchiveId, ArchiveTime, MapId, Version, VersionTime, JobId, UserId, PrevArchiveId FROM Archive WHERE (ArchiveId = @ArchiveId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ArchiveId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ArchiveId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ArchiveTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ArchiveTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MapId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MapId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Version", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Version", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VersionTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VersionTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PrevArchiveId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PrevArchiveId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ArchiveId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ArchiveId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ArchiveTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "ArchiveTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MapId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MapId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Version", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Version", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_VersionTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VersionTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PrevArchiveId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PrevArchiveId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ArchiveId, ArchiveTime, MapId, Version, VersionTime, JobId, UserId, PrevAr" +
                "chiveId FROM dbo.Archive";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.ArchiveDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.ArchiveDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.ArchiveDataTable dataTable = new BacksightDataSet.ArchiveDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.ArchiveDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Archive");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ArchiveId, System.DateTime Original_ArchiveTime, int Original_MapId, short Original_Version, System.DateTime Original_VersionTime, int Original_JobId, int Original_UserId, int Original_PrevArchiveId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ArchiveId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_ArchiveTime));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_MapId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((short)(Original_Version));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_VersionTime));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_JobId));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_UserId));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_PrevArchiveId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ArchiveId, System.DateTime ArchiveTime, int MapId, short Version, System.DateTime VersionTime, int JobId, int UserId, int PrevArchiveId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ArchiveId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(ArchiveTime));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(MapId));
            this.Adapter.InsertCommand.Parameters[3].Value = ((short)(Version));
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(VersionTime));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(JobId));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(UserId));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(PrevArchiveId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ArchiveId, 
                    System.DateTime ArchiveTime, 
                    int MapId, 
                    short Version, 
                    System.DateTime VersionTime, 
                    int JobId, 
                    int UserId, 
                    int PrevArchiveId, 
                    int Original_ArchiveId, 
                    System.DateTime Original_ArchiveTime, 
                    int Original_MapId, 
                    short Original_Version, 
                    System.DateTime Original_VersionTime, 
                    int Original_JobId, 
                    int Original_UserId, 
                    int Original_PrevArchiveId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ArchiveId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(ArchiveTime));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(MapId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((short)(Version));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(VersionTime));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(JobId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(UserId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(PrevArchiveId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_ArchiveId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(Original_ArchiveTime));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_MapId));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((short)(Original_Version));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_VersionTime));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_JobId));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_UserId));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_PrevArchiveId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class CheckoutTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CheckoutTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Checkout";
            tableMapping.ColumnMappings.Add("MapId", "MapId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("JobId", "JobId");
            tableMapping.ColumnMappings.Add("CheckoutTime", "CheckoutTime");
            tableMapping.ColumnMappings.Add("CheckinTime", "CheckinTime");
            tableMapping.ColumnMappings.Add("AcceptTime", "AcceptTime");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Checkout] WHERE (([MapId] = @Original_MapId) AND ([UserId] = @Original_UserId) AND ([JobId] = @Original_JobId) AND ([CheckoutTime] = @Original_CheckoutTime) AND ((@IsNull_CheckinTime = 1 AND [CheckinTime] IS NULL) OR ([CheckinTime] = @Original_CheckinTime)) AND ((@IsNull_AcceptTime = 1 AND [AcceptTime] IS NULL) OR ([AcceptTime] = @Original_AcceptTime)))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MapId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MapId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CheckoutTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckoutTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CheckinTime", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckinTime", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CheckinTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckinTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AcceptTime", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AcceptTime", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AcceptTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "AcceptTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Checkout] ([MapId], [UserId], [JobId], [CheckoutTime], [CheckinTime], [AcceptTime]) VALUES (@MapId, @UserId, @JobId, @CheckoutTime, @CheckinTime, @AcceptTime);
SELECT MapId, UserId, JobId, CheckoutTime, CheckinTime, AcceptTime FROM Checkout WHERE (MapId = @MapId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MapId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MapId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CheckoutTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckoutTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CheckinTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckinTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AcceptTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "AcceptTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Checkout] SET [MapId] = @MapId, [UserId] = @UserId, [JobId] = @JobId, [CheckoutTime] = @CheckoutTime, [CheckinTime] = @CheckinTime, [AcceptTime] = @AcceptTime WHERE (([MapId] = @Original_MapId) AND ([UserId] = @Original_UserId) AND ([JobId] = @Original_JobId) AND ([CheckoutTime] = @Original_CheckoutTime) AND ((@IsNull_CheckinTime = 1 AND [CheckinTime] IS NULL) OR ([CheckinTime] = @Original_CheckinTime)) AND ((@IsNull_AcceptTime = 1 AND [AcceptTime] IS NULL) OR ([AcceptTime] = @Original_AcceptTime)));
SELECT MapId, UserId, JobId, CheckoutTime, CheckinTime, AcceptTime FROM Checkout WHERE (MapId = @MapId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MapId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MapId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CheckoutTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckoutTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CheckinTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckinTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@AcceptTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "AcceptTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MapId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MapId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CheckoutTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckoutTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CheckinTime", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckinTime", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CheckinTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckinTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_AcceptTime", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "AcceptTime", System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_AcceptTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "AcceptTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MapId, UserId, JobId, CheckoutTime, CheckinTime, AcceptTime FROM dbo.Check" +
                "out";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.CheckoutDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.CheckoutDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.CheckoutDataTable dataTable = new BacksightDataSet.CheckoutDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.CheckoutDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Checkout");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MapId, int Original_UserId, int Original_JobId, System.DateTime Original_CheckoutTime, System.Nullable<System.DateTime> Original_CheckinTime, System.Nullable<System.DateTime> Original_AcceptTime) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MapId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_UserId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_JobId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_CheckoutTime));
            if ((Original_CheckinTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_CheckinTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Original_AcceptTime.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_AcceptTime.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int MapId, int UserId, int JobId, System.DateTime CheckoutTime, System.Nullable<System.DateTime> CheckinTime, System.Nullable<System.DateTime> AcceptTime) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(MapId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(UserId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(JobId));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(CheckoutTime));
            if ((CheckinTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(CheckinTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((AcceptTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(AcceptTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int MapId, int UserId, int JobId, System.DateTime CheckoutTime, System.Nullable<System.DateTime> CheckinTime, System.Nullable<System.DateTime> AcceptTime, int Original_MapId, int Original_UserId, int Original_JobId, System.DateTime Original_CheckoutTime, System.Nullable<System.DateTime> Original_CheckinTime, System.Nullable<System.DateTime> Original_AcceptTime) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(MapId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(UserId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(JobId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(CheckoutTime));
            if ((CheckinTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(CheckinTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            if ((AcceptTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(AcceptTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_MapId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_UserId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_JobId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.DateTime)(Original_CheckoutTime));
            if ((Original_CheckinTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_CheckinTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = System.DBNull.Value;
            }
            if ((Original_AcceptTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_AcceptTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DomainTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DomainTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Domain";
            tableMapping.ColumnMappings.Add("DomainId", "DomainId");
            tableMapping.ColumnMappings.Add("DomainName", "DomainName");
            tableMapping.ColumnMappings.Add("MinValue", "MinValue");
            tableMapping.ColumnMappings.Add("MaxValue", "MaxValue");
            tableMapping.ColumnMappings.Add("Increment", "Increment");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Domain] WHERE (([DomainId] = @Original_DomainId) AND ([DomainN" +
                "ame] = @Original_DomainName) AND ([MinValue] = @Original_MinValue) AND ([MaxValu" +
                "e] = @Original_MaxValue) AND ([Increment] = @Original_Increment))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DomainId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DomainName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MinValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MinValue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaxValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MaxValue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Increment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Increment", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Domain] ([DomainId], [DomainName], [MinValue], [MaxValue], [Increment]) VALUES (@DomainId, @DomainName, @MinValue, @MaxValue, @Increment);
SELECT DomainId, DomainName, MinValue, MaxValue, Increment FROM Domain WHERE (DomainId = @DomainId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DomainId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DomainName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MinValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MinValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaxValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MaxValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Increment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Increment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Domain] SET [DomainId] = @DomainId, [DomainName] = @DomainName, [MinValue] = @MinValue, [MaxValue] = @MaxValue, [Increment] = @Increment WHERE (([DomainId] = @Original_DomainId) AND ([DomainName] = @Original_DomainName) AND ([MinValue] = @Original_MinValue) AND ([MaxValue] = @Original_MaxValue) AND ([Increment] = @Original_Increment));
SELECT DomainId, DomainName, MinValue, MaxValue, Increment FROM Domain WHERE (DomainId = @DomainId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DomainId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DomainName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MinValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MinValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MaxValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MaxValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Increment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Increment", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DomainId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DomainName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MinValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MinValue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MaxValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "MaxValue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Increment", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Increment", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DomainId, DomainName, MinValue, MaxValue, Increment FROM dbo.Domain";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.DomainDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.DomainDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.DomainDataTable dataTable = new BacksightDataSet.DomainDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.DomainDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Domain");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_DomainId, string Original_DomainName, string Original_MinValue, string Original_MaxValue, string Original_Increment) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_DomainId));
            if ((Original_DomainName == null)) {
                throw new System.ArgumentNullException("Original_DomainName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_DomainName));
            }
            if ((Original_MinValue == null)) {
                throw new System.ArgumentNullException("Original_MinValue");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_MinValue));
            }
            if ((Original_MaxValue == null)) {
                throw new System.ArgumentNullException("Original_MaxValue");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_MaxValue));
            }
            if ((Original_Increment == null)) {
                throw new System.ArgumentNullException("Original_Increment");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Increment));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int DomainId, string DomainName, string MinValue, string MaxValue, string Increment) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(DomainId));
            if ((DomainName == null)) {
                throw new System.ArgumentNullException("DomainName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(DomainName));
            }
            if ((MinValue == null)) {
                throw new System.ArgumentNullException("MinValue");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(MinValue));
            }
            if ((MaxValue == null)) {
                throw new System.ArgumentNullException("MaxValue");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(MaxValue));
            }
            if ((Increment == null)) {
                throw new System.ArgumentNullException("Increment");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Increment));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int DomainId, string DomainName, string MinValue, string MaxValue, string Increment, int Original_DomainId, string Original_DomainName, string Original_MinValue, string Original_MaxValue, string Original_Increment) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(DomainId));
            if ((DomainName == null)) {
                throw new System.ArgumentNullException("DomainName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(DomainName));
            }
            if ((MinValue == null)) {
                throw new System.ArgumentNullException("MinValue");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(MinValue));
            }
            if ((MaxValue == null)) {
                throw new System.ArgumentNullException("MaxValue");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(MaxValue));
            }
            if ((Increment == null)) {
                throw new System.ArgumentNullException("Increment");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Increment));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_DomainId));
            if ((Original_DomainName == null)) {
                throw new System.ArgumentNullException("Original_DomainName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_DomainName));
            }
            if ((Original_MinValue == null)) {
                throw new System.ArgumentNullException("Original_MinValue");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_MinValue));
            }
            if ((Original_MaxValue == null)) {
                throw new System.ArgumentNullException("Original_MaxValue");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_MaxValue));
            }
            if ((Original_Increment == null)) {
                throw new System.ArgumentNullException("Original_Increment");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Increment));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DomainListTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DomainListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DomainList";
            tableMapping.ColumnMappings.Add("DomainId", "DomainId");
            tableMapping.ColumnMappings.Add("ShortValue", "ShortValue");
            tableMapping.ColumnMappings.Add("LongValue", "LongValue");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[DomainList] WHERE (([DomainId] = @Original_DomainId) AND ([Sho" +
                "rtValue] = @Original_ShortValue) AND ([LongValue] = @Original_LongValue))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DomainId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ShortValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ShortValue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LongValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LongValue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[DomainList] ([DomainId], [ShortValue], [LongValue]) VALUES (@D" +
                "omainId, @ShortValue, @LongValue);\r\nSELECT DomainId, ShortValue, LongValue FROM " +
                "DomainList WHERE (DomainId = @DomainId) AND (ShortValue = @ShortValue)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DomainId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ShortValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ShortValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LongValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LongValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[DomainList] SET [DomainId] = @DomainId, [ShortValue] = @ShortValue, [LongValue] = @LongValue WHERE (([DomainId] = @Original_DomainId) AND ([ShortValue] = @Original_ShortValue) AND ([LongValue] = @Original_LongValue));
SELECT DomainId, ShortValue, LongValue FROM DomainList WHERE (DomainId = @DomainId) AND (ShortValue = @ShortValue)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DomainId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ShortValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ShortValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LongValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LongValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DomainId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ShortValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ShortValue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LongValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "LongValue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT DomainId, ShortValue, LongValue FROM dbo.DomainList";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.DomainListDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.DomainListDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.DomainListDataTable dataTable = new BacksightDataSet.DomainListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.DomainListDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "DomainList");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_DomainId, string Original_ShortValue, string Original_LongValue) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_DomainId));
            if ((Original_ShortValue == null)) {
                throw new System.ArgumentNullException("Original_ShortValue");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ShortValue));
            }
            if ((Original_LongValue == null)) {
                throw new System.ArgumentNullException("Original_LongValue");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_LongValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int DomainId, string ShortValue, string LongValue) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(DomainId));
            if ((ShortValue == null)) {
                throw new System.ArgumentNullException("ShortValue");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ShortValue));
            }
            if ((LongValue == null)) {
                throw new System.ArgumentNullException("LongValue");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(LongValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int DomainId, string ShortValue, string LongValue, int Original_DomainId, string Original_ShortValue, string Original_LongValue) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(DomainId));
            if ((ShortValue == null)) {
                throw new System.ArgumentNullException("ShortValue");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ShortValue));
            }
            if ((LongValue == null)) {
                throw new System.ArgumentNullException("LongValue");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(LongValue));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_DomainId));
            if ((Original_ShortValue == null)) {
                throw new System.ArgumentNullException("Original_ShortValue");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_ShortValue));
            }
            if ((Original_LongValue == null)) {
                throw new System.ArgumentNullException("Original_LongValue");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_LongValue));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EditionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EditionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Edition";
            tableMapping.ColumnMappings.Add("EditionId", "EditionId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Status", "Status");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Edition] WHERE (([EditionId] = @Original_EditionId) AND ([Name" +
                "] = @Original_Name) AND ([Status] = @Original_Status))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EditionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EditionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Status", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Edition] ([EditionId], [Name], [Status]) VALUES (@EditionId, @" +
                "Name, @Status);\r\nSELECT EditionId, Name, Status FROM Edition WHERE (EditionId = " +
                "@EditionId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EditionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EditionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Status", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Edition] SET [EditionId] = @EditionId, [Name] = @Name, [Status] = @Status WHERE (([EditionId] = @Original_EditionId) AND ([Name] = @Original_Name) AND ([Status] = @Original_Status));
SELECT EditionId, Name, Status FROM Edition WHERE (EditionId = @EditionId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EditionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EditionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Status", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EditionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EditionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Status", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EditionId, Name, Status FROM dbo.Edition";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.EditionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.EditionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.EditionDataTable dataTable = new BacksightDataSet.EditionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.EditionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Edition");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_EditionId, string Original_Name, string Original_Status) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_EditionId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            if ((Original_Status == null)) {
                throw new System.ArgumentNullException("Original_Status");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Status));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int EditionId, string Name, string Status) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(EditionId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((Status == null)) {
                throw new System.ArgumentNullException("Status");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Status));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int EditionId, string Name, string Status, int Original_EditionId, string Original_Name, string Original_Status) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(EditionId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((Status == null)) {
                throw new System.ArgumentNullException("Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Status));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_EditionId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Name));
            }
            if ((Original_Status == null)) {
                throw new System.ArgumentNullException("Original_Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Status));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EntityTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EntityTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Entity";
            tableMapping.ColumnMappings.Add("EntityId", "EntityId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("IsPoint", "IsPoint");
            tableMapping.ColumnMappings.Add("IsLine", "IsLine");
            tableMapping.ColumnMappings.Add("IsLineTopological", "IsLineTopological");
            tableMapping.ColumnMappings.Add("IsPolygon", "IsPolygon");
            tableMapping.ColumnMappings.Add("IsText", "IsText");
            tableMapping.ColumnMappings.Add("FontId", "FontId");
            tableMapping.ColumnMappings.Add("LayerId", "LayerId");
            tableMapping.ColumnMappings.Add("GroupId", "GroupId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Entity] WHERE (([EntityId] = @Original_EntityId) AND ([Name] = @Original_Name) AND ([IsPoint] = @Original_IsPoint) AND ([IsLine] = @Original_IsLine) AND ([IsLineTopological] = @Original_IsLineTopological) AND ([IsPolygon] = @Original_IsPolygon) AND ([IsText] = @Original_IsText) AND ([FontId] = @Original_FontId) AND ([LayerId] = @Original_LayerId) AND ([GroupId] = @Original_GroupId))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsPoint", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPoint", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsLine", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLine", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsLineTopological", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLineTopological", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsPolygon", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPolygon", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsText", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsText", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Entity] ([EntityId], [Name], [IsPoint], [IsLine], [IsLineTopological], [IsPolygon], [IsText], [FontId], [LayerId], [GroupId]) VALUES (@EntityId, @Name, @IsPoint, @IsLine, @IsLineTopological, @IsPolygon, @IsText, @FontId, @LayerId, @GroupId);
SELECT EntityId, Name, IsPoint, IsLine, IsLineTopological, IsPolygon, IsText, FontId, LayerId, GroupId FROM Entity WHERE (EntityId = @EntityId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsPoint", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPoint", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsLine", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLine", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsLineTopological", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLineTopological", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsPolygon", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPolygon", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsText", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsText", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Entity] SET [EntityId] = @EntityId, [Name] = @Name, [IsPoint] = @IsPoint, [IsLine] = @IsLine, [IsLineTopological] = @IsLineTopological, [IsPolygon] = @IsPolygon, [IsText] = @IsText, [FontId] = @FontId, [LayerId] = @LayerId, [GroupId] = @GroupId WHERE (([EntityId] = @Original_EntityId) AND ([Name] = @Original_Name) AND ([IsPoint] = @Original_IsPoint) AND ([IsLine] = @Original_IsLine) AND ([IsLineTopological] = @Original_IsLineTopological) AND ([IsPolygon] = @Original_IsPolygon) AND ([IsText] = @Original_IsText) AND ([FontId] = @Original_FontId) AND ([LayerId] = @Original_LayerId) AND ([GroupId] = @Original_GroupId));
SELECT EntityId, Name, IsPoint, IsLine, IsLineTopological, IsPolygon, IsText, FontId, LayerId, GroupId FROM Entity WHERE (EntityId = @EntityId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsPoint", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPoint", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsLine", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLine", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsLineTopological", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLineTopological", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsPolygon", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPolygon", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsText", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsText", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsPoint", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPoint", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsLine", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLine", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsLineTopological", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLineTopological", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsPolygon", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPolygon", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsText", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsText", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EntityId, Name, IsPoint, IsLine, IsLineTopological, IsPolygon, IsText, Fon" +
                "tId, LayerId, GroupId FROM dbo.Entity";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.EntityDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.EntityDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.EntityDataTable dataTable = new BacksightDataSet.EntityDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.EntityDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Entity");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_EntityId, string Original_Name, string Original_IsPoint, string Original_IsLine, string Original_IsLineTopological, string Original_IsPolygon, string Original_IsText, int Original_FontId, int Original_LayerId, int Original_GroupId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_EntityId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            if ((Original_IsPoint == null)) {
                throw new System.ArgumentNullException("Original_IsPoint");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_IsPoint));
            }
            if ((Original_IsLine == null)) {
                throw new System.ArgumentNullException("Original_IsLine");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_IsLine));
            }
            if ((Original_IsLineTopological == null)) {
                throw new System.ArgumentNullException("Original_IsLineTopological");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_IsLineTopological));
            }
            if ((Original_IsPolygon == null)) {
                throw new System.ArgumentNullException("Original_IsPolygon");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_IsPolygon));
            }
            if ((Original_IsText == null)) {
                throw new System.ArgumentNullException("Original_IsText");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_IsText));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_FontId));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_LayerId));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_GroupId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int EntityId, string Name, string IsPoint, string IsLine, string IsLineTopological, string IsPolygon, string IsText, int FontId, int LayerId, int GroupId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(EntityId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((IsPoint == null)) {
                throw new System.ArgumentNullException("IsPoint");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(IsPoint));
            }
            if ((IsLine == null)) {
                throw new System.ArgumentNullException("IsLine");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(IsLine));
            }
            if ((IsLineTopological == null)) {
                throw new System.ArgumentNullException("IsLineTopological");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(IsLineTopological));
            }
            if ((IsPolygon == null)) {
                throw new System.ArgumentNullException("IsPolygon");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(IsPolygon));
            }
            if ((IsText == null)) {
                throw new System.ArgumentNullException("IsText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(IsText));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(FontId));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(LayerId));
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(GroupId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int EntityId, 
                    string Name, 
                    string IsPoint, 
                    string IsLine, 
                    string IsLineTopological, 
                    string IsPolygon, 
                    string IsText, 
                    int FontId, 
                    int LayerId, 
                    int GroupId, 
                    int Original_EntityId, 
                    string Original_Name, 
                    string Original_IsPoint, 
                    string Original_IsLine, 
                    string Original_IsLineTopological, 
                    string Original_IsPolygon, 
                    string Original_IsText, 
                    int Original_FontId, 
                    int Original_LayerId, 
                    int Original_GroupId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(EntityId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((IsPoint == null)) {
                throw new System.ArgumentNullException("IsPoint");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(IsPoint));
            }
            if ((IsLine == null)) {
                throw new System.ArgumentNullException("IsLine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(IsLine));
            }
            if ((IsLineTopological == null)) {
                throw new System.ArgumentNullException("IsLineTopological");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(IsLineTopological));
            }
            if ((IsPolygon == null)) {
                throw new System.ArgumentNullException("IsPolygon");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(IsPolygon));
            }
            if ((IsText == null)) {
                throw new System.ArgumentNullException("IsText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(IsText));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(FontId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(LayerId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(GroupId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_EntityId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Name));
            }
            if ((Original_IsPoint == null)) {
                throw new System.ArgumentNullException("Original_IsPoint");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_IsPoint));
            }
            if ((Original_IsLine == null)) {
                throw new System.ArgumentNullException("Original_IsLine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_IsLine));
            }
            if ((Original_IsLineTopological == null)) {
                throw new System.ArgumentNullException("Original_IsLineTopological");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_IsLineTopological));
            }
            if ((Original_IsPolygon == null)) {
                throw new System.ArgumentNullException("Original_IsPolygon");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_IsPolygon));
            }
            if ((Original_IsText == null)) {
                throw new System.ArgumentNullException("Original_IsText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_IsText));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_FontId));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_LayerId));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_GroupId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EntitySchemaTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EntitySchemaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EntitySchema";
            tableMapping.ColumnMappings.Add("EntityId", "EntityId");
            tableMapping.ColumnMappings.Add("SchemaId", "SchemaId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[EntitySchema] WHERE (([EntityId] = @Original_EntityId) AND ([S" +
                "chemaId] = @Original_SchemaId))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EntitySchema] ([EntityId], [SchemaId]) VALUES (@EntityId, @Sch" +
                "emaId);\r\nSELECT EntityId, SchemaId FROM EntitySchema WHERE (EntityId = @EntityId" +
                ") AND (SchemaId = @SchemaId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[EntitySchema] SET [EntityId] = @EntityId, [SchemaId] = @SchemaId WHERE (([EntityId] = @Original_EntityId) AND ([SchemaId] = @Original_SchemaId));
SELECT EntityId, SchemaId FROM EntitySchema WHERE (EntityId = @EntityId) AND (SchemaId = @SchemaId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EntityId, SchemaId FROM dbo.EntitySchema";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.EntitySchemaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.EntitySchemaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.EntitySchemaDataTable dataTable = new BacksightDataSet.EntitySchemaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.EntitySchemaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "EntitySchema");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_EntityId, int Original_SchemaId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_EntityId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_SchemaId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int EntityId, int SchemaId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(EntityId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(SchemaId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int EntityId, int SchemaId, int Original_EntityId, int Original_SchemaId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(EntityId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(SchemaId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_EntityId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_SchemaId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FieldTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FieldTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Field";
            tableMapping.ColumnMappings.Add("FieldId", "FieldId");
            tableMapping.ColumnMappings.Add("FieldName", "FieldName");
            tableMapping.ColumnMappings.Add("ColumnName", "ColumnName");
            tableMapping.ColumnMappings.Add("DataType", "DataType");
            tableMapping.ColumnMappings.Add("Width", "Width");
            tableMapping.ColumnMappings.Add("DomainId", "DomainId");
            tableMapping.ColumnMappings.Add("DefaultValue", "DefaultValue");
            tableMapping.ColumnMappings.Add("IsRequired", "IsRequired");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Field] WHERE (([FieldId] = @Original_FieldId) AND ([FieldName] = @Original_FieldName) AND ([ColumnName] = @Original_ColumnName) AND ([DataType] = @Original_DataType) AND ([Width] = @Original_Width) AND ([DomainId] = @Original_DomainId) AND ([DefaultValue] = @Original_DefaultValue) AND ([IsRequired] = @Original_IsRequired))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FieldId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FieldName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ColumnName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ColumnName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DataType", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DataType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Width", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Width", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DomainId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultValue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsRequired", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsRequired", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Field] ([FieldId], [FieldName], [ColumnName], [DataType], [Width], [DomainId], [DefaultValue], [IsRequired]) VALUES (@FieldId, @FieldName, @ColumnName, @DataType, @Width, @DomainId, @DefaultValue, @IsRequired);
SELECT FieldId, FieldName, ColumnName, DataType, Width, DomainId, DefaultValue, IsRequired FROM Field WHERE (FieldId = @FieldId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FieldId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FieldName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ColumnName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ColumnName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DataType", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DataType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Width", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Width", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DomainId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsRequired", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsRequired", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Field] SET [FieldId] = @FieldId, [FieldName] = @FieldName, [ColumnName] = @ColumnName, [DataType] = @DataType, [Width] = @Width, [DomainId] = @DomainId, [DefaultValue] = @DefaultValue, [IsRequired] = @IsRequired WHERE (([FieldId] = @Original_FieldId) AND ([FieldName] = @Original_FieldName) AND ([ColumnName] = @Original_ColumnName) AND ([DataType] = @Original_DataType) AND ([Width] = @Original_Width) AND ([DomainId] = @Original_DomainId) AND ([DefaultValue] = @Original_DefaultValue) AND ([IsRequired] = @Original_IsRequired));
SELECT FieldId, FieldName, ColumnName, DataType, Width, DomainId, DefaultValue, IsRequired FROM Field WHERE (FieldId = @FieldId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FieldId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FieldName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ColumnName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ColumnName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DataType", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DataType", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Width", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Width", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DomainId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultValue", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsRequired", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsRequired", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FieldId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FieldName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ColumnName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "ColumnName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DataType", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DataType", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Width", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Width", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DomainId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DomainId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultValue", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultValue", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsRequired", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsRequired", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FieldId, FieldName, ColumnName, DataType, Width, DomainId, DefaultValue, I" +
                "sRequired FROM dbo.Field";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.FieldDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.FieldDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.FieldDataTable dataTable = new BacksightDataSet.FieldDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.FieldDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Field");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_FieldId, string Original_FieldName, string Original_ColumnName, string Original_DataType, int Original_Width, int Original_DomainId, string Original_DefaultValue, string Original_IsRequired) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_FieldId));
            if ((Original_FieldName == null)) {
                throw new System.ArgumentNullException("Original_FieldName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_FieldName));
            }
            if ((Original_ColumnName == null)) {
                throw new System.ArgumentNullException("Original_ColumnName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_ColumnName));
            }
            if ((Original_DataType == null)) {
                throw new System.ArgumentNullException("Original_DataType");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_DataType));
            }
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_Width));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_DomainId));
            if ((Original_DefaultValue == null)) {
                throw new System.ArgumentNullException("Original_DefaultValue");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_DefaultValue));
            }
            if ((Original_IsRequired == null)) {
                throw new System.ArgumentNullException("Original_IsRequired");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_IsRequired));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int FieldId, string FieldName, string ColumnName, string DataType, int Width, int DomainId, string DefaultValue, string IsRequired) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(FieldId));
            if ((FieldName == null)) {
                throw new System.ArgumentNullException("FieldName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(FieldName));
            }
            if ((ColumnName == null)) {
                throw new System.ArgumentNullException("ColumnName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(ColumnName));
            }
            if ((DataType == null)) {
                throw new System.ArgumentNullException("DataType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(DataType));
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Width));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(DomainId));
            if ((DefaultValue == null)) {
                throw new System.ArgumentNullException("DefaultValue");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(DefaultValue));
            }
            if ((IsRequired == null)) {
                throw new System.ArgumentNullException("IsRequired");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(IsRequired));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int FieldId, 
                    string FieldName, 
                    string ColumnName, 
                    string DataType, 
                    int Width, 
                    int DomainId, 
                    string DefaultValue, 
                    string IsRequired, 
                    int Original_FieldId, 
                    string Original_FieldName, 
                    string Original_ColumnName, 
                    string Original_DataType, 
                    int Original_Width, 
                    int Original_DomainId, 
                    string Original_DefaultValue, 
                    string Original_IsRequired) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(FieldId));
            if ((FieldName == null)) {
                throw new System.ArgumentNullException("FieldName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(FieldName));
            }
            if ((ColumnName == null)) {
                throw new System.ArgumentNullException("ColumnName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(ColumnName));
            }
            if ((DataType == null)) {
                throw new System.ArgumentNullException("DataType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(DataType));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Width));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(DomainId));
            if ((DefaultValue == null)) {
                throw new System.ArgumentNullException("DefaultValue");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(DefaultValue));
            }
            if ((IsRequired == null)) {
                throw new System.ArgumentNullException("IsRequired");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(IsRequired));
            }
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_FieldId));
            if ((Original_FieldName == null)) {
                throw new System.ArgumentNullException("Original_FieldName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_FieldName));
            }
            if ((Original_ColumnName == null)) {
                throw new System.ArgumentNullException("Original_ColumnName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_ColumnName));
            }
            if ((Original_DataType == null)) {
                throw new System.ArgumentNullException("Original_DataType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_DataType));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_Width));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_DomainId));
            if ((Original_DefaultValue == null)) {
                throw new System.ArgumentNullException("Original_DefaultValue");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_DefaultValue));
            }
            if ((Original_IsRequired == null)) {
                throw new System.ArgumentNullException("Original_IsRequired");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_IsRequired));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FontTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FontTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Font";
            tableMapping.ColumnMappings.Add("FontId", "FontId");
            tableMapping.ColumnMappings.Add("TypeFace", "TypeFace");
            tableMapping.ColumnMappings.Add("PointSize", "PointSize");
            tableMapping.ColumnMappings.Add("IsBold", "IsBold");
            tableMapping.ColumnMappings.Add("IsItalic", "IsItalic");
            tableMapping.ColumnMappings.Add("IsUnderline", "IsUnderline");
            tableMapping.ColumnMappings.Add("FontFile", "FontFile");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Font] WHERE (([FontId] = @Original_FontId) AND ([TypeFace] = @Original_TypeFace) AND ([PointSize] = @Original_PointSize) AND ([IsBold] = @Original_IsBold) AND ([IsItalic] = @Original_IsItalic) AND ([IsUnderline] = @Original_IsUnderline) AND ([FontFile] = @Original_FontFile))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TypeFace", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TypeFace", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PointSize", System.Data.SqlDbType.Real, 0, System.Data.ParameterDirection.Input, 0, 0, "PointSize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsBold", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsBold", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsItalic", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsItalic", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsUnderline", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsUnderline", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FontFile", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FontFile", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Font] ([FontId], [TypeFace], [PointSize], [IsBold], [IsItalic], [IsUnderline], [FontFile]) VALUES (@FontId, @TypeFace, @PointSize, @IsBold, @IsItalic, @IsUnderline, @FontFile);
SELECT FontId, TypeFace, PointSize, IsBold, IsItalic, IsUnderline, FontFile FROM Font WHERE (FontId = @FontId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TypeFace", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TypeFace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PointSize", System.Data.SqlDbType.Real, 0, System.Data.ParameterDirection.Input, 0, 0, "PointSize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsBold", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsBold", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsItalic", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsItalic", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsUnderline", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsUnderline", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FontFile", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FontFile", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Font] SET [FontId] = @FontId, [TypeFace] = @TypeFace, [PointSize] = @PointSize, [IsBold] = @IsBold, [IsItalic] = @IsItalic, [IsUnderline] = @IsUnderline, [FontFile] = @FontFile WHERE (([FontId] = @Original_FontId) AND ([TypeFace] = @Original_TypeFace) AND ([PointSize] = @Original_PointSize) AND ([IsBold] = @Original_IsBold) AND ([IsItalic] = @Original_IsItalic) AND ([IsUnderline] = @Original_IsUnderline) AND ([FontFile] = @Original_FontFile));
SELECT FontId, TypeFace, PointSize, IsBold, IsItalic, IsUnderline, FontFile FROM Font WHERE (FontId = @FontId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TypeFace", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TypeFace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PointSize", System.Data.SqlDbType.Real, 0, System.Data.ParameterDirection.Input, 0, 0, "PointSize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsBold", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsBold", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsItalic", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsItalic", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsUnderline", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsUnderline", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FontFile", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FontFile", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TypeFace", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TypeFace", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PointSize", System.Data.SqlDbType.Real, 0, System.Data.ParameterDirection.Input, 0, 0, "PointSize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsBold", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsBold", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsItalic", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsItalic", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsUnderline", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsUnderline", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FontFile", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FontFile", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FontId, TypeFace, PointSize, IsBold, IsItalic, IsUnderline, FontFile FROM " +
                "dbo.Font";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.FontDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.FontDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.FontDataTable dataTable = new BacksightDataSet.FontDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.FontDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Font");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_FontId, string Original_TypeFace, float Original_PointSize, string Original_IsBold, string Original_IsItalic, string Original_IsUnderline, string Original_FontFile) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_FontId));
            if ((Original_TypeFace == null)) {
                throw new System.ArgumentNullException("Original_TypeFace");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TypeFace));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((float)(Original_PointSize));
            if ((Original_IsBold == null)) {
                throw new System.ArgumentNullException("Original_IsBold");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_IsBold));
            }
            if ((Original_IsItalic == null)) {
                throw new System.ArgumentNullException("Original_IsItalic");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_IsItalic));
            }
            if ((Original_IsUnderline == null)) {
                throw new System.ArgumentNullException("Original_IsUnderline");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_IsUnderline));
            }
            if ((Original_FontFile == null)) {
                throw new System.ArgumentNullException("Original_FontFile");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_FontFile));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int FontId, string TypeFace, float PointSize, string IsBold, string IsItalic, string IsUnderline, string FontFile) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(FontId));
            if ((TypeFace == null)) {
                throw new System.ArgumentNullException("TypeFace");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TypeFace));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((float)(PointSize));
            if ((IsBold == null)) {
                throw new System.ArgumentNullException("IsBold");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(IsBold));
            }
            if ((IsItalic == null)) {
                throw new System.ArgumentNullException("IsItalic");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(IsItalic));
            }
            if ((IsUnderline == null)) {
                throw new System.ArgumentNullException("IsUnderline");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(IsUnderline));
            }
            if ((FontFile == null)) {
                throw new System.ArgumentNullException("FontFile");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(FontFile));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int FontId, string TypeFace, float PointSize, string IsBold, string IsItalic, string IsUnderline, string FontFile, int Original_FontId, string Original_TypeFace, float Original_PointSize, string Original_IsBold, string Original_IsItalic, string Original_IsUnderline, string Original_FontFile) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(FontId));
            if ((TypeFace == null)) {
                throw new System.ArgumentNullException("TypeFace");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TypeFace));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((float)(PointSize));
            if ((IsBold == null)) {
                throw new System.ArgumentNullException("IsBold");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(IsBold));
            }
            if ((IsItalic == null)) {
                throw new System.ArgumentNullException("IsItalic");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(IsItalic));
            }
            if ((IsUnderline == null)) {
                throw new System.ArgumentNullException("IsUnderline");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(IsUnderline));
            }
            if ((FontFile == null)) {
                throw new System.ArgumentNullException("FontFile");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(FontFile));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_FontId));
            if ((Original_TypeFace == null)) {
                throw new System.ArgumentNullException("Original_TypeFace");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_TypeFace));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((float)(Original_PointSize));
            if ((Original_IsBold == null)) {
                throw new System.ArgumentNullException("Original_IsBold");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_IsBold));
            }
            if ((Original_IsItalic == null)) {
                throw new System.ArgumentNullException("Original_IsItalic");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_IsItalic));
            }
            if ((Original_IsUnderline == null)) {
                throw new System.ArgumentNullException("Original_IsUnderline");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_IsUnderline));
            }
            if ((Original_FontFile == null)) {
                throw new System.ArgumentNullException("Original_FontFile");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_FontFile));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class IdAllocationTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IdAllocationTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "IdAllocation";
            tableMapping.ColumnMappings.Add("LowestId", "LowestId");
            tableMapping.ColumnMappings.Add("HighestId", "HighestId");
            tableMapping.ColumnMappings.Add("FileName", "FileName");
            tableMapping.ColumnMappings.Add("GroupId", "GroupId");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("TimeAllocated", "TimeAllocated");
            tableMapping.ColumnMappings.Add("NumUsed", "NumUsed");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[IdAllocation] WHERE (([LowestId] = @Original_LowestId) AND ([HighestId] = @Original_HighestId) AND ([FileName] = @Original_FileName) AND ([GroupId] = @Original_GroupId) AND ([UserName] = @Original_UserName) AND ([TimeAllocated] = @Original_TimeAllocated) AND ([NumUsed] = @Original_NumUsed))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FileName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FileName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeAllocated", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeAllocated", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumUsed", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumUsed", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[IdAllocation] ([LowestId], [HighestId], [FileName], [GroupId], [UserName], [TimeAllocated], [NumUsed]) VALUES (@LowestId, @HighestId, @FileName, @GroupId, @UserName, @TimeAllocated, @NumUsed);
SELECT LowestId, HighestId, FileName, GroupId, UserName, TimeAllocated, NumUsed FROM IdAllocation WHERE (LowestId = @LowestId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FileName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FileName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeAllocated", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeAllocated", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumUsed", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumUsed", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IdAllocation] SET [LowestId] = @LowestId, [HighestId] = @HighestId, [FileName] = @FileName, [GroupId] = @GroupId, [UserName] = @UserName, [TimeAllocated] = @TimeAllocated, [NumUsed] = @NumUsed WHERE (([LowestId] = @Original_LowestId) AND ([HighestId] = @Original_HighestId) AND ([FileName] = @Original_FileName) AND ([GroupId] = @Original_GroupId) AND ([UserName] = @Original_UserName) AND ([TimeAllocated] = @Original_TimeAllocated) AND ([NumUsed] = @Original_NumUsed));
SELECT LowestId, HighestId, FileName, GroupId, UserName, TimeAllocated, NumUsed FROM IdAllocation WHERE (LowestId = @LowestId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FileName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FileName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeAllocated", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeAllocated", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumUsed", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumUsed", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FileName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FileName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "UserName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeAllocated", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeAllocated", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumUsed", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumUsed", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LowestId, HighestId, FileName, GroupId, UserName, TimeAllocated, NumUsed F" +
                "ROM dbo.IdAllocation";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.IdAllocationDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.IdAllocationDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.IdAllocationDataTable dataTable = new BacksightDataSet.IdAllocationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.IdAllocationDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "IdAllocation");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LowestId, int Original_HighestId, string Original_FileName, int Original_GroupId, string Original_UserName, System.DateTime Original_TimeAllocated, int Original_NumUsed) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LowestId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_HighestId));
            if ((Original_FileName == null)) {
                throw new System.ArgumentNullException("Original_FileName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_FileName));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_GroupId));
            if ((Original_UserName == null)) {
                throw new System.ArgumentNullException("Original_UserName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_UserName));
            }
            this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_TimeAllocated));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_NumUsed));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int LowestId, int HighestId, string FileName, int GroupId, string UserName, System.DateTime TimeAllocated, int NumUsed) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(LowestId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(HighestId));
            if ((FileName == null)) {
                throw new System.ArgumentNullException("FileName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(FileName));
            }
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(GroupId));
            if ((UserName == null)) {
                throw new System.ArgumentNullException("UserName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(UserName));
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(TimeAllocated));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(NumUsed));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int LowestId, int HighestId, string FileName, int GroupId, string UserName, System.DateTime TimeAllocated, int NumUsed, int Original_LowestId, int Original_HighestId, string Original_FileName, int Original_GroupId, string Original_UserName, System.DateTime Original_TimeAllocated, int Original_NumUsed) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(LowestId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(HighestId));
            if ((FileName == null)) {
                throw new System.ArgumentNullException("FileName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(FileName));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(GroupId));
            if ((UserName == null)) {
                throw new System.ArgumentNullException("UserName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(UserName));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(TimeAllocated));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(NumUsed));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_LowestId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_HighestId));
            if ((Original_FileName == null)) {
                throw new System.ArgumentNullException("Original_FileName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_FileName));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_GroupId));
            if ((Original_UserName == null)) {
                throw new System.ArgumentNullException("Original_UserName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_UserName));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_TimeAllocated));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_NumUsed));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class IdFreeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IdFreeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "IdFree";
            tableMapping.ColumnMappings.Add("GroupId", "GroupId");
            tableMapping.ColumnMappings.Add("LowestId", "LowestId");
            tableMapping.ColumnMappings.Add("HighestId", "HighestId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[IdFree] WHERE (([GroupId] = @Original_GroupId) AND ([LowestId]" +
                " = @Original_LowestId) AND ([HighestId] = @Original_HighestId))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[IdFree] ([GroupId], [LowestId], [HighestId]) VALUES (@GroupId," +
                " @LowestId, @HighestId);\r\nSELECT GroupId, LowestId, HighestId FROM IdFree WHERE " +
                "(GroupId = @GroupId) AND (LowestId = @LowestId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IdFree] SET [GroupId] = @GroupId, [LowestId] = @LowestId, [HighestId] = @HighestId WHERE (([GroupId] = @Original_GroupId) AND ([LowestId] = @Original_LowestId) AND ([HighestId] = @Original_HighestId));
SELECT GroupId, LowestId, HighestId FROM IdFree WHERE (GroupId = @GroupId) AND (LowestId = @LowestId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT GroupId, LowestId, HighestId FROM dbo.IdFree";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.IdFreeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.IdFreeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.IdFreeDataTable dataTable = new BacksightDataSet.IdFreeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.IdFreeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "IdFree");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_GroupId, int Original_LowestId, int Original_HighestId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_GroupId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_LowestId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_HighestId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int GroupId, int LowestId, int HighestId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(GroupId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(LowestId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(HighestId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int GroupId, int LowestId, int HighestId, int Original_GroupId, int Original_LowestId, int Original_HighestId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(GroupId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(LowestId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(HighestId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_GroupId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_LowestId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_HighestId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class IdGroupTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IdGroupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "IdGroup";
            tableMapping.ColumnMappings.Add("GroupId", "GroupId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("LowestId", "LowestId");
            tableMapping.ColumnMappings.Add("HighestId", "HighestId");
            tableMapping.ColumnMappings.Add("PacketSize", "PacketSize");
            tableMapping.ColumnMappings.Add("CheckDigit", "CheckDigit");
            tableMapping.ColumnMappings.Add("KeyFormat", "KeyFormat");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[IdGroup] WHERE (([GroupId] = @Original_GroupId) AND ([Name] = @Original_Name) AND ([LowestId] = @Original_LowestId) AND ([HighestId] = @Original_HighestId) AND ([PacketSize] = @Original_PacketSize) AND ([CheckDigit] = @Original_CheckDigit) AND ([KeyFormat] = @Original_KeyFormat))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PacketSize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PacketSize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CheckDigit", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckDigit", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_KeyFormat", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "KeyFormat", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[IdGroup] ([GroupId], [Name], [LowestId], [HighestId], [PacketSize], [CheckDigit], [KeyFormat]) VALUES (@GroupId, @Name, @LowestId, @HighestId, @PacketSize, @CheckDigit, @KeyFormat);
SELECT GroupId, Name, LowestId, HighestId, PacketSize, CheckDigit, KeyFormat FROM IdGroup WHERE (GroupId = @GroupId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PacketSize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PacketSize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CheckDigit", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckDigit", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KeyFormat", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "KeyFormat", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IdGroup] SET [GroupId] = @GroupId, [Name] = @Name, [LowestId] = @LowestId, [HighestId] = @HighestId, [PacketSize] = @PacketSize, [CheckDigit] = @CheckDigit, [KeyFormat] = @KeyFormat WHERE (([GroupId] = @Original_GroupId) AND ([Name] = @Original_Name) AND ([LowestId] = @Original_LowestId) AND ([HighestId] = @Original_HighestId) AND ([PacketSize] = @Original_PacketSize) AND ([CheckDigit] = @Original_CheckDigit) AND ([KeyFormat] = @Original_KeyFormat));
SELECT GroupId, Name, LowestId, HighestId, PacketSize, CheckDigit, KeyFormat FROM IdGroup WHERE (GroupId = @GroupId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PacketSize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PacketSize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CheckDigit", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckDigit", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KeyFormat", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "KeyFormat", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PacketSize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PacketSize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CheckDigit", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckDigit", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_KeyFormat", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "KeyFormat", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT GroupId, Name, LowestId, HighestId, PacketSize, CheckDigit, KeyFormat FROM" +
                " dbo.IdGroup";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.IdGroupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.IdGroupDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.IdGroupDataTable dataTable = new BacksightDataSet.IdGroupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.IdGroupDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "IdGroup");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_GroupId, string Original_Name, int Original_LowestId, int Original_HighestId, int Original_PacketSize, string Original_CheckDigit, string Original_KeyFormat) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_GroupId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_LowestId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_HighestId));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_PacketSize));
            if ((Original_CheckDigit == null)) {
                throw new System.ArgumentNullException("Original_CheckDigit");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_CheckDigit));
            }
            if ((Original_KeyFormat == null)) {
                throw new System.ArgumentNullException("Original_KeyFormat");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_KeyFormat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int GroupId, string Name, int LowestId, int HighestId, int PacketSize, string CheckDigit, string KeyFormat) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(GroupId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(LowestId));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(HighestId));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(PacketSize));
            if ((CheckDigit == null)) {
                throw new System.ArgumentNullException("CheckDigit");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(CheckDigit));
            }
            if ((KeyFormat == null)) {
                throw new System.ArgumentNullException("KeyFormat");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(KeyFormat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int GroupId, string Name, int LowestId, int HighestId, int PacketSize, string CheckDigit, string KeyFormat, int Original_GroupId, string Original_Name, int Original_LowestId, int Original_HighestId, int Original_PacketSize, string Original_CheckDigit, string Original_KeyFormat) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(GroupId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(LowestId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(HighestId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(PacketSize));
            if ((CheckDigit == null)) {
                throw new System.ArgumentNullException("CheckDigit");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(CheckDigit));
            }
            if ((KeyFormat == null)) {
                throw new System.ArgumentNullException("KeyFormat");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(KeyFormat));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_GroupId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_LowestId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_HighestId));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_PacketSize));
            if ((Original_CheckDigit == null)) {
                throw new System.ArgumentNullException("Original_CheckDigit");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_CheckDigit));
            }
            if ((Original_KeyFormat == null)) {
                throw new System.ArgumentNullException("Original_KeyFormat");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_KeyFormat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class JobTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public JobTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Job";
            tableMapping.ColumnMappings.Add("JobId", "JobId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Job] WHERE (([JobId] = @Original_JobId) AND ([Name] = @Origina" +
                "l_Name) AND ([IsActive] = @Original_IsActive))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsActive", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Job] ([JobId], [Name], [IsActive]) VALUES (@JobId, @Name, @IsA" +
                "ctive);\r\nSELECT JobId, Name, IsActive FROM Job WHERE (JobId = @JobId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsActive", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Job] SET [JobId] = @JobId, [Name] = @Name, [IsActive] = @IsActive W" +
                "HERE (([JobId] = @Original_JobId) AND ([Name] = @Original_Name) AND ([IsActive] " +
                "= @Original_IsActive));\r\nSELECT JobId, Name, IsActive FROM Job WHERE (JobId = @J" +
                "obId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsActive", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsActive", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT JobId, Name, IsActive FROM dbo.Job";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.JobDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.JobDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.JobDataTable dataTable = new BacksightDataSet.JobDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.JobDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Job");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_JobId, string Original_Name, string Original_IsActive) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_JobId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            if ((Original_IsActive == null)) {
                throw new System.ArgumentNullException("Original_IsActive");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_IsActive));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int JobId, string Name, string IsActive) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(JobId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((IsActive == null)) {
                throw new System.ArgumentNullException("IsActive");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(IsActive));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int JobId, string Name, string IsActive, int Original_JobId, string Original_Name, string Original_IsActive) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(JobId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((IsActive == null)) {
                throw new System.ArgumentNullException("IsActive");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(IsActive));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_JobId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Name));
            }
            if ((Original_IsActive == null)) {
                throw new System.ArgumentNullException("Original_IsActive");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_IsActive));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LayerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LayerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Layer";
            tableMapping.ColumnMappings.Add("LayerId", "LayerId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("ThemeId", "ThemeId");
            tableMapping.ColumnMappings.Add("ThemeSequence", "ThemeSequence");
            tableMapping.ColumnMappings.Add("DefaultPointId", "DefaultPointId");
            tableMapping.ColumnMappings.Add("DefaultLineId", "DefaultLineId");
            tableMapping.ColumnMappings.Add("DefaultPolygonId", "DefaultPolygonId");
            tableMapping.ColumnMappings.Add("DefaultTextId", "DefaultTextId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Layer] WHERE (([LayerId] = @Original_LayerId) AND ([Name] = @Original_Name) AND ([ThemeId] = @Original_ThemeId) AND ([ThemeSequence] = @Original_ThemeSequence) AND ([DefaultPointId] = @Original_DefaultPointId) AND ([DefaultLineId] = @Original_DefaultLineId) AND ([DefaultPolygonId] = @Original_DefaultPolygonId) AND ([DefaultTextId] = @Original_DefaultTextId))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ThemeSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeSequence", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultPointId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPointId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultLineId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultLineId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultPolygonId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPolygonId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultTextId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultTextId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Layer] ([LayerId], [Name], [ThemeId], [ThemeSequence], [DefaultPointId], [DefaultLineId], [DefaultPolygonId], [DefaultTextId]) VALUES (@LayerId, @Name, @ThemeId, @ThemeSequence, @DefaultPointId, @DefaultLineId, @DefaultPolygonId, @DefaultTextId);
SELECT LayerId, Name, ThemeId, ThemeSequence, DefaultPointId, DefaultLineId, DefaultPolygonId, DefaultTextId FROM Layer WHERE (LayerId = @LayerId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ThemeSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeSequence", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultPointId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPointId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultLineId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultLineId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultPolygonId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPolygonId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultTextId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultTextId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Layer] SET [LayerId] = @LayerId, [Name] = @Name, [ThemeId] = @ThemeId, [ThemeSequence] = @ThemeSequence, [DefaultPointId] = @DefaultPointId, [DefaultLineId] = @DefaultLineId, [DefaultPolygonId] = @DefaultPolygonId, [DefaultTextId] = @DefaultTextId WHERE (([LayerId] = @Original_LayerId) AND ([Name] = @Original_Name) AND ([ThemeId] = @Original_ThemeId) AND ([ThemeSequence] = @Original_ThemeSequence) AND ([DefaultPointId] = @Original_DefaultPointId) AND ([DefaultLineId] = @Original_DefaultLineId) AND ([DefaultPolygonId] = @Original_DefaultPolygonId) AND ([DefaultTextId] = @Original_DefaultTextId));
SELECT LayerId, Name, ThemeId, ThemeSequence, DefaultPointId, DefaultLineId, DefaultPolygonId, DefaultTextId FROM Layer WHERE (LayerId = @LayerId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ThemeSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeSequence", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultPointId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPointId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultLineId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultLineId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultPolygonId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPolygonId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultTextId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultTextId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ThemeSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeSequence", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultPointId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPointId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultLineId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultLineId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultPolygonId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPolygonId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultTextId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultTextId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LayerId, Name, ThemeId, ThemeSequence, DefaultPointId, DefaultLineId, Defa" +
                "ultPolygonId, DefaultTextId FROM dbo.Layer";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.LayerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.LayerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.LayerDataTable dataTable = new BacksightDataSet.LayerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.LayerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Layer");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LayerId, string Original_Name, int Original_ThemeId, int Original_ThemeSequence, int Original_DefaultPointId, int Original_DefaultLineId, int Original_DefaultPolygonId, int Original_DefaultTextId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LayerId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ThemeId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_ThemeSequence));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_DefaultPointId));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_DefaultLineId));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_DefaultPolygonId));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_DefaultTextId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int LayerId, string Name, int ThemeId, int ThemeSequence, int DefaultPointId, int DefaultLineId, int DefaultPolygonId, int DefaultTextId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(LayerId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ThemeId));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(ThemeSequence));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(DefaultPointId));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(DefaultLineId));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(DefaultPolygonId));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(DefaultTextId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int LayerId, 
                    string Name, 
                    int ThemeId, 
                    int ThemeSequence, 
                    int DefaultPointId, 
                    int DefaultLineId, 
                    int DefaultPolygonId, 
                    int DefaultTextId, 
                    int Original_LayerId, 
                    string Original_Name, 
                    int Original_ThemeId, 
                    int Original_ThemeSequence, 
                    int Original_DefaultPointId, 
                    int Original_DefaultLineId, 
                    int Original_DefaultPolygonId, 
                    int Original_DefaultTextId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(LayerId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ThemeId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ThemeSequence));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(DefaultPointId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(DefaultLineId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(DefaultPolygonId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(DefaultTextId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_LayerId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_ThemeId));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_ThemeSequence));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_DefaultPointId));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_DefaultLineId));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_DefaultPolygonId));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_DefaultTextId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MapTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MapTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Map";
            tableMapping.ColumnMappings.Add("MapId", "MapId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Version", "Version");
            tableMapping.ColumnMappings.Add("VersionTime", "VersionTime");
            tableMapping.ColumnMappings.Add("JobId", "JobId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("ArchiveId", "ArchiveId");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Map] WHERE (([MapId] = @Original_MapId) AND ([Name] = @Original_Name) AND ([Version] = @Original_Version) AND ([VersionTime] = @Original_VersionTime) AND ([JobId] = @Original_JobId) AND ([UserId] = @Original_UserId) AND ([ArchiveId] = @Original_ArchiveId) AND ([Status] = @Original_Status) AND ([IsActive] = @Original_IsActive))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MapId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MapId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Version", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Version", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_VersionTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VersionTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ArchiveId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ArchiveId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Status", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsActive", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Map] ([MapId], [Name], [Version], [VersionTime], [JobId], [UserId], [ArchiveId], [Status], [IsActive]) VALUES (@MapId, @Name, @Version, @VersionTime, @JobId, @UserId, @ArchiveId, @Status, @IsActive);
SELECT MapId, Name, Version, VersionTime, JobId, UserId, ArchiveId, Status, IsActive FROM Map WHERE (MapId = @MapId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MapId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MapId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Version", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Version", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VersionTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VersionTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ArchiveId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ArchiveId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Status", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsActive", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Map] SET [MapId] = @MapId, [Name] = @Name, [Version] = @Version, [VersionTime] = @VersionTime, [JobId] = @JobId, [UserId] = @UserId, [ArchiveId] = @ArchiveId, [Status] = @Status, [IsActive] = @IsActive WHERE (([MapId] = @Original_MapId) AND ([Name] = @Original_Name) AND ([Version] = @Original_Version) AND ([VersionTime] = @Original_VersionTime) AND ([JobId] = @Original_JobId) AND ([UserId] = @Original_UserId) AND ([ArchiveId] = @Original_ArchiveId) AND ([Status] = @Original_Status) AND ([IsActive] = @Original_IsActive));
SELECT MapId, Name, Version, VersionTime, JobId, UserId, ArchiveId, Status, IsActive FROM Map WHERE (MapId = @MapId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MapId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MapId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Version", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Version", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@VersionTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VersionTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ArchiveId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ArchiveId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Status", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsActive", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MapId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "MapId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Version", System.Data.SqlDbType.SmallInt, 0, System.Data.ParameterDirection.Input, 0, 0, "Version", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_VersionTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "VersionTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ArchiveId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ArchiveId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Status", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Status", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsActive", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT MapId, Name, Version, VersionTime, JobId, UserId, ArchiveId, Status, IsAct" +
                "ive FROM dbo.Map";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.MapDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.MapDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.MapDataTable dataTable = new BacksightDataSet.MapDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.MapDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Map");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_MapId, string Original_Name, short Original_Version, System.DateTime Original_VersionTime, int Original_JobId, int Original_UserId, int Original_ArchiveId, string Original_Status, string Original_IsActive) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_MapId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((short)(Original_Version));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_VersionTime));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_JobId));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_UserId));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_ArchiveId));
            if ((Original_Status == null)) {
                throw new System.ArgumentNullException("Original_Status");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((string)(Original_Status));
            }
            if ((Original_IsActive == null)) {
                throw new System.ArgumentNullException("Original_IsActive");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_IsActive));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int MapId, string Name, short Version, System.DateTime VersionTime, int JobId, int UserId, int ArchiveId, string Status, string IsActive) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(MapId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((short)(Version));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(VersionTime));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(JobId));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(UserId));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(ArchiveId));
            if ((Status == null)) {
                throw new System.ArgumentNullException("Status");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Status));
            }
            if ((IsActive == null)) {
                throw new System.ArgumentNullException("IsActive");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(IsActive));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int MapId, 
                    string Name, 
                    short Version, 
                    System.DateTime VersionTime, 
                    int JobId, 
                    int UserId, 
                    int ArchiveId, 
                    string Status, 
                    string IsActive, 
                    int Original_MapId, 
                    string Original_Name, 
                    short Original_Version, 
                    System.DateTime Original_VersionTime, 
                    int Original_JobId, 
                    int Original_UserId, 
                    int Original_ArchiveId, 
                    string Original_Status, 
                    string Original_IsActive) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(MapId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((short)(Version));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(VersionTime));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(JobId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(UserId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(ArchiveId));
            if ((Status == null)) {
                throw new System.ArgumentNullException("Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Status));
            }
            if ((IsActive == null)) {
                throw new System.ArgumentNullException("IsActive");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(IsActive));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_MapId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((short)(Original_Version));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_VersionTime));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_JobId));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_UserId));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_ArchiveId));
            if ((Original_Status == null)) {
                throw new System.ArgumentNullException("Original_Status");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_Status));
            }
            if ((Original_IsActive == null)) {
                throw new System.ArgumentNullException("Original_IsActive");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(Original_IsActive));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MapUserTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MapUserTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MapUser";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("IsActive", "IsActive");
            tableMapping.ColumnMappings.Add("CanCheckout", "CanCheckout");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MapUser] WHERE (([UserId] = @Original_UserId) AND ([Name] = @O" +
                "riginal_Name) AND ([IsActive] = @Original_IsActive) AND ([CanCheckout] = @Origin" +
                "al_CanCheckout))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsActive", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CanCheckout", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CanCheckout", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MapUser] ([UserId], [Name], [IsActive], [CanCheckout]) VALUES " +
                "(@UserId, @Name, @IsActive, @CanCheckout);\r\nSELECT UserId, Name, IsActive, CanCh" +
                "eckout FROM MapUser WHERE (UserId = @UserId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsActive", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CanCheckout", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CanCheckout", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[MapUser] SET [UserId] = @UserId, [Name] = @Name, [IsActive] = @IsActive, [CanCheckout] = @CanCheckout WHERE (([UserId] = @Original_UserId) AND ([Name] = @Original_Name) AND ([IsActive] = @Original_IsActive) AND ([CanCheckout] = @Original_CanCheckout));
SELECT UserId, Name, IsActive, CanCheckout FROM MapUser WHERE (UserId = @UserId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsActive", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CanCheckout", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CanCheckout", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsActive", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsActive", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CanCheckout", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CanCheckout", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserId, Name, IsActive, CanCheckout FROM dbo.MapUser";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.MapUserDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.MapUserDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.MapUserDataTable dataTable = new BacksightDataSet.MapUserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.MapUserDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MapUser");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_UserId, string Original_Name, string Original_IsActive, string Original_CanCheckout) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_UserId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            if ((Original_IsActive == null)) {
                throw new System.ArgumentNullException("Original_IsActive");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_IsActive));
            }
            if ((Original_CanCheckout == null)) {
                throw new System.ArgumentNullException("Original_CanCheckout");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_CanCheckout));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int UserId, string Name, string IsActive, string CanCheckout) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(UserId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((IsActive == null)) {
                throw new System.ArgumentNullException("IsActive");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(IsActive));
            }
            if ((CanCheckout == null)) {
                throw new System.ArgumentNullException("CanCheckout");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CanCheckout));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int UserId, string Name, string IsActive, string CanCheckout, int Original_UserId, string Original_Name, string Original_IsActive, string Original_CanCheckout) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(UserId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((IsActive == null)) {
                throw new System.ArgumentNullException("IsActive");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(IsActive));
            }
            if ((CanCheckout == null)) {
                throw new System.ArgumentNullException("CanCheckout");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CanCheckout));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_UserId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Name));
            }
            if ((Original_IsActive == null)) {
                throw new System.ArgumentNullException("Original_IsActive");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_IsActive));
            }
            if ((Original_CanCheckout == null)) {
                throw new System.ArgumentNullException("Original_CanCheckout");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_CanCheckout));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PropertyTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PropertyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Property";
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Value", "Value");
            tableMapping.ColumnMappings.Add("Description", "Description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Property] WHERE (([Name] = @Original_Name) AND ([Value] = @Ori" +
                "ginal_Value) AND ([Description] = @Original_Description))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Value", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Property] ([Name], [Value], [Description]) VALUES (@Name, @Val" +
                "ue, @Description);\r\nSELECT Name, Value, Description FROM Property WHERE (Name = " +
                "@Name)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Property] SET [Name] = @Name, [Value] = @Value, [Description] = @Description WHERE (([Name] = @Original_Name) AND ([Value] = @Original_Value) AND ([Description] = @Original_Description));
SELECT Name, Value, Description FROM Property WHERE (Name = @Name)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Value", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Name, Value, Description FROM dbo.Property";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.PropertyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.PropertyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.PropertyDataTable dataTable = new BacksightDataSet.PropertyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.PropertyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Property");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_Name, string Original_Value, string Original_Description) {
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_Name));
            }
            if ((Original_Value == null)) {
                throw new System.ArgumentNullException("Original_Value");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Value));
            }
            if ((Original_Description == null)) {
                throw new System.ArgumentNullException("Original_Description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, string Value, string Description) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((Value == null)) {
                throw new System.ArgumentNullException("Value");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Value));
            }
            if ((Description == null)) {
                throw new System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, string Value, string Description, string Original_Name, string Original_Value, string Original_Description) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((Value == null)) {
                throw new System.ArgumentNullException("Value");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Value));
            }
            if ((Description == null)) {
                throw new System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Description));
            }
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Name));
            }
            if ((Original_Value == null)) {
                throw new System.ArgumentNullException("Original_Value");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Value));
            }
            if ((Original_Description == null)) {
                throw new System.ArgumentNullException("Original_Description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SchemaTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SchemaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Schema";
            tableMapping.ColumnMappings.Add("SchemaId", "SchemaId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("TableName", "TableName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Schema] WHERE (([SchemaId] = @Original_SchemaId) AND ([Name] =" +
                " @Original_Name) AND ([TableName] = @Original_TableName))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TableName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TableName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Schema] ([SchemaId], [Name], [TableName]) VALUES (@SchemaId, @" +
                "Name, @TableName);\r\nSELECT SchemaId, Name, TableName FROM [Schema] WHERE (Schema" +
                "Id = @SchemaId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TableName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TableName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Schema] SET [SchemaId] = @SchemaId, [Name] = @Name, [TableName] = @TableName WHERE (([SchemaId] = @Original_SchemaId) AND ([Name] = @Original_Name) AND ([TableName] = @Original_TableName));
SELECT SchemaId, Name, TableName FROM [Schema] WHERE (SchemaId = @SchemaId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TableName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TableName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TableName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TableName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SchemaId, Name, TableName FROM dbo.[Schema]";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.SchemaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.SchemaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.SchemaDataTable dataTable = new BacksightDataSet.SchemaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.SchemaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Schema");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SchemaId, string Original_Name, string Original_TableName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SchemaId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            if ((Original_TableName == null)) {
                throw new System.ArgumentNullException("Original_TableName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_TableName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SchemaId, string Name, string TableName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SchemaId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((TableName == null)) {
                throw new System.ArgumentNullException("TableName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TableName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int SchemaId, string Name, string TableName, int Original_SchemaId, string Original_Name, string Original_TableName) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SchemaId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((TableName == null)) {
                throw new System.ArgumentNullException("TableName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TableName));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_SchemaId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Name));
            }
            if ((Original_TableName == null)) {
                throw new System.ArgumentNullException("Original_TableName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_TableName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SchemaFieldTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SchemaFieldTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SchemaField";
            tableMapping.ColumnMappings.Add("SchemaId", "SchemaId");
            tableMapping.ColumnMappings.Add("FieldSequence", "FieldSequence");
            tableMapping.ColumnMappings.Add("FieldId", "FieldId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SchemaField] WHERE (([SchemaId] = @Original_SchemaId) AND ([Fi" +
                "eldSequence] = @Original_FieldSequence) AND ([FieldId] = @Original_FieldId))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FieldSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldSequence", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FieldId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SchemaField] ([SchemaId], [FieldSequence], [FieldId]) VALUES (" +
                "@SchemaId, @FieldSequence, @FieldId);\r\nSELECT SchemaId, FieldSequence, FieldId F" +
                "ROM SchemaField WHERE (FieldSequence = @FieldSequence) AND (SchemaId = @SchemaId" +
                ")";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FieldSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldSequence", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FieldId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SchemaField] SET [SchemaId] = @SchemaId, [FieldSequence] = @FieldSequence, [FieldId] = @FieldId WHERE (([SchemaId] = @Original_SchemaId) AND ([FieldSequence] = @Original_FieldSequence) AND ([FieldId] = @Original_FieldId));
SELECT SchemaId, FieldSequence, FieldId FROM SchemaField WHERE (FieldSequence = @FieldSequence) AND (SchemaId = @SchemaId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FieldSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldSequence", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FieldId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FieldSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldSequence", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FieldId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FieldId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SchemaId, FieldSequence, FieldId FROM dbo.SchemaField";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.SchemaFieldDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.SchemaFieldDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.SchemaFieldDataTable dataTable = new BacksightDataSet.SchemaFieldDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.SchemaFieldDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SchemaField");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SchemaId, int Original_FieldSequence, int Original_FieldId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SchemaId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_FieldSequence));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_FieldId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SchemaId, int FieldSequence, int FieldId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SchemaId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(FieldSequence));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(FieldId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int SchemaId, int FieldSequence, int FieldId, int Original_SchemaId, int Original_FieldSequence, int Original_FieldId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SchemaId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(FieldSequence));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(FieldId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_SchemaId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_FieldSequence));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_FieldId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SchemaTemplateTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SchemaTemplateTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SchemaTemplate";
            tableMapping.ColumnMappings.Add("SchemaId", "SchemaId");
            tableMapping.ColumnMappings.Add("TemplateId", "TemplateId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SchemaTemplate] WHERE (([SchemaId] = @Original_SchemaId) AND (" +
                "[TemplateId] = @Original_TemplateId))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SchemaTemplate] ([SchemaId], [TemplateId]) VALUES (@SchemaId, " +
                "@TemplateId);\r\nSELECT SchemaId, TemplateId FROM SchemaTemplate WHERE (SchemaId =" +
                " @SchemaId) AND (TemplateId = @TemplateId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SchemaTemplate] SET [SchemaId] = @SchemaId, [TemplateId] = @TemplateId WHERE (([SchemaId] = @Original_SchemaId) AND ([TemplateId] = @Original_TemplateId));
SELECT SchemaId, TemplateId FROM SchemaTemplate WHERE (SchemaId = @SchemaId) AND (TemplateId = @TemplateId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SchemaId, TemplateId FROM dbo.SchemaTemplate";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.SchemaTemplateDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.SchemaTemplateDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.SchemaTemplateDataTable dataTable = new BacksightDataSet.SchemaTemplateDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.SchemaTemplateDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SchemaTemplate");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SchemaId, int Original_TemplateId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SchemaId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_TemplateId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SchemaId, int TemplateId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SchemaId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(TemplateId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int SchemaId, int TemplateId, int Original_SchemaId, int Original_TemplateId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SchemaId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(TemplateId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_SchemaId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_TemplateId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SysIdTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SysIdTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SysId";
            tableMapping.ColumnMappings.Add("LastId", "LastId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SysId] ([LastId]) VALUES (@LastId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LastId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LastId FROM dbo.SysId";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.SysIdDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.SysIdDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.SysIdDataTable dataTable = new BacksightDataSet.SysIdDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.SysIdDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SysId");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int LastId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(LastId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TemplateTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TemplateTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Template";
            tableMapping.ColumnMappings.Add("TemplateId", "TemplateId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("TemplateFormat", "TemplateFormat");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Template] WHERE (([TemplateId] = @Original_TemplateId) AND ([N" +
                "ame] = @Original_Name) AND ([TemplateFormat] = @Original_TemplateFormat))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TemplateFormat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateFormat", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Template] ([TemplateId], [Name], [TemplateFormat]) VALUES (@Te" +
                "mplateId, @Name, @TemplateFormat);\r\nSELECT TemplateId, Name, TemplateFormat FROM" +
                " Template WHERE (TemplateId = @TemplateId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TemplateFormat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateFormat", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Template] SET [TemplateId] = @TemplateId, [Name] = @Name, [TemplateFormat] = @TemplateFormat WHERE (([TemplateId] = @Original_TemplateId) AND ([Name] = @Original_Name) AND ([TemplateFormat] = @Original_TemplateFormat));
SELECT TemplateId, Name, TemplateFormat FROM Template WHERE (TemplateId = @TemplateId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TemplateFormat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateFormat", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TemplateFormat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateFormat", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TemplateId, Name, TemplateFormat FROM dbo.Template";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.TemplateDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.TemplateDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.TemplateDataTable dataTable = new BacksightDataSet.TemplateDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.TemplateDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Template");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_TemplateId, string Original_Name, string Original_TemplateFormat) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_TemplateId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            if ((Original_TemplateFormat == null)) {
                throw new System.ArgumentNullException("Original_TemplateFormat");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_TemplateFormat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int TemplateId, string Name, string TemplateFormat) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(TemplateId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((TemplateFormat == null)) {
                throw new System.ArgumentNullException("TemplateFormat");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TemplateFormat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int TemplateId, string Name, string TemplateFormat, int Original_TemplateId, string Original_Name, string Original_TemplateFormat) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(TemplateId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((TemplateFormat == null)) {
                throw new System.ArgumentNullException("TemplateFormat");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TemplateFormat));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_TemplateId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Name));
            }
            if ((Original_TemplateFormat == null)) {
                throw new System.ArgumentNullException("Original_TemplateFormat");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_TemplateFormat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ThemeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ThemeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Theme";
            tableMapping.ColumnMappings.Add("ThemeId", "ThemeId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Theme] WHERE (([ThemeId] = @Original_ThemeId) AND ([Name] = @O" +
                "riginal_Name))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Theme] ([ThemeId], [Name]) VALUES (@ThemeId, @Name);\r\nSELECT T" +
                "hemeId, Name FROM Theme WHERE (ThemeId = @ThemeId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Theme] SET [ThemeId] = @ThemeId, [Name] = @Name WHERE (([ThemeId] =" +
                " @Original_ThemeId) AND ([Name] = @Original_Name));\r\nSELECT ThemeId, Name FROM T" +
                "heme WHERE (ThemeId = @ThemeId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ThemeId, Name FROM dbo.Theme";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.ThemeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.ThemeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.ThemeDataTable dataTable = new BacksightDataSet.ThemeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.ThemeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Theme");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ThemeId, string Original_Name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ThemeId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ThemeId, string Name) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ThemeId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ThemeId, string Name, int Original_ThemeId, string Original_Name) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ThemeId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ThemeId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591