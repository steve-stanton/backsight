//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Backsight.Data {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("BacksightDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class BacksightDataSet : System.Data.DataSet {
        
        private EditDataTable tableEdit;
        
        private EntityTypeDataTable tableEntityType;
        
        private EntityTypeSchemaDataTable tableEntityTypeSchema;
        
        private FontDataTable tableFont;
        
        private IdAllocationDataTable tableIdAllocation;
        
        private IdFreeDataTable tableIdFree;
        
        private IdGroupDataTable tableIdGroup;
        
        private JobDataTable tableJob;
        
        private LastRevisionDataTable tableLastRevision;
        
        private LayerDataTable tableLayer;
        
        private PropertyDataTable tableProperty;
        
        private SchemaDataTable tableSchema;
        
        private SchemaTemplateDataTable tableSchemaTemplate;
        
        private SessionDataTable tableSession;
        
        private SysIdDataTable tableSysId;
        
        private TemplateDataTable tableTemplate;
        
        private ThemeDataTable tableTheme;
        
        private UserJobDataTable tableUserJob;
        
        private UserDataTable tableUser;
        
        private ZoneDataTable tableZone;
        
        private System.Data.DataRelation relationFK_Edit_Session;
        
        private System.Data.DataRelation relationFK_EntityType_Font;
        
        private System.Data.DataRelation relationFK_EntityType_IdGroup;
        
        private System.Data.DataRelation relationFK_EntityType_Layer;
        
        private System.Data.DataRelation relationFK_EntityTypeSchema_EntityType;
        
        private System.Data.DataRelation relationFK_EntityTypeSchema_Schema;
        
        private System.Data.DataRelation relationFK_IdAllocation_IdGroup;
        
        private System.Data.DataRelation relationFK_IdAllocation_Job;
        
        private System.Data.DataRelation relationFK_IdAllocation_User;
        
        private System.Data.DataRelation relationFK_IdFree_IdGroup;
        
        private System.Data.DataRelation relationFK_Job_Layer;
        
        private System.Data.DataRelation relationFK_Job_Zone;
        
        private System.Data.DataRelation relationFK_Layer_EntityType1;
        
        private System.Data.DataRelation relationFK_Layer_EntityType2;
        
        private System.Data.DataRelation relationFK_Layer_EntityType3;
        
        private System.Data.DataRelation relationFK_Layer_EntityType4;
        
        private System.Data.DataRelation relationFK_Layer_Theme;
        
        private System.Data.DataRelation relationFK_SchemaTemplate_Schema;
        
        private System.Data.DataRelation relationFK_SchemaTemplate_Template;
        
        private System.Data.DataRelation relationFK_Session_Job;
        
        private System.Data.DataRelation relationFK_Session_User;
        
        private System.Data.DataRelation relationFK_UserJob_Job;
        
        private System.Data.DataRelation relationFK_UserJob_User;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BacksightDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BacksightDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Edit"] != null)) {
                    base.Tables.Add(new EditDataTable(ds.Tables["Edit"]));
                }
                if ((ds.Tables["EntityType"] != null)) {
                    base.Tables.Add(new EntityTypeDataTable(ds.Tables["EntityType"]));
                }
                if ((ds.Tables["EntityTypeSchema"] != null)) {
                    base.Tables.Add(new EntityTypeSchemaDataTable(ds.Tables["EntityTypeSchema"]));
                }
                if ((ds.Tables["Font"] != null)) {
                    base.Tables.Add(new FontDataTable(ds.Tables["Font"]));
                }
                if ((ds.Tables["IdAllocation"] != null)) {
                    base.Tables.Add(new IdAllocationDataTable(ds.Tables["IdAllocation"]));
                }
                if ((ds.Tables["IdFree"] != null)) {
                    base.Tables.Add(new IdFreeDataTable(ds.Tables["IdFree"]));
                }
                if ((ds.Tables["IdGroup"] != null)) {
                    base.Tables.Add(new IdGroupDataTable(ds.Tables["IdGroup"]));
                }
                if ((ds.Tables["Job"] != null)) {
                    base.Tables.Add(new JobDataTable(ds.Tables["Job"]));
                }
                if ((ds.Tables["LastRevision"] != null)) {
                    base.Tables.Add(new LastRevisionDataTable(ds.Tables["LastRevision"]));
                }
                if ((ds.Tables["Layer"] != null)) {
                    base.Tables.Add(new LayerDataTable(ds.Tables["Layer"]));
                }
                if ((ds.Tables["Property"] != null)) {
                    base.Tables.Add(new PropertyDataTable(ds.Tables["Property"]));
                }
                if ((ds.Tables["Schema"] != null)) {
                    base.Tables.Add(new SchemaDataTable(ds.Tables["Schema"]));
                }
                if ((ds.Tables["SchemaTemplate"] != null)) {
                    base.Tables.Add(new SchemaTemplateDataTable(ds.Tables["SchemaTemplate"]));
                }
                if ((ds.Tables["Session"] != null)) {
                    base.Tables.Add(new SessionDataTable(ds.Tables["Session"]));
                }
                if ((ds.Tables["SysId"] != null)) {
                    base.Tables.Add(new SysIdDataTable(ds.Tables["SysId"]));
                }
                if ((ds.Tables["Template"] != null)) {
                    base.Tables.Add(new TemplateDataTable(ds.Tables["Template"]));
                }
                if ((ds.Tables["Theme"] != null)) {
                    base.Tables.Add(new ThemeDataTable(ds.Tables["Theme"]));
                }
                if ((ds.Tables["UserJob"] != null)) {
                    base.Tables.Add(new UserJobDataTable(ds.Tables["UserJob"]));
                }
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["Zone"] != null)) {
                    base.Tables.Add(new ZoneDataTable(ds.Tables["Zone"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EditDataTable Edit {
            get {
                return this.tableEdit;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EntityTypeDataTable EntityType {
            get {
                return this.tableEntityType;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EntityTypeSchemaDataTable EntityTypeSchema {
            get {
                return this.tableEntityTypeSchema;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FontDataTable Font {
            get {
                return this.tableFont;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IdAllocationDataTable IdAllocation {
            get {
                return this.tableIdAllocation;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IdFreeDataTable IdFree {
            get {
                return this.tableIdFree;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IdGroupDataTable IdGroup {
            get {
                return this.tableIdGroup;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JobDataTable Job {
            get {
                return this.tableJob;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LastRevisionDataTable LastRevision {
            get {
                return this.tableLastRevision;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LayerDataTable Layer {
            get {
                return this.tableLayer;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PropertyDataTable Property {
            get {
                return this.tableProperty;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SchemaDataTable Schema {
            get {
                return this.tableSchema;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SchemaTemplateDataTable SchemaTemplate {
            get {
                return this.tableSchemaTemplate;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SessionDataTable Session {
            get {
                return this.tableSession;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SysIdDataTable SysId {
            get {
                return this.tableSysId;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TemplateDataTable Template {
            get {
                return this.tableTemplate;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ThemeDataTable Theme {
            get {
                return this.tableTheme;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserJobDataTable UserJob {
            get {
                return this.tableUserJob;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserDataTable User {
            get {
                return this.tableUser;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ZoneDataTable Zone {
            get {
                return this.tableZone;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            BacksightDataSet cln = ((BacksightDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Edit"] != null)) {
                    base.Tables.Add(new EditDataTable(ds.Tables["Edit"]));
                }
                if ((ds.Tables["EntityType"] != null)) {
                    base.Tables.Add(new EntityTypeDataTable(ds.Tables["EntityType"]));
                }
                if ((ds.Tables["EntityTypeSchema"] != null)) {
                    base.Tables.Add(new EntityTypeSchemaDataTable(ds.Tables["EntityTypeSchema"]));
                }
                if ((ds.Tables["Font"] != null)) {
                    base.Tables.Add(new FontDataTable(ds.Tables["Font"]));
                }
                if ((ds.Tables["IdAllocation"] != null)) {
                    base.Tables.Add(new IdAllocationDataTable(ds.Tables["IdAllocation"]));
                }
                if ((ds.Tables["IdFree"] != null)) {
                    base.Tables.Add(new IdFreeDataTable(ds.Tables["IdFree"]));
                }
                if ((ds.Tables["IdGroup"] != null)) {
                    base.Tables.Add(new IdGroupDataTable(ds.Tables["IdGroup"]));
                }
                if ((ds.Tables["Job"] != null)) {
                    base.Tables.Add(new JobDataTable(ds.Tables["Job"]));
                }
                if ((ds.Tables["LastRevision"] != null)) {
                    base.Tables.Add(new LastRevisionDataTable(ds.Tables["LastRevision"]));
                }
                if ((ds.Tables["Layer"] != null)) {
                    base.Tables.Add(new LayerDataTable(ds.Tables["Layer"]));
                }
                if ((ds.Tables["Property"] != null)) {
                    base.Tables.Add(new PropertyDataTable(ds.Tables["Property"]));
                }
                if ((ds.Tables["Schema"] != null)) {
                    base.Tables.Add(new SchemaDataTable(ds.Tables["Schema"]));
                }
                if ((ds.Tables["SchemaTemplate"] != null)) {
                    base.Tables.Add(new SchemaTemplateDataTable(ds.Tables["SchemaTemplate"]));
                }
                if ((ds.Tables["Session"] != null)) {
                    base.Tables.Add(new SessionDataTable(ds.Tables["Session"]));
                }
                if ((ds.Tables["SysId"] != null)) {
                    base.Tables.Add(new SysIdDataTable(ds.Tables["SysId"]));
                }
                if ((ds.Tables["Template"] != null)) {
                    base.Tables.Add(new TemplateDataTable(ds.Tables["Template"]));
                }
                if ((ds.Tables["Theme"] != null)) {
                    base.Tables.Add(new ThemeDataTable(ds.Tables["Theme"]));
                }
                if ((ds.Tables["UserJob"] != null)) {
                    base.Tables.Add(new UserJobDataTable(ds.Tables["UserJob"]));
                }
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["Zone"] != null)) {
                    base.Tables.Add(new ZoneDataTable(ds.Tables["Zone"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEdit = ((EditDataTable)(base.Tables["Edit"]));
            if ((initTable == true)) {
                if ((this.tableEdit != null)) {
                    this.tableEdit.InitVars();
                }
            }
            this.tableEntityType = ((EntityTypeDataTable)(base.Tables["EntityType"]));
            if ((initTable == true)) {
                if ((this.tableEntityType != null)) {
                    this.tableEntityType.InitVars();
                }
            }
            this.tableEntityTypeSchema = ((EntityTypeSchemaDataTable)(base.Tables["EntityTypeSchema"]));
            if ((initTable == true)) {
                if ((this.tableEntityTypeSchema != null)) {
                    this.tableEntityTypeSchema.InitVars();
                }
            }
            this.tableFont = ((FontDataTable)(base.Tables["Font"]));
            if ((initTable == true)) {
                if ((this.tableFont != null)) {
                    this.tableFont.InitVars();
                }
            }
            this.tableIdAllocation = ((IdAllocationDataTable)(base.Tables["IdAllocation"]));
            if ((initTable == true)) {
                if ((this.tableIdAllocation != null)) {
                    this.tableIdAllocation.InitVars();
                }
            }
            this.tableIdFree = ((IdFreeDataTable)(base.Tables["IdFree"]));
            if ((initTable == true)) {
                if ((this.tableIdFree != null)) {
                    this.tableIdFree.InitVars();
                }
            }
            this.tableIdGroup = ((IdGroupDataTable)(base.Tables["IdGroup"]));
            if ((initTable == true)) {
                if ((this.tableIdGroup != null)) {
                    this.tableIdGroup.InitVars();
                }
            }
            this.tableJob = ((JobDataTable)(base.Tables["Job"]));
            if ((initTable == true)) {
                if ((this.tableJob != null)) {
                    this.tableJob.InitVars();
                }
            }
            this.tableLastRevision = ((LastRevisionDataTable)(base.Tables["LastRevision"]));
            if ((initTable == true)) {
                if ((this.tableLastRevision != null)) {
                    this.tableLastRevision.InitVars();
                }
            }
            this.tableLayer = ((LayerDataTable)(base.Tables["Layer"]));
            if ((initTable == true)) {
                if ((this.tableLayer != null)) {
                    this.tableLayer.InitVars();
                }
            }
            this.tableProperty = ((PropertyDataTable)(base.Tables["Property"]));
            if ((initTable == true)) {
                if ((this.tableProperty != null)) {
                    this.tableProperty.InitVars();
                }
            }
            this.tableSchema = ((SchemaDataTable)(base.Tables["Schema"]));
            if ((initTable == true)) {
                if ((this.tableSchema != null)) {
                    this.tableSchema.InitVars();
                }
            }
            this.tableSchemaTemplate = ((SchemaTemplateDataTable)(base.Tables["SchemaTemplate"]));
            if ((initTable == true)) {
                if ((this.tableSchemaTemplate != null)) {
                    this.tableSchemaTemplate.InitVars();
                }
            }
            this.tableSession = ((SessionDataTable)(base.Tables["Session"]));
            if ((initTable == true)) {
                if ((this.tableSession != null)) {
                    this.tableSession.InitVars();
                }
            }
            this.tableSysId = ((SysIdDataTable)(base.Tables["SysId"]));
            if ((initTable == true)) {
                if ((this.tableSysId != null)) {
                    this.tableSysId.InitVars();
                }
            }
            this.tableTemplate = ((TemplateDataTable)(base.Tables["Template"]));
            if ((initTable == true)) {
                if ((this.tableTemplate != null)) {
                    this.tableTemplate.InitVars();
                }
            }
            this.tableTheme = ((ThemeDataTable)(base.Tables["Theme"]));
            if ((initTable == true)) {
                if ((this.tableTheme != null)) {
                    this.tableTheme.InitVars();
                }
            }
            this.tableUserJob = ((UserJobDataTable)(base.Tables["UserJob"]));
            if ((initTable == true)) {
                if ((this.tableUserJob != null)) {
                    this.tableUserJob.InitVars();
                }
            }
            this.tableUser = ((UserDataTable)(base.Tables["User"]));
            if ((initTable == true)) {
                if ((this.tableUser != null)) {
                    this.tableUser.InitVars();
                }
            }
            this.tableZone = ((ZoneDataTable)(base.Tables["Zone"]));
            if ((initTable == true)) {
                if ((this.tableZone != null)) {
                    this.tableZone.InitVars();
                }
            }
            this.relationFK_Edit_Session = this.Relations["FK_Edit_Session"];
            this.relationFK_EntityType_Font = this.Relations["FK_EntityType_Font"];
            this.relationFK_EntityType_IdGroup = this.Relations["FK_EntityType_IdGroup"];
            this.relationFK_EntityType_Layer = this.Relations["FK_EntityType_Layer"];
            this.relationFK_EntityTypeSchema_EntityType = this.Relations["FK_EntityTypeSchema_EntityType"];
            this.relationFK_EntityTypeSchema_Schema = this.Relations["FK_EntityTypeSchema_Schema"];
            this.relationFK_IdAllocation_IdGroup = this.Relations["FK_IdAllocation_IdGroup"];
            this.relationFK_IdAllocation_Job = this.Relations["FK_IdAllocation_Job"];
            this.relationFK_IdAllocation_User = this.Relations["FK_IdAllocation_User"];
            this.relationFK_IdFree_IdGroup = this.Relations["FK_IdFree_IdGroup"];
            this.relationFK_Job_Layer = this.Relations["FK_Job_Layer"];
            this.relationFK_Job_Zone = this.Relations["FK_Job_Zone"];
            this.relationFK_Layer_EntityType1 = this.Relations["FK_Layer_EntityType1"];
            this.relationFK_Layer_EntityType2 = this.Relations["FK_Layer_EntityType2"];
            this.relationFK_Layer_EntityType3 = this.Relations["FK_Layer_EntityType3"];
            this.relationFK_Layer_EntityType4 = this.Relations["FK_Layer_EntityType4"];
            this.relationFK_Layer_Theme = this.Relations["FK_Layer_Theme"];
            this.relationFK_SchemaTemplate_Schema = this.Relations["FK_SchemaTemplate_Schema"];
            this.relationFK_SchemaTemplate_Template = this.Relations["FK_SchemaTemplate_Template"];
            this.relationFK_Session_Job = this.Relations["FK_Session_Job"];
            this.relationFK_Session_User = this.Relations["FK_Session_User"];
            this.relationFK_UserJob_Job = this.Relations["FK_UserJob_Job"];
            this.relationFK_UserJob_User = this.Relations["FK_UserJob_User"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "BacksightDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/BacksightDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEdit = new EditDataTable();
            base.Tables.Add(this.tableEdit);
            this.tableEntityType = new EntityTypeDataTable();
            base.Tables.Add(this.tableEntityType);
            this.tableEntityTypeSchema = new EntityTypeSchemaDataTable();
            base.Tables.Add(this.tableEntityTypeSchema);
            this.tableFont = new FontDataTable();
            base.Tables.Add(this.tableFont);
            this.tableIdAllocation = new IdAllocationDataTable();
            base.Tables.Add(this.tableIdAllocation);
            this.tableIdFree = new IdFreeDataTable();
            base.Tables.Add(this.tableIdFree);
            this.tableIdGroup = new IdGroupDataTable();
            base.Tables.Add(this.tableIdGroup);
            this.tableJob = new JobDataTable();
            base.Tables.Add(this.tableJob);
            this.tableLastRevision = new LastRevisionDataTable();
            base.Tables.Add(this.tableLastRevision);
            this.tableLayer = new LayerDataTable();
            base.Tables.Add(this.tableLayer);
            this.tableProperty = new PropertyDataTable();
            base.Tables.Add(this.tableProperty);
            this.tableSchema = new SchemaDataTable();
            base.Tables.Add(this.tableSchema);
            this.tableSchemaTemplate = new SchemaTemplateDataTable();
            base.Tables.Add(this.tableSchemaTemplate);
            this.tableSession = new SessionDataTable();
            base.Tables.Add(this.tableSession);
            this.tableSysId = new SysIdDataTable();
            base.Tables.Add(this.tableSysId);
            this.tableTemplate = new TemplateDataTable();
            base.Tables.Add(this.tableTemplate);
            this.tableTheme = new ThemeDataTable();
            base.Tables.Add(this.tableTheme);
            this.tableUserJob = new UserJobDataTable();
            base.Tables.Add(this.tableUserJob);
            this.tableUser = new UserDataTable();
            base.Tables.Add(this.tableUser);
            this.tableZone = new ZoneDataTable();
            base.Tables.Add(this.tableZone);
            this.relationFK_Edit_Session = new System.Data.DataRelation("FK_Edit_Session", new System.Data.DataColumn[] {
                        this.tableSession.SessionIdColumn}, new System.Data.DataColumn[] {
                        this.tableEdit.SessionIdColumn}, false);
            this.Relations.Add(this.relationFK_Edit_Session);
            this.relationFK_EntityType_Font = new System.Data.DataRelation("FK_EntityType_Font", new System.Data.DataColumn[] {
                        this.tableFont.FontIdColumn}, new System.Data.DataColumn[] {
                        this.tableEntityType.FontIdColumn}, false);
            this.Relations.Add(this.relationFK_EntityType_Font);
            this.relationFK_EntityType_IdGroup = new System.Data.DataRelation("FK_EntityType_IdGroup", new System.Data.DataColumn[] {
                        this.tableIdGroup.GroupIdColumn}, new System.Data.DataColumn[] {
                        this.tableEntityType.GroupIdColumn}, false);
            this.Relations.Add(this.relationFK_EntityType_IdGroup);
            this.relationFK_EntityType_Layer = new System.Data.DataRelation("FK_EntityType_Layer", new System.Data.DataColumn[] {
                        this.tableLayer.LayerIdColumn}, new System.Data.DataColumn[] {
                        this.tableEntityType.LayerIdColumn}, false);
            this.Relations.Add(this.relationFK_EntityType_Layer);
            this.relationFK_EntityTypeSchema_EntityType = new System.Data.DataRelation("FK_EntityTypeSchema_EntityType", new System.Data.DataColumn[] {
                        this.tableEntityType.EntityIdColumn}, new System.Data.DataColumn[] {
                        this.tableEntityTypeSchema.EntityIdColumn}, false);
            this.Relations.Add(this.relationFK_EntityTypeSchema_EntityType);
            this.relationFK_EntityTypeSchema_Schema = new System.Data.DataRelation("FK_EntityTypeSchema_Schema", new System.Data.DataColumn[] {
                        this.tableSchema.SchemaIdColumn}, new System.Data.DataColumn[] {
                        this.tableEntityTypeSchema.SchemaIdColumn}, false);
            this.Relations.Add(this.relationFK_EntityTypeSchema_Schema);
            this.relationFK_IdAllocation_IdGroup = new System.Data.DataRelation("FK_IdAllocation_IdGroup", new System.Data.DataColumn[] {
                        this.tableIdGroup.GroupIdColumn}, new System.Data.DataColumn[] {
                        this.tableIdAllocation.GroupIdColumn}, false);
            this.Relations.Add(this.relationFK_IdAllocation_IdGroup);
            this.relationFK_IdAllocation_Job = new System.Data.DataRelation("FK_IdAllocation_Job", new System.Data.DataColumn[] {
                        this.tableJob.JobIdColumn}, new System.Data.DataColumn[] {
                        this.tableIdAllocation.JobIdColumn}, false);
            this.Relations.Add(this.relationFK_IdAllocation_Job);
            this.relationFK_IdAllocation_User = new System.Data.DataRelation("FK_IdAllocation_User", new System.Data.DataColumn[] {
                        this.tableUser.UserIdColumn}, new System.Data.DataColumn[] {
                        this.tableIdAllocation.UserIdColumn}, false);
            this.Relations.Add(this.relationFK_IdAllocation_User);
            this.relationFK_IdFree_IdGroup = new System.Data.DataRelation("FK_IdFree_IdGroup", new System.Data.DataColumn[] {
                        this.tableIdGroup.GroupIdColumn}, new System.Data.DataColumn[] {
                        this.tableIdFree.GroupIdColumn}, false);
            this.Relations.Add(this.relationFK_IdFree_IdGroup);
            this.relationFK_Job_Layer = new System.Data.DataRelation("FK_Job_Layer", new System.Data.DataColumn[] {
                        this.tableLayer.LayerIdColumn}, new System.Data.DataColumn[] {
                        this.tableJob.LayerIdColumn}, false);
            this.Relations.Add(this.relationFK_Job_Layer);
            this.relationFK_Job_Zone = new System.Data.DataRelation("FK_Job_Zone", new System.Data.DataColumn[] {
                        this.tableZone.ZoneIdColumn}, new System.Data.DataColumn[] {
                        this.tableJob.ZoneIdColumn}, false);
            this.Relations.Add(this.relationFK_Job_Zone);
            this.relationFK_Layer_EntityType1 = new System.Data.DataRelation("FK_Layer_EntityType1", new System.Data.DataColumn[] {
                        this.tableEntityType.EntityIdColumn}, new System.Data.DataColumn[] {
                        this.tableLayer.DefaultPointIdColumn}, false);
            this.Relations.Add(this.relationFK_Layer_EntityType1);
            this.relationFK_Layer_EntityType2 = new System.Data.DataRelation("FK_Layer_EntityType2", new System.Data.DataColumn[] {
                        this.tableEntityType.EntityIdColumn}, new System.Data.DataColumn[] {
                        this.tableLayer.DefaultLineIdColumn}, false);
            this.Relations.Add(this.relationFK_Layer_EntityType2);
            this.relationFK_Layer_EntityType3 = new System.Data.DataRelation("FK_Layer_EntityType3", new System.Data.DataColumn[] {
                        this.tableEntityType.EntityIdColumn}, new System.Data.DataColumn[] {
                        this.tableLayer.DefaultPolygonIdColumn}, false);
            this.Relations.Add(this.relationFK_Layer_EntityType3);
            this.relationFK_Layer_EntityType4 = new System.Data.DataRelation("FK_Layer_EntityType4", new System.Data.DataColumn[] {
                        this.tableEntityType.EntityIdColumn}, new System.Data.DataColumn[] {
                        this.tableLayer.DefaultTextIdColumn}, false);
            this.Relations.Add(this.relationFK_Layer_EntityType4);
            this.relationFK_Layer_Theme = new System.Data.DataRelation("FK_Layer_Theme", new System.Data.DataColumn[] {
                        this.tableTheme.ThemeIdColumn}, new System.Data.DataColumn[] {
                        this.tableLayer.ThemeIdColumn}, false);
            this.Relations.Add(this.relationFK_Layer_Theme);
            this.relationFK_SchemaTemplate_Schema = new System.Data.DataRelation("FK_SchemaTemplate_Schema", new System.Data.DataColumn[] {
                        this.tableSchema.SchemaIdColumn}, new System.Data.DataColumn[] {
                        this.tableSchemaTemplate.SchemaIdColumn}, false);
            this.Relations.Add(this.relationFK_SchemaTemplate_Schema);
            this.relationFK_SchemaTemplate_Template = new System.Data.DataRelation("FK_SchemaTemplate_Template", new System.Data.DataColumn[] {
                        this.tableTemplate.TemplateIdColumn}, new System.Data.DataColumn[] {
                        this.tableSchemaTemplate.TemplateIdColumn}, false);
            this.Relations.Add(this.relationFK_SchemaTemplate_Template);
            this.relationFK_Session_Job = new System.Data.DataRelation("FK_Session_Job", new System.Data.DataColumn[] {
                        this.tableJob.JobIdColumn}, new System.Data.DataColumn[] {
                        this.tableSession.JobIdColumn}, false);
            this.Relations.Add(this.relationFK_Session_Job);
            this.relationFK_Session_User = new System.Data.DataRelation("FK_Session_User", new System.Data.DataColumn[] {
                        this.tableUser.UserIdColumn}, new System.Data.DataColumn[] {
                        this.tableSession.UserIdColumn}, false);
            this.Relations.Add(this.relationFK_Session_User);
            this.relationFK_UserJob_Job = new System.Data.DataRelation("FK_UserJob_Job", new System.Data.DataColumn[] {
                        this.tableJob.JobIdColumn}, new System.Data.DataColumn[] {
                        this.tableUserJob.JobIdColumn}, false);
            this.Relations.Add(this.relationFK_UserJob_Job);
            this.relationFK_UserJob_User = new System.Data.DataRelation("FK_UserJob_User", new System.Data.DataColumn[] {
                        this.tableUser.UserIdColumn}, new System.Data.DataColumn[] {
                        this.tableUserJob.UserIdColumn}, false);
            this.Relations.Add(this.relationFK_UserJob_User);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEdit() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEntityType() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEntityTypeSchema() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFont() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIdAllocation() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIdFree() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIdGroup() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJob() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLastRevision() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLayer() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProperty() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSchema() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSchemaTemplate() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSession() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSysId() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemplate() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTheme() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUserJob() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUser() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeZone() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            BacksightDataSet ds = new BacksightDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void EditRowChangeEventHandler(object sender, EditRowChangeEvent e);
        
        public delegate void EntityTypeRowChangeEventHandler(object sender, EntityTypeRowChangeEvent e);
        
        public delegate void EntityTypeSchemaRowChangeEventHandler(object sender, EntityTypeSchemaRowChangeEvent e);
        
        public delegate void FontRowChangeEventHandler(object sender, FontRowChangeEvent e);
        
        public delegate void IdAllocationRowChangeEventHandler(object sender, IdAllocationRowChangeEvent e);
        
        public delegate void IdFreeRowChangeEventHandler(object sender, IdFreeRowChangeEvent e);
        
        public delegate void IdGroupRowChangeEventHandler(object sender, IdGroupRowChangeEvent e);
        
        public delegate void JobRowChangeEventHandler(object sender, JobRowChangeEvent e);
        
        public delegate void LastRevisionRowChangeEventHandler(object sender, LastRevisionRowChangeEvent e);
        
        public delegate void LayerRowChangeEventHandler(object sender, LayerRowChangeEvent e);
        
        public delegate void PropertyRowChangeEventHandler(object sender, PropertyRowChangeEvent e);
        
        public delegate void SchemaRowChangeEventHandler(object sender, SchemaRowChangeEvent e);
        
        public delegate void SchemaTemplateRowChangeEventHandler(object sender, SchemaTemplateRowChangeEvent e);
        
        public delegate void SessionRowChangeEventHandler(object sender, SessionRowChangeEvent e);
        
        public delegate void SysIdRowChangeEventHandler(object sender, SysIdRowChangeEvent e);
        
        public delegate void TemplateRowChangeEventHandler(object sender, TemplateRowChangeEvent e);
        
        public delegate void ThemeRowChangeEventHandler(object sender, ThemeRowChangeEvent e);
        
        public delegate void UserJobRowChangeEventHandler(object sender, UserJobRowChangeEvent e);
        
        public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);
        
        public delegate void ZoneRowChangeEventHandler(object sender, ZoneRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EditDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSessionId;
            
            private System.Data.DataColumn columnEditSequence;
            
            private System.Data.DataColumn columnData;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditDataTable() {
                this.TableName = "Edit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EditDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EditDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionIdColumn {
                get {
                    return this.columnSessionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EditSequenceColumn {
                get {
                    return this.columnEditSequence;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditRow this[int index] {
                get {
                    return ((EditRow)(this.Rows[index]));
                }
            }
            
            public event EditRowChangeEventHandler EditRowChanging;
            
            public event EditRowChangeEventHandler EditRowChanged;
            
            public event EditRowChangeEventHandler EditRowDeleting;
            
            public event EditRowChangeEventHandler EditRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEditRow(EditRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditRow AddEditRow(SessionRow parentSessionRowByFK_Edit_Session, int EditSequence, string Data) {
                EditRow rowEditRow = ((EditRow)(this.NewRow()));
                rowEditRow.ItemArray = new object[] {
                        parentSessionRowByFK_Edit_Session[0],
                        EditSequence,
                        Data};
                this.Rows.Add(rowEditRow);
                return rowEditRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditRow FindBySessionIdEditSequence(int SessionId, int EditSequence) {
                return ((EditRow)(this.Rows.Find(new object[] {
                            SessionId,
                            EditSequence})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EditDataTable cln = ((EditDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EditDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSessionId = base.Columns["SessionId"];
                this.columnEditSequence = base.Columns["EditSequence"];
                this.columnData = base.Columns["Data"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSessionId = new System.Data.DataColumn("SessionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSessionId);
                this.columnEditSequence = new System.Data.DataColumn("EditSequence", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEditSequence);
                this.columnData = new System.Data.DataColumn("Data", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnData);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSessionId,
                                this.columnEditSequence}, true));
                this.columnSessionId.AllowDBNull = false;
                this.columnEditSequence.AllowDBNull = false;
                this.columnData.AllowDBNull = false;
                this.columnData.MaxLength = 2147483647;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditRow NewEditRow() {
                return ((EditRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EditRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EditRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EditRowChanged != null)) {
                    this.EditRowChanged(this, new EditRowChangeEvent(((EditRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EditRowChanging != null)) {
                    this.EditRowChanging(this, new EditRowChangeEvent(((EditRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EditRowDeleted != null)) {
                    this.EditRowDeleted(this, new EditRowChangeEvent(((EditRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EditRowDeleting != null)) {
                    this.EditRowDeleting(this, new EditRowChangeEvent(((EditRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEditRow(EditRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EditDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EntityTypeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEntityId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnIsPoint;
            
            private System.Data.DataColumn columnIsLine;
            
            private System.Data.DataColumn columnIsLineTopological;
            
            private System.Data.DataColumn columnIsPolygon;
            
            private System.Data.DataColumn columnIsText;
            
            private System.Data.DataColumn columnFontId;
            
            private System.Data.DataColumn columnLayerId;
            
            private System.Data.DataColumn columnGroupId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeDataTable() {
                this.TableName = "EntityType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntityTypeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EntityTypeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EntityIdColumn {
                get {
                    return this.columnEntityId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsPointColumn {
                get {
                    return this.columnIsPoint;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsLineColumn {
                get {
                    return this.columnIsLine;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsLineTopologicalColumn {
                get {
                    return this.columnIsLineTopological;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsPolygonColumn {
                get {
                    return this.columnIsPolygon;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsTextColumn {
                get {
                    return this.columnIsText;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FontIdColumn {
                get {
                    return this.columnFontId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LayerIdColumn {
                get {
                    return this.columnLayerId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GroupIdColumn {
                get {
                    return this.columnGroupId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeRow this[int index] {
                get {
                    return ((EntityTypeRow)(this.Rows[index]));
                }
            }
            
            public event EntityTypeRowChangeEventHandler EntityTypeRowChanging;
            
            public event EntityTypeRowChangeEventHandler EntityTypeRowChanged;
            
            public event EntityTypeRowChangeEventHandler EntityTypeRowDeleting;
            
            public event EntityTypeRowChangeEventHandler EntityTypeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEntityTypeRow(EntityTypeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeRow AddEntityTypeRow(int EntityId, string Name, string IsPoint, string IsLine, string IsLineTopological, string IsPolygon, string IsText, FontRow parentFontRowByFK_EntityType_Font, LayerRow parentLayerRowByFK_EntityType_Layer, IdGroupRow parentIdGroupRowByFK_EntityType_IdGroup) {
                EntityTypeRow rowEntityTypeRow = ((EntityTypeRow)(this.NewRow()));
                rowEntityTypeRow.ItemArray = new object[] {
                        EntityId,
                        Name,
                        IsPoint,
                        IsLine,
                        IsLineTopological,
                        IsPolygon,
                        IsText,
                        parentFontRowByFK_EntityType_Font[0],
                        parentLayerRowByFK_EntityType_Layer[0],
                        parentIdGroupRowByFK_EntityType_IdGroup[0]};
                this.Rows.Add(rowEntityTypeRow);
                return rowEntityTypeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeRow FindByEntityId(int EntityId) {
                return ((EntityTypeRow)(this.Rows.Find(new object[] {
                            EntityId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EntityTypeDataTable cln = ((EntityTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EntityTypeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEntityId = base.Columns["EntityId"];
                this.columnName = base.Columns["Name"];
                this.columnIsPoint = base.Columns["IsPoint"];
                this.columnIsLine = base.Columns["IsLine"];
                this.columnIsLineTopological = base.Columns["IsLineTopological"];
                this.columnIsPolygon = base.Columns["IsPolygon"];
                this.columnIsText = base.Columns["IsText"];
                this.columnFontId = base.Columns["FontId"];
                this.columnLayerId = base.Columns["LayerId"];
                this.columnGroupId = base.Columns["GroupId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEntityId = new System.Data.DataColumn("EntityId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntityId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIsPoint = new System.Data.DataColumn("IsPoint", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPoint);
                this.columnIsLine = new System.Data.DataColumn("IsLine", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLine);
                this.columnIsLineTopological = new System.Data.DataColumn("IsLineTopological", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLineTopological);
                this.columnIsPolygon = new System.Data.DataColumn("IsPolygon", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPolygon);
                this.columnIsText = new System.Data.DataColumn("IsText", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsText);
                this.columnFontId = new System.Data.DataColumn("FontId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFontId);
                this.columnLayerId = new System.Data.DataColumn("LayerId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayerId);
                this.columnGroupId = new System.Data.DataColumn("GroupId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnEntityId}, true));
                this.columnEntityId.AllowDBNull = false;
                this.columnEntityId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnIsPoint.AllowDBNull = false;
                this.columnIsPoint.MaxLength = 1;
                this.columnIsLine.AllowDBNull = false;
                this.columnIsLine.MaxLength = 1;
                this.columnIsLineTopological.AllowDBNull = false;
                this.columnIsLineTopological.MaxLength = 1;
                this.columnIsPolygon.AllowDBNull = false;
                this.columnIsPolygon.MaxLength = 1;
                this.columnIsText.AllowDBNull = false;
                this.columnIsText.MaxLength = 1;
                this.columnFontId.AllowDBNull = false;
                this.columnLayerId.AllowDBNull = false;
                this.columnGroupId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeRow NewEntityTypeRow() {
                return ((EntityTypeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EntityTypeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EntityTypeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EntityTypeRowChanged != null)) {
                    this.EntityTypeRowChanged(this, new EntityTypeRowChangeEvent(((EntityTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EntityTypeRowChanging != null)) {
                    this.EntityTypeRowChanging(this, new EntityTypeRowChangeEvent(((EntityTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EntityTypeRowDeleted != null)) {
                    this.EntityTypeRowDeleted(this, new EntityTypeRowChangeEvent(((EntityTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EntityTypeRowDeleting != null)) {
                    this.EntityTypeRowDeleting(this, new EntityTypeRowChangeEvent(((EntityTypeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEntityTypeRow(EntityTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EntityTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EntityTypeSchemaDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnEntityId;
            
            private System.Data.DataColumn columnSchemaId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeSchemaDataTable() {
                this.TableName = "EntityTypeSchema";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntityTypeSchemaDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EntityTypeSchemaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EntityIdColumn {
                get {
                    return this.columnEntityId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SchemaIdColumn {
                get {
                    return this.columnSchemaId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeSchemaRow this[int index] {
                get {
                    return ((EntityTypeSchemaRow)(this.Rows[index]));
                }
            }
            
            public event EntityTypeSchemaRowChangeEventHandler EntityTypeSchemaRowChanging;
            
            public event EntityTypeSchemaRowChangeEventHandler EntityTypeSchemaRowChanged;
            
            public event EntityTypeSchemaRowChangeEventHandler EntityTypeSchemaRowDeleting;
            
            public event EntityTypeSchemaRowChangeEventHandler EntityTypeSchemaRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEntityTypeSchemaRow(EntityTypeSchemaRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeSchemaRow AddEntityTypeSchemaRow(EntityTypeRow parentEntityTypeRowByFK_EntityTypeSchema_EntityType, SchemaRow parentSchemaRowByFK_EntityTypeSchema_Schema) {
                EntityTypeSchemaRow rowEntityTypeSchemaRow = ((EntityTypeSchemaRow)(this.NewRow()));
                rowEntityTypeSchemaRow.ItemArray = new object[] {
                        parentEntityTypeRowByFK_EntityTypeSchema_EntityType[0],
                        parentSchemaRowByFK_EntityTypeSchema_Schema[0]};
                this.Rows.Add(rowEntityTypeSchemaRow);
                return rowEntityTypeSchemaRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeSchemaRow FindByEntityIdSchemaId(int EntityId, int SchemaId) {
                return ((EntityTypeSchemaRow)(this.Rows.Find(new object[] {
                            EntityId,
                            SchemaId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                EntityTypeSchemaDataTable cln = ((EntityTypeSchemaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new EntityTypeSchemaDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEntityId = base.Columns["EntityId"];
                this.columnSchemaId = base.Columns["SchemaId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEntityId = new System.Data.DataColumn("EntityId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntityId);
                this.columnSchemaId = new System.Data.DataColumn("SchemaId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchemaId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnEntityId,
                                this.columnSchemaId}, true));
                this.columnEntityId.AllowDBNull = false;
                this.columnSchemaId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeSchemaRow NewEntityTypeSchemaRow() {
                return ((EntityTypeSchemaRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new EntityTypeSchemaRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(EntityTypeSchemaRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EntityTypeSchemaRowChanged != null)) {
                    this.EntityTypeSchemaRowChanged(this, new EntityTypeSchemaRowChangeEvent(((EntityTypeSchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EntityTypeSchemaRowChanging != null)) {
                    this.EntityTypeSchemaRowChanging(this, new EntityTypeSchemaRowChangeEvent(((EntityTypeSchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EntityTypeSchemaRowDeleted != null)) {
                    this.EntityTypeSchemaRowDeleted(this, new EntityTypeSchemaRowChangeEvent(((EntityTypeSchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EntityTypeSchemaRowDeleting != null)) {
                    this.EntityTypeSchemaRowDeleting(this, new EntityTypeSchemaRowChangeEvent(((EntityTypeSchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEntityTypeSchemaRow(EntityTypeSchemaRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EntityTypeSchemaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FontDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFontId;
            
            private System.Data.DataColumn columnTypeFace;
            
            private System.Data.DataColumn columnPointSize;
            
            private System.Data.DataColumn columnIsBold;
            
            private System.Data.DataColumn columnIsItalic;
            
            private System.Data.DataColumn columnIsUnderline;
            
            private System.Data.DataColumn columnFontFile;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontDataTable() {
                this.TableName = "Font";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FontDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FontDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FontIdColumn {
                get {
                    return this.columnFontId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TypeFaceColumn {
                get {
                    return this.columnTypeFace;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PointSizeColumn {
                get {
                    return this.columnPointSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsBoldColumn {
                get {
                    return this.columnIsBold;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsItalicColumn {
                get {
                    return this.columnIsItalic;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IsUnderlineColumn {
                get {
                    return this.columnIsUnderline;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FontFileColumn {
                get {
                    return this.columnFontFile;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontRow this[int index] {
                get {
                    return ((FontRow)(this.Rows[index]));
                }
            }
            
            public event FontRowChangeEventHandler FontRowChanging;
            
            public event FontRowChangeEventHandler FontRowChanged;
            
            public event FontRowChangeEventHandler FontRowDeleting;
            
            public event FontRowChangeEventHandler FontRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFontRow(FontRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontRow AddFontRow(int FontId, string TypeFace, float PointSize, string IsBold, string IsItalic, string IsUnderline, string FontFile) {
                FontRow rowFontRow = ((FontRow)(this.NewRow()));
                rowFontRow.ItemArray = new object[] {
                        FontId,
                        TypeFace,
                        PointSize,
                        IsBold,
                        IsItalic,
                        IsUnderline,
                        FontFile};
                this.Rows.Add(rowFontRow);
                return rowFontRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontRow FindByFontId(int FontId) {
                return ((FontRow)(this.Rows.Find(new object[] {
                            FontId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                FontDataTable cln = ((FontDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new FontDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFontId = base.Columns["FontId"];
                this.columnTypeFace = base.Columns["TypeFace"];
                this.columnPointSize = base.Columns["PointSize"];
                this.columnIsBold = base.Columns["IsBold"];
                this.columnIsItalic = base.Columns["IsItalic"];
                this.columnIsUnderline = base.Columns["IsUnderline"];
                this.columnFontFile = base.Columns["FontFile"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFontId = new System.Data.DataColumn("FontId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFontId);
                this.columnTypeFace = new System.Data.DataColumn("TypeFace", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeFace);
                this.columnPointSize = new System.Data.DataColumn("PointSize", typeof(float), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPointSize);
                this.columnIsBold = new System.Data.DataColumn("IsBold", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsBold);
                this.columnIsItalic = new System.Data.DataColumn("IsItalic", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsItalic);
                this.columnIsUnderline = new System.Data.DataColumn("IsUnderline", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsUnderline);
                this.columnFontFile = new System.Data.DataColumn("FontFile", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFontFile);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnFontId}, true));
                this.columnFontId.AllowDBNull = false;
                this.columnFontId.Unique = true;
                this.columnTypeFace.AllowDBNull = false;
                this.columnTypeFace.MaxLength = 24;
                this.columnPointSize.AllowDBNull = false;
                this.columnIsBold.AllowDBNull = false;
                this.columnIsBold.MaxLength = 1;
                this.columnIsItalic.AllowDBNull = false;
                this.columnIsItalic.MaxLength = 1;
                this.columnIsUnderline.AllowDBNull = false;
                this.columnIsUnderline.MaxLength = 1;
                this.columnFontFile.AllowDBNull = false;
                this.columnFontFile.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontRow NewFontRow() {
                return ((FontRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new FontRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(FontRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FontRowChanged != null)) {
                    this.FontRowChanged(this, new FontRowChangeEvent(((FontRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FontRowChanging != null)) {
                    this.FontRowChanging(this, new FontRowChangeEvent(((FontRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FontRowDeleted != null)) {
                    this.FontRowDeleted(this, new FontRowChangeEvent(((FontRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FontRowDeleting != null)) {
                    this.FontRowDeleting(this, new FontRowChangeEvent(((FontRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFontRow(FontRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FontDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IdAllocationDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLowestId;
            
            private System.Data.DataColumn columnHighestId;
            
            private System.Data.DataColumn columnGroupId;
            
            private System.Data.DataColumn columnJobId;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnTimeAllocated;
            
            private System.Data.DataColumn columnNumUsed;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationDataTable() {
                this.TableName = "IdAllocation";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IdAllocationDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IdAllocationDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LowestIdColumn {
                get {
                    return this.columnLowestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HighestIdColumn {
                get {
                    return this.columnHighestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GroupIdColumn {
                get {
                    return this.columnGroupId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JobIdColumn {
                get {
                    return this.columnJobId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TimeAllocatedColumn {
                get {
                    return this.columnTimeAllocated;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumUsedColumn {
                get {
                    return this.columnNumUsed;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRow this[int index] {
                get {
                    return ((IdAllocationRow)(this.Rows[index]));
                }
            }
            
            public event IdAllocationRowChangeEventHandler IdAllocationRowChanging;
            
            public event IdAllocationRowChangeEventHandler IdAllocationRowChanged;
            
            public event IdAllocationRowChangeEventHandler IdAllocationRowDeleting;
            
            public event IdAllocationRowChangeEventHandler IdAllocationRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIdAllocationRow(IdAllocationRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRow AddIdAllocationRow(int LowestId, int HighestId, IdGroupRow parentIdGroupRowByFK_IdAllocation_IdGroup, JobRow parentJobRowByFK_IdAllocation_Job, UserRow parentUserRowByFK_IdAllocation_User, System.DateTime TimeAllocated, int NumUsed) {
                IdAllocationRow rowIdAllocationRow = ((IdAllocationRow)(this.NewRow()));
                rowIdAllocationRow.ItemArray = new object[] {
                        LowestId,
                        HighestId,
                        parentIdGroupRowByFK_IdAllocation_IdGroup[0],
                        parentJobRowByFK_IdAllocation_Job[0],
                        parentUserRowByFK_IdAllocation_User[0],
                        TimeAllocated,
                        NumUsed};
                this.Rows.Add(rowIdAllocationRow);
                return rowIdAllocationRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRow FindByLowestId(int LowestId) {
                return ((IdAllocationRow)(this.Rows.Find(new object[] {
                            LowestId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                IdAllocationDataTable cln = ((IdAllocationDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new IdAllocationDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLowestId = base.Columns["LowestId"];
                this.columnHighestId = base.Columns["HighestId"];
                this.columnGroupId = base.Columns["GroupId"];
                this.columnJobId = base.Columns["JobId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnTimeAllocated = base.Columns["TimeAllocated"];
                this.columnNumUsed = base.Columns["NumUsed"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLowestId = new System.Data.DataColumn("LowestId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLowestId);
                this.columnHighestId = new System.Data.DataColumn("HighestId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHighestId);
                this.columnGroupId = new System.Data.DataColumn("GroupId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupId);
                this.columnJobId = new System.Data.DataColumn("JobId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobId);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnTimeAllocated = new System.Data.DataColumn("TimeAllocated", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeAllocated);
                this.columnNumUsed = new System.Data.DataColumn("NumUsed", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumUsed);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLowestId}, true));
                this.columnLowestId.AllowDBNull = false;
                this.columnLowestId.Unique = true;
                this.columnHighestId.AllowDBNull = false;
                this.columnGroupId.AllowDBNull = false;
                this.columnJobId.AllowDBNull = false;
                this.columnUserId.AllowDBNull = false;
                this.columnTimeAllocated.AllowDBNull = false;
                this.columnNumUsed.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRow NewIdAllocationRow() {
                return ((IdAllocationRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new IdAllocationRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(IdAllocationRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IdAllocationRowChanged != null)) {
                    this.IdAllocationRowChanged(this, new IdAllocationRowChangeEvent(((IdAllocationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IdAllocationRowChanging != null)) {
                    this.IdAllocationRowChanging(this, new IdAllocationRowChangeEvent(((IdAllocationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IdAllocationRowDeleted != null)) {
                    this.IdAllocationRowDeleted(this, new IdAllocationRowChangeEvent(((IdAllocationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IdAllocationRowDeleting != null)) {
                    this.IdAllocationRowDeleting(this, new IdAllocationRowChangeEvent(((IdAllocationRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIdAllocationRow(IdAllocationRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IdAllocationDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IdFreeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnGroupId;
            
            private System.Data.DataColumn columnLowestId;
            
            private System.Data.DataColumn columnHighestId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeDataTable() {
                this.TableName = "IdFree";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IdFreeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IdFreeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GroupIdColumn {
                get {
                    return this.columnGroupId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LowestIdColumn {
                get {
                    return this.columnLowestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HighestIdColumn {
                get {
                    return this.columnHighestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeRow this[int index] {
                get {
                    return ((IdFreeRow)(this.Rows[index]));
                }
            }
            
            public event IdFreeRowChangeEventHandler IdFreeRowChanging;
            
            public event IdFreeRowChangeEventHandler IdFreeRowChanged;
            
            public event IdFreeRowChangeEventHandler IdFreeRowDeleting;
            
            public event IdFreeRowChangeEventHandler IdFreeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIdFreeRow(IdFreeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeRow AddIdFreeRow(IdGroupRow parentIdGroupRowByFK_IdFree_IdGroup, int LowestId, int HighestId) {
                IdFreeRow rowIdFreeRow = ((IdFreeRow)(this.NewRow()));
                rowIdFreeRow.ItemArray = new object[] {
                        parentIdGroupRowByFK_IdFree_IdGroup[0],
                        LowestId,
                        HighestId};
                this.Rows.Add(rowIdFreeRow);
                return rowIdFreeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeRow FindByGroupIdLowestId(int GroupId, int LowestId) {
                return ((IdFreeRow)(this.Rows.Find(new object[] {
                            GroupId,
                            LowestId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                IdFreeDataTable cln = ((IdFreeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new IdFreeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGroupId = base.Columns["GroupId"];
                this.columnLowestId = base.Columns["LowestId"];
                this.columnHighestId = base.Columns["HighestId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGroupId = new System.Data.DataColumn("GroupId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupId);
                this.columnLowestId = new System.Data.DataColumn("LowestId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLowestId);
                this.columnHighestId = new System.Data.DataColumn("HighestId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHighestId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnGroupId,
                                this.columnLowestId}, true));
                this.columnGroupId.AllowDBNull = false;
                this.columnLowestId.AllowDBNull = false;
                this.columnHighestId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeRow NewIdFreeRow() {
                return ((IdFreeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new IdFreeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(IdFreeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IdFreeRowChanged != null)) {
                    this.IdFreeRowChanged(this, new IdFreeRowChangeEvent(((IdFreeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IdFreeRowChanging != null)) {
                    this.IdFreeRowChanging(this, new IdFreeRowChangeEvent(((IdFreeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IdFreeRowDeleted != null)) {
                    this.IdFreeRowDeleted(this, new IdFreeRowChangeEvent(((IdFreeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IdFreeRowDeleting != null)) {
                    this.IdFreeRowDeleting(this, new IdFreeRowChangeEvent(((IdFreeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIdFreeRow(IdFreeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IdFreeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IdGroupDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnGroupId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnLowestId;
            
            private System.Data.DataColumn columnHighestId;
            
            private System.Data.DataColumn columnPacketSize;
            
            private System.Data.DataColumn columnCheckDigit;
            
            private System.Data.DataColumn columnKeyFormat;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupDataTable() {
                this.TableName = "IdGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IdGroupDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IdGroupDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn GroupIdColumn {
                get {
                    return this.columnGroupId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LowestIdColumn {
                get {
                    return this.columnLowestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn HighestIdColumn {
                get {
                    return this.columnHighestId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PacketSizeColumn {
                get {
                    return this.columnPacketSize;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CheckDigitColumn {
                get {
                    return this.columnCheckDigit;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn KeyFormatColumn {
                get {
                    return this.columnKeyFormat;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow this[int index] {
                get {
                    return ((IdGroupRow)(this.Rows[index]));
                }
            }
            
            public event IdGroupRowChangeEventHandler IdGroupRowChanging;
            
            public event IdGroupRowChangeEventHandler IdGroupRowChanged;
            
            public event IdGroupRowChangeEventHandler IdGroupRowDeleting;
            
            public event IdGroupRowChangeEventHandler IdGroupRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIdGroupRow(IdGroupRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow AddIdGroupRow(int GroupId, string Name, int LowestId, int HighestId, int PacketSize, string CheckDigit, string KeyFormat) {
                IdGroupRow rowIdGroupRow = ((IdGroupRow)(this.NewRow()));
                rowIdGroupRow.ItemArray = new object[] {
                        GroupId,
                        Name,
                        LowestId,
                        HighestId,
                        PacketSize,
                        CheckDigit,
                        KeyFormat};
                this.Rows.Add(rowIdGroupRow);
                return rowIdGroupRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow FindByGroupId(int GroupId) {
                return ((IdGroupRow)(this.Rows.Find(new object[] {
                            GroupId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                IdGroupDataTable cln = ((IdGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new IdGroupDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGroupId = base.Columns["GroupId"];
                this.columnName = base.Columns["Name"];
                this.columnLowestId = base.Columns["LowestId"];
                this.columnHighestId = base.Columns["HighestId"];
                this.columnPacketSize = base.Columns["PacketSize"];
                this.columnCheckDigit = base.Columns["CheckDigit"];
                this.columnKeyFormat = base.Columns["KeyFormat"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGroupId = new System.Data.DataColumn("GroupId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnLowestId = new System.Data.DataColumn("LowestId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLowestId);
                this.columnHighestId = new System.Data.DataColumn("HighestId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHighestId);
                this.columnPacketSize = new System.Data.DataColumn("PacketSize", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPacketSize);
                this.columnCheckDigit = new System.Data.DataColumn("CheckDigit", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckDigit);
                this.columnKeyFormat = new System.Data.DataColumn("KeyFormat", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnKeyFormat);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnGroupId}, true));
                this.columnGroupId.AllowDBNull = false;
                this.columnGroupId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnLowestId.AllowDBNull = false;
                this.columnHighestId.AllowDBNull = false;
                this.columnPacketSize.AllowDBNull = false;
                this.columnCheckDigit.AllowDBNull = false;
                this.columnCheckDigit.MaxLength = 1;
                this.columnKeyFormat.AllowDBNull = false;
                this.columnKeyFormat.MaxLength = 8;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow NewIdGroupRow() {
                return ((IdGroupRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new IdGroupRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(IdGroupRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IdGroupRowChanged != null)) {
                    this.IdGroupRowChanged(this, new IdGroupRowChangeEvent(((IdGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IdGroupRowChanging != null)) {
                    this.IdGroupRowChanging(this, new IdGroupRowChangeEvent(((IdGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IdGroupRowDeleted != null)) {
                    this.IdGroupRowDeleted(this, new IdGroupRowChangeEvent(((IdGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IdGroupRowDeleting != null)) {
                    this.IdGroupRowDeleting(this, new IdGroupRowChangeEvent(((IdGroupRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIdGroupRow(IdGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IdGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JobDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnJobId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnZoneId;
            
            private System.Data.DataColumn columnLayerId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobDataTable() {
                this.TableName = "Job";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JobDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JobDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JobIdColumn {
                get {
                    return this.columnJobId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ZoneIdColumn {
                get {
                    return this.columnZoneId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LayerIdColumn {
                get {
                    return this.columnLayerId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow this[int index] {
                get {
                    return ((JobRow)(this.Rows[index]));
                }
            }
            
            public event JobRowChangeEventHandler JobRowChanging;
            
            public event JobRowChangeEventHandler JobRowChanged;
            
            public event JobRowChangeEventHandler JobRowDeleting;
            
            public event JobRowChangeEventHandler JobRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJobRow(JobRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow AddJobRow(string Name, ZoneRow parentZoneRowByFK_Job_Zone, LayerRow parentLayerRowByFK_Job_Layer) {
                JobRow rowJobRow = ((JobRow)(this.NewRow()));
                rowJobRow.ItemArray = new object[] {
                        null,
                        Name,
                        parentZoneRowByFK_Job_Zone[0],
                        parentLayerRowByFK_Job_Layer[0]};
                this.Rows.Add(rowJobRow);
                return rowJobRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow FindByJobId(int JobId) {
                return ((JobRow)(this.Rows.Find(new object[] {
                            JobId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                JobDataTable cln = ((JobDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new JobDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnJobId = base.Columns["JobId"];
                this.columnName = base.Columns["Name"];
                this.columnZoneId = base.Columns["ZoneId"];
                this.columnLayerId = base.Columns["LayerId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnJobId = new System.Data.DataColumn("JobId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnZoneId = new System.Data.DataColumn("ZoneId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneId);
                this.columnLayerId = new System.Data.DataColumn("LayerId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayerId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnJobId}, true));
                this.columnJobId.AutoIncrement = true;
                this.columnJobId.AllowDBNull = false;
                this.columnJobId.ReadOnly = true;
                this.columnJobId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 100;
                this.columnZoneId.AllowDBNull = false;
                this.columnLayerId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow NewJobRow() {
                return ((JobRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new JobRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(JobRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JobRowChanged != null)) {
                    this.JobRowChanged(this, new JobRowChangeEvent(((JobRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JobRowChanging != null)) {
                    this.JobRowChanging(this, new JobRowChangeEvent(((JobRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JobRowDeleted != null)) {
                    this.JobRowDeleted(this, new JobRowChangeEvent(((JobRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JobRowDeleting != null)) {
                    this.JobRowDeleting(this, new JobRowChangeEvent(((JobRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJobRow(JobRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JobDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LastRevisionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnId;
            
            private System.Data.DataColumn columnRevisionTime;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LastRevisionDataTable() {
                this.TableName = "LastRevision";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LastRevisionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LastRevisionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RevisionTimeColumn {
                get {
                    return this.columnRevisionTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LastRevisionRow this[int index] {
                get {
                    return ((LastRevisionRow)(this.Rows[index]));
                }
            }
            
            public event LastRevisionRowChangeEventHandler LastRevisionRowChanging;
            
            public event LastRevisionRowChangeEventHandler LastRevisionRowChanged;
            
            public event LastRevisionRowChangeEventHandler LastRevisionRowDeleting;
            
            public event LastRevisionRowChangeEventHandler LastRevisionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLastRevisionRow(LastRevisionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LastRevisionRow AddLastRevisionRow(System.DateTime RevisionTime) {
                LastRevisionRow rowLastRevisionRow = ((LastRevisionRow)(this.NewRow()));
                rowLastRevisionRow.ItemArray = new object[] {
                        null,
                        RevisionTime};
                this.Rows.Add(rowLastRevisionRow);
                return rowLastRevisionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LastRevisionDataTable cln = ((LastRevisionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LastRevisionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnRevisionTime = base.Columns["RevisionTime"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new System.Data.DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnRevisionTime = new System.Data.DataColumn("RevisionTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevisionTime);
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnRevisionTime.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LastRevisionRow NewLastRevisionRow() {
                return ((LastRevisionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LastRevisionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LastRevisionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LastRevisionRowChanged != null)) {
                    this.LastRevisionRowChanged(this, new LastRevisionRowChangeEvent(((LastRevisionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LastRevisionRowChanging != null)) {
                    this.LastRevisionRowChanging(this, new LastRevisionRowChangeEvent(((LastRevisionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LastRevisionRowDeleted != null)) {
                    this.LastRevisionRowDeleted(this, new LastRevisionRowChangeEvent(((LastRevisionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LastRevisionRowDeleting != null)) {
                    this.LastRevisionRowDeleting(this, new LastRevisionRowChangeEvent(((LastRevisionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLastRevisionRow(LastRevisionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LastRevisionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LayerDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLayerId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnThemeId;
            
            private System.Data.DataColumn columnThemeSequence;
            
            private System.Data.DataColumn columnDefaultPointId;
            
            private System.Data.DataColumn columnDefaultLineId;
            
            private System.Data.DataColumn columnDefaultPolygonId;
            
            private System.Data.DataColumn columnDefaultTextId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerDataTable() {
                this.TableName = "Layer";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LayerDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LayerDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LayerIdColumn {
                get {
                    return this.columnLayerId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ThemeIdColumn {
                get {
                    return this.columnThemeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ThemeSequenceColumn {
                get {
                    return this.columnThemeSequence;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DefaultPointIdColumn {
                get {
                    return this.columnDefaultPointId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DefaultLineIdColumn {
                get {
                    return this.columnDefaultLineId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DefaultPolygonIdColumn {
                get {
                    return this.columnDefaultPolygonId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DefaultTextIdColumn {
                get {
                    return this.columnDefaultTextId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow this[int index] {
                get {
                    return ((LayerRow)(this.Rows[index]));
                }
            }
            
            public event LayerRowChangeEventHandler LayerRowChanging;
            
            public event LayerRowChangeEventHandler LayerRowChanged;
            
            public event LayerRowChangeEventHandler LayerRowDeleting;
            
            public event LayerRowChangeEventHandler LayerRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLayerRow(LayerRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow AddLayerRow(int LayerId, string Name, ThemeRow parentThemeRowByFK_Layer_Theme, int ThemeSequence, EntityTypeRow parentEntityTypeRowByFK_Layer_EntityType1, EntityTypeRow parentEntityTypeRowByFK_Layer_EntityType2, EntityTypeRow parentEntityTypeRowByFK_Layer_EntityType3, EntityTypeRow parentEntityTypeRowByFK_Layer_EntityType4) {
                LayerRow rowLayerRow = ((LayerRow)(this.NewRow()));
                rowLayerRow.ItemArray = new object[] {
                        LayerId,
                        Name,
                        parentThemeRowByFK_Layer_Theme[0],
                        ThemeSequence,
                        parentEntityTypeRowByFK_Layer_EntityType1[0],
                        parentEntityTypeRowByFK_Layer_EntityType2[0],
                        parentEntityTypeRowByFK_Layer_EntityType3[0],
                        parentEntityTypeRowByFK_Layer_EntityType4[0]};
                this.Rows.Add(rowLayerRow);
                return rowLayerRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow FindByLayerId(int LayerId) {
                return ((LayerRow)(this.Rows.Find(new object[] {
                            LayerId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LayerDataTable cln = ((LayerDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LayerDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLayerId = base.Columns["LayerId"];
                this.columnName = base.Columns["Name"];
                this.columnThemeId = base.Columns["ThemeId"];
                this.columnThemeSequence = base.Columns["ThemeSequence"];
                this.columnDefaultPointId = base.Columns["DefaultPointId"];
                this.columnDefaultLineId = base.Columns["DefaultLineId"];
                this.columnDefaultPolygonId = base.Columns["DefaultPolygonId"];
                this.columnDefaultTextId = base.Columns["DefaultTextId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLayerId = new System.Data.DataColumn("LayerId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLayerId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnThemeId = new System.Data.DataColumn("ThemeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnThemeId);
                this.columnThemeSequence = new System.Data.DataColumn("ThemeSequence", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnThemeSequence);
                this.columnDefaultPointId = new System.Data.DataColumn("DefaultPointId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultPointId);
                this.columnDefaultLineId = new System.Data.DataColumn("DefaultLineId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultLineId);
                this.columnDefaultPolygonId = new System.Data.DataColumn("DefaultPolygonId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultPolygonId);
                this.columnDefaultTextId = new System.Data.DataColumn("DefaultTextId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefaultTextId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnLayerId}, true));
                this.columnLayerId.AllowDBNull = false;
                this.columnLayerId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnThemeId.AllowDBNull = false;
                this.columnThemeSequence.AllowDBNull = false;
                this.columnDefaultPointId.AllowDBNull = false;
                this.columnDefaultLineId.AllowDBNull = false;
                this.columnDefaultPolygonId.AllowDBNull = false;
                this.columnDefaultTextId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow NewLayerRow() {
                return ((LayerRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LayerRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LayerRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LayerRowChanged != null)) {
                    this.LayerRowChanged(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LayerRowChanging != null)) {
                    this.LayerRowChanging(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LayerRowDeleted != null)) {
                    this.LayerRowDeleted(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LayerRowDeleting != null)) {
                    this.LayerRowDeleting(this, new LayerRowChangeEvent(((LayerRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLayerRow(LayerRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LayerDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PropertyDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnValue;
            
            private System.Data.DataColumn columnDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyDataTable() {
                this.TableName = "Property";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PropertyDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PropertyDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow this[int index] {
                get {
                    return ((PropertyRow)(this.Rows[index]));
                }
            }
            
            public event PropertyRowChangeEventHandler PropertyRowChanging;
            
            public event PropertyRowChangeEventHandler PropertyRowChanged;
            
            public event PropertyRowChangeEventHandler PropertyRowDeleting;
            
            public event PropertyRowChangeEventHandler PropertyRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPropertyRow(PropertyRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow AddPropertyRow(string Name, string Value, string Description) {
                PropertyRow rowPropertyRow = ((PropertyRow)(this.NewRow()));
                rowPropertyRow.ItemArray = new object[] {
                        Name,
                        Value,
                        Description};
                this.Rows.Add(rowPropertyRow);
                return rowPropertyRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow FindByName(string Name) {
                return ((PropertyRow)(this.Rows.Find(new object[] {
                            Name})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                PropertyDataTable cln = ((PropertyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new PropertyDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnValue = base.Columns["Value"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnValue = new System.Data.DataColumn("Value", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnDescription = new System.Data.DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnName}, true));
                this.columnName.AllowDBNull = false;
                this.columnName.Unique = true;
                this.columnName.MaxLength = 50;
                this.columnValue.AllowDBNull = false;
                this.columnValue.MaxLength = 100;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 200;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow NewPropertyRow() {
                return ((PropertyRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new PropertyRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(PropertyRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PropertyRowChanged != null)) {
                    this.PropertyRowChanged(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PropertyRowChanging != null)) {
                    this.PropertyRowChanging(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PropertyRowDeleted != null)) {
                    this.PropertyRowDeleted(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PropertyRowDeleting != null)) {
                    this.PropertyRowDeleting(this, new PropertyRowChangeEvent(((PropertyRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePropertyRow(PropertyRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PropertyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SchemaDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSchemaId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnTableName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaDataTable() {
                this.TableName = "Schema";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchemaDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SchemaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SchemaIdColumn {
                get {
                    return this.columnSchemaId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TableNameColumn {
                get {
                    return this.columnTableName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow this[int index] {
                get {
                    return ((SchemaRow)(this.Rows[index]));
                }
            }
            
            public event SchemaRowChangeEventHandler SchemaRowChanging;
            
            public event SchemaRowChangeEventHandler SchemaRowChanged;
            
            public event SchemaRowChangeEventHandler SchemaRowDeleting;
            
            public event SchemaRowChangeEventHandler SchemaRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSchemaRow(SchemaRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow AddSchemaRow(int SchemaId, string Name, string TableName) {
                SchemaRow rowSchemaRow = ((SchemaRow)(this.NewRow()));
                rowSchemaRow.ItemArray = new object[] {
                        SchemaId,
                        Name,
                        TableName};
                this.Rows.Add(rowSchemaRow);
                return rowSchemaRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow FindBySchemaId(int SchemaId) {
                return ((SchemaRow)(this.Rows.Find(new object[] {
                            SchemaId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SchemaDataTable cln = ((SchemaDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SchemaDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSchemaId = base.Columns["SchemaId"];
                this.columnName = base.Columns["Name"];
                this.columnTableName = base.Columns["TableName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSchemaId = new System.Data.DataColumn("SchemaId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchemaId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnTableName = new System.Data.DataColumn("TableName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTableName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSchemaId}, true));
                this.columnSchemaId.AllowDBNull = false;
                this.columnSchemaId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnTableName.AllowDBNull = false;
                this.columnTableName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow NewSchemaRow() {
                return ((SchemaRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SchemaRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SchemaRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SchemaRowChanged != null)) {
                    this.SchemaRowChanged(this, new SchemaRowChangeEvent(((SchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SchemaRowChanging != null)) {
                    this.SchemaRowChanging(this, new SchemaRowChangeEvent(((SchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SchemaRowDeleted != null)) {
                    this.SchemaRowDeleted(this, new SchemaRowChangeEvent(((SchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SchemaRowDeleting != null)) {
                    this.SchemaRowDeleting(this, new SchemaRowChangeEvent(((SchemaRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSchemaRow(SchemaRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SchemaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SchemaTemplateDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSchemaId;
            
            private System.Data.DataColumn columnTemplateId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateDataTable() {
                this.TableName = "SchemaTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchemaTemplateDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SchemaTemplateDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SchemaIdColumn {
                get {
                    return this.columnSchemaId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TemplateIdColumn {
                get {
                    return this.columnTemplateId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRow this[int index] {
                get {
                    return ((SchemaTemplateRow)(this.Rows[index]));
                }
            }
            
            public event SchemaTemplateRowChangeEventHandler SchemaTemplateRowChanging;
            
            public event SchemaTemplateRowChangeEventHandler SchemaTemplateRowChanged;
            
            public event SchemaTemplateRowChangeEventHandler SchemaTemplateRowDeleting;
            
            public event SchemaTemplateRowChangeEventHandler SchemaTemplateRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSchemaTemplateRow(SchemaTemplateRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRow AddSchemaTemplateRow(SchemaRow parentSchemaRowByFK_SchemaTemplate_Schema, TemplateRow parentTemplateRowByFK_SchemaTemplate_Template) {
                SchemaTemplateRow rowSchemaTemplateRow = ((SchemaTemplateRow)(this.NewRow()));
                rowSchemaTemplateRow.ItemArray = new object[] {
                        parentSchemaRowByFK_SchemaTemplate_Schema[0],
                        parentTemplateRowByFK_SchemaTemplate_Template[0]};
                this.Rows.Add(rowSchemaTemplateRow);
                return rowSchemaTemplateRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRow FindBySchemaIdTemplateId(int SchemaId, int TemplateId) {
                return ((SchemaTemplateRow)(this.Rows.Find(new object[] {
                            SchemaId,
                            TemplateId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SchemaTemplateDataTable cln = ((SchemaTemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SchemaTemplateDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSchemaId = base.Columns["SchemaId"];
                this.columnTemplateId = base.Columns["TemplateId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSchemaId = new System.Data.DataColumn("SchemaId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchemaId);
                this.columnTemplateId = new System.Data.DataColumn("TemplateId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateId);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSchemaId,
                                this.columnTemplateId}, true));
                this.columnSchemaId.AllowDBNull = false;
                this.columnTemplateId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRow NewSchemaTemplateRow() {
                return ((SchemaTemplateRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SchemaTemplateRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SchemaTemplateRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SchemaTemplateRowChanged != null)) {
                    this.SchemaTemplateRowChanged(this, new SchemaTemplateRowChangeEvent(((SchemaTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SchemaTemplateRowChanging != null)) {
                    this.SchemaTemplateRowChanging(this, new SchemaTemplateRowChangeEvent(((SchemaTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SchemaTemplateRowDeleted != null)) {
                    this.SchemaTemplateRowDeleted(this, new SchemaTemplateRowChangeEvent(((SchemaTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SchemaTemplateRowDeleting != null)) {
                    this.SchemaTemplateRowDeleting(this, new SchemaTemplateRowChangeEvent(((SchemaTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSchemaTemplateRow(SchemaTemplateRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SchemaTemplateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SessionDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSessionId;
            
            private System.Data.DataColumn columnJobId;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnRevision;
            
            private System.Data.DataColumn columnStartTime;
            
            private System.Data.DataColumn columnEndTime;
            
            private System.Data.DataColumn columnNumItem;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionDataTable() {
                this.TableName = "Session";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SessionDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SessionDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SessionIdColumn {
                get {
                    return this.columnSessionId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JobIdColumn {
                get {
                    return this.columnJobId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn RevisionColumn {
                get {
                    return this.columnRevision;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn StartTimeColumn {
                get {
                    return this.columnStartTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn EndTimeColumn {
                get {
                    return this.columnEndTime;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NumItemColumn {
                get {
                    return this.columnNumItem;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionRow this[int index] {
                get {
                    return ((SessionRow)(this.Rows[index]));
                }
            }
            
            public event SessionRowChangeEventHandler SessionRowChanging;
            
            public event SessionRowChangeEventHandler SessionRowChanged;
            
            public event SessionRowChangeEventHandler SessionRowDeleting;
            
            public event SessionRowChangeEventHandler SessionRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSessionRow(SessionRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionRow AddSessionRow(JobRow parentJobRowByFK_Session_Job, UserRow parentUserRowByFK_Session_User, int Revision, System.DateTime StartTime, System.DateTime EndTime, int NumItem) {
                SessionRow rowSessionRow = ((SessionRow)(this.NewRow()));
                rowSessionRow.ItemArray = new object[] {
                        null,
                        parentJobRowByFK_Session_Job[0],
                        parentUserRowByFK_Session_User[0],
                        Revision,
                        StartTime,
                        EndTime,
                        NumItem};
                this.Rows.Add(rowSessionRow);
                return rowSessionRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionRow FindBySessionId(int SessionId) {
                return ((SessionRow)(this.Rows.Find(new object[] {
                            SessionId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SessionDataTable cln = ((SessionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SessionDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSessionId = base.Columns["SessionId"];
                this.columnJobId = base.Columns["JobId"];
                this.columnUserId = base.Columns["UserId"];
                this.columnRevision = base.Columns["Revision"];
                this.columnStartTime = base.Columns["StartTime"];
                this.columnEndTime = base.Columns["EndTime"];
                this.columnNumItem = base.Columns["NumItem"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSessionId = new System.Data.DataColumn("SessionId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSessionId);
                this.columnJobId = new System.Data.DataColumn("JobId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobId);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnRevision = new System.Data.DataColumn("Revision", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnRevision);
                this.columnStartTime = new System.Data.DataColumn("StartTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartTime);
                this.columnEndTime = new System.Data.DataColumn("EndTime", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnEndTime);
                this.columnNumItem = new System.Data.DataColumn("NumItem", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumItem);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnSessionId}, true));
                this.columnSessionId.AutoIncrement = true;
                this.columnSessionId.AllowDBNull = false;
                this.columnSessionId.ReadOnly = true;
                this.columnSessionId.Unique = true;
                this.columnJobId.AllowDBNull = false;
                this.columnUserId.AllowDBNull = false;
                this.columnRevision.AllowDBNull = false;
                this.columnStartTime.AllowDBNull = false;
                this.columnEndTime.AllowDBNull = false;
                this.columnNumItem.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionRow NewSessionRow() {
                return ((SessionRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SessionRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SessionRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SessionRowChanged != null)) {
                    this.SessionRowChanged(this, new SessionRowChangeEvent(((SessionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SessionRowChanging != null)) {
                    this.SessionRowChanging(this, new SessionRowChangeEvent(((SessionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SessionRowDeleted != null)) {
                    this.SessionRowDeleted(this, new SessionRowChangeEvent(((SessionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SessionRowDeleting != null)) {
                    this.SessionRowDeleting(this, new SessionRowChangeEvent(((SessionRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSessionRow(SessionRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SessionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SysIdDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnLastId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysIdDataTable() {
                this.TableName = "SysId";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SysIdDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SysIdDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LastIdColumn {
                get {
                    return this.columnLastId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysIdRow this[int index] {
                get {
                    return ((SysIdRow)(this.Rows[index]));
                }
            }
            
            public event SysIdRowChangeEventHandler SysIdRowChanging;
            
            public event SysIdRowChangeEventHandler SysIdRowChanged;
            
            public event SysIdRowChangeEventHandler SysIdRowDeleting;
            
            public event SysIdRowChangeEventHandler SysIdRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSysIdRow(SysIdRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysIdRow AddSysIdRow(int LastId) {
                SysIdRow rowSysIdRow = ((SysIdRow)(this.NewRow()));
                rowSysIdRow.ItemArray = new object[] {
                        LastId};
                this.Rows.Add(rowSysIdRow);
                return rowSysIdRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SysIdDataTable cln = ((SysIdDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SysIdDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLastId = base.Columns["LastId"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLastId = new System.Data.DataColumn("LastId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastId);
                this.columnLastId.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysIdRow NewSysIdRow() {
                return ((SysIdRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SysIdRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SysIdRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SysIdRowChanged != null)) {
                    this.SysIdRowChanged(this, new SysIdRowChangeEvent(((SysIdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SysIdRowChanging != null)) {
                    this.SysIdRowChanging(this, new SysIdRowChangeEvent(((SysIdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SysIdRowDeleted != null)) {
                    this.SysIdRowDeleted(this, new SysIdRowChangeEvent(((SysIdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SysIdRowDeleting != null)) {
                    this.SysIdRowDeleting(this, new SysIdRowChangeEvent(((SysIdRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSysIdRow(SysIdRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SysIdDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TemplateDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTemplateId;
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnTemplateFormat;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateDataTable() {
                this.TableName = "Template";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TemplateDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TemplateIdColumn {
                get {
                    return this.columnTemplateId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TemplateFormatColumn {
                get {
                    return this.columnTemplateFormat;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow this[int index] {
                get {
                    return ((TemplateRow)(this.Rows[index]));
                }
            }
            
            public event TemplateRowChangeEventHandler TemplateRowChanging;
            
            public event TemplateRowChangeEventHandler TemplateRowChanged;
            
            public event TemplateRowChangeEventHandler TemplateRowDeleting;
            
            public event TemplateRowChangeEventHandler TemplateRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemplateRow(TemplateRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow AddTemplateRow(int TemplateId, string Name, string TemplateFormat) {
                TemplateRow rowTemplateRow = ((TemplateRow)(this.NewRow()));
                rowTemplateRow.ItemArray = new object[] {
                        TemplateId,
                        Name,
                        TemplateFormat};
                this.Rows.Add(rowTemplateRow);
                return rowTemplateRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow FindByTemplateId(int TemplateId) {
                return ((TemplateRow)(this.Rows.Find(new object[] {
                            TemplateId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TemplateDataTable cln = ((TemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TemplateDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTemplateId = base.Columns["TemplateId"];
                this.columnName = base.Columns["Name"];
                this.columnTemplateFormat = base.Columns["TemplateFormat"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTemplateId = new System.Data.DataColumn("TemplateId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnTemplateFormat = new System.Data.DataColumn("TemplateFormat", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateFormat);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnTemplateId}, true));
                this.columnTemplateId.AllowDBNull = false;
                this.columnTemplateId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 80;
                this.columnTemplateFormat.AllowDBNull = false;
                this.columnTemplateFormat.MaxLength = 64;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow NewTemplateRow() {
                return ((TemplateRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TemplateRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TemplateRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TemplateRowChanged != null)) {
                    this.TemplateRowChanged(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TemplateRowChanging != null)) {
                    this.TemplateRowChanging(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TemplateRowDeleted != null)) {
                    this.TemplateRowDeleted(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TemplateRowDeleting != null)) {
                    this.TemplateRowDeleting(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemplateRow(TemplateRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TemplateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ThemeDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnThemeId;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeDataTable() {
                this.TableName = "Theme";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ThemeDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ThemeDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ThemeIdColumn {
                get {
                    return this.columnThemeId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeRow this[int index] {
                get {
                    return ((ThemeRow)(this.Rows[index]));
                }
            }
            
            public event ThemeRowChangeEventHandler ThemeRowChanging;
            
            public event ThemeRowChangeEventHandler ThemeRowChanged;
            
            public event ThemeRowChangeEventHandler ThemeRowDeleting;
            
            public event ThemeRowChangeEventHandler ThemeRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddThemeRow(ThemeRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeRow AddThemeRow(int ThemeId, string Name) {
                ThemeRow rowThemeRow = ((ThemeRow)(this.NewRow()));
                rowThemeRow.ItemArray = new object[] {
                        ThemeId,
                        Name};
                this.Rows.Add(rowThemeRow);
                return rowThemeRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeRow FindByThemeId(int ThemeId) {
                return ((ThemeRow)(this.Rows.Find(new object[] {
                            ThemeId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ThemeDataTable cln = ((ThemeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ThemeDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnThemeId = base.Columns["ThemeId"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnThemeId = new System.Data.DataColumn("ThemeId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnThemeId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnThemeId}, true));
                this.columnThemeId.AllowDBNull = false;
                this.columnThemeId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeRow NewThemeRow() {
                return ((ThemeRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ThemeRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ThemeRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ThemeRowChanged != null)) {
                    this.ThemeRowChanged(this, new ThemeRowChangeEvent(((ThemeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ThemeRowChanging != null)) {
                    this.ThemeRowChanging(this, new ThemeRowChangeEvent(((ThemeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ThemeRowDeleted != null)) {
                    this.ThemeRowDeleted(this, new ThemeRowChangeEvent(((ThemeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ThemeRowDeleting != null)) {
                    this.ThemeRowDeleting(this, new ThemeRowChangeEvent(((ThemeRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveThemeRow(ThemeRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ThemeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserJobDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnJobId;
            
            private System.Data.DataColumn columnLastRevision;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserJobDataTable() {
                this.TableName = "UserJob";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserJobDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserJobDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn JobIdColumn {
                get {
                    return this.columnJobId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn LastRevisionColumn {
                get {
                    return this.columnLastRevision;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserJobRow this[int index] {
                get {
                    return ((UserJobRow)(this.Rows[index]));
                }
            }
            
            public event UserJobRowChangeEventHandler UserJobRowChanging;
            
            public event UserJobRowChangeEventHandler UserJobRowChanged;
            
            public event UserJobRowChangeEventHandler UserJobRowDeleting;
            
            public event UserJobRowChangeEventHandler UserJobRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserJobRow(UserJobRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserJobRow AddUserJobRow(UserRow parentUserRowByFK_UserJob_User, JobRow parentJobRowByFK_UserJob_Job, int LastRevision) {
                UserJobRow rowUserJobRow = ((UserJobRow)(this.NewRow()));
                rowUserJobRow.ItemArray = new object[] {
                        parentUserRowByFK_UserJob_User[0],
                        parentJobRowByFK_UserJob_Job[0],
                        LastRevision};
                this.Rows.Add(rowUserJobRow);
                return rowUserJobRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserJobRow FindByUserIdJobId(int UserId, int JobId) {
                return ((UserJobRow)(this.Rows.Find(new object[] {
                            UserId,
                            JobId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UserJobDataTable cln = ((UserJobDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UserJobDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnJobId = base.Columns["JobId"];
                this.columnLastRevision = base.Columns["LastRevision"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnJobId = new System.Data.DataColumn("JobId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobId);
                this.columnLastRevision = new System.Data.DataColumn("LastRevision", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastRevision);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUserId,
                                this.columnJobId}, true));
                this.columnUserId.AllowDBNull = false;
                this.columnJobId.AllowDBNull = false;
                this.columnLastRevision.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserJobRow NewUserJobRow() {
                return ((UserJobRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UserJobRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UserJobRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserJobRowChanged != null)) {
                    this.UserJobRowChanged(this, new UserJobRowChangeEvent(((UserJobRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserJobRowChanging != null)) {
                    this.UserJobRowChanging(this, new UserJobRowChangeEvent(((UserJobRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserJobRowDeleted != null)) {
                    this.UserJobRowDeleted(this, new UserJobRowChangeEvent(((UserJobRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserJobRowDeleting != null)) {
                    this.UserJobRowDeleting(this, new UserJobRowChangeEvent(((UserJobRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserJobRow(UserJobRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserJobDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserDataTable() {
                this.TableName = "User";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow this[int index] {
                get {
                    return ((UserRow)(this.Rows[index]));
                }
            }
            
            public event UserRowChangeEventHandler UserRowChanging;
            
            public event UserRowChangeEventHandler UserRowChanged;
            
            public event UserRowChangeEventHandler UserRowDeleting;
            
            public event UserRowChangeEventHandler UserRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserRow(UserRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow AddUserRow(string Name) {
                UserRow rowUserRow = ((UserRow)(this.NewRow()));
                rowUserRow.ItemArray = new object[] {
                        null,
                        Name};
                this.Rows.Add(rowUserRow);
                return rowUserRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow FindByUserId(int UserId) {
                return ((UserRow)(this.Rows.Find(new object[] {
                            UserId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                UserDataTable cln = ((UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new UserDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserId = base.Columns["UserId"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnUserId}, true));
                this.columnUserId.AutoIncrement = true;
                this.columnUserId.AllowDBNull = false;
                this.columnUserId.ReadOnly = true;
                this.columnUserId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow NewUserRow() {
                return ((UserRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new UserRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(UserRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserRowChanged != null)) {
                    this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserRowChanging != null)) {
                    this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserRowDeleted != null)) {
                    this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserRowDeleting != null)) {
                    this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserRow(UserRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ZoneDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnZoneId;
            
            private System.Data.DataColumn columnName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneDataTable() {
                this.TableName = "Zone";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ZoneDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ZoneDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ZoneIdColumn {
                get {
                    return this.columnZoneId;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneRow this[int index] {
                get {
                    return ((ZoneRow)(this.Rows[index]));
                }
            }
            
            public event ZoneRowChangeEventHandler ZoneRowChanging;
            
            public event ZoneRowChangeEventHandler ZoneRowChanged;
            
            public event ZoneRowChangeEventHandler ZoneRowDeleting;
            
            public event ZoneRowChangeEventHandler ZoneRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddZoneRow(ZoneRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneRow AddZoneRow(int ZoneId, string Name) {
                ZoneRow rowZoneRow = ((ZoneRow)(this.NewRow()));
                rowZoneRow.ItemArray = new object[] {
                        ZoneId,
                        Name};
                this.Rows.Add(rowZoneRow);
                return rowZoneRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneRow FindByZoneId(int ZoneId) {
                return ((ZoneRow)(this.Rows.Find(new object[] {
                            ZoneId})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ZoneDataTable cln = ((ZoneDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ZoneDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnZoneId = base.Columns["ZoneId"];
                this.columnName = base.Columns["Name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnZoneId = new System.Data.DataColumn("ZoneId", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnZoneId);
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnZoneId}, true));
                this.columnZoneId.AllowDBNull = false;
                this.columnZoneId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 100;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneRow NewZoneRow() {
                return ((ZoneRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ZoneRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ZoneRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ZoneRowChanged != null)) {
                    this.ZoneRowChanged(this, new ZoneRowChangeEvent(((ZoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ZoneRowChanging != null)) {
                    this.ZoneRowChanging(this, new ZoneRowChangeEvent(((ZoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ZoneRowDeleted != null)) {
                    this.ZoneRowDeleted(this, new ZoneRowChangeEvent(((ZoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ZoneRowDeleting != null)) {
                    this.ZoneRowDeleting(this, new ZoneRowChangeEvent(((ZoneRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveZoneRow(ZoneRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                BacksightDataSet ds = new BacksightDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ZoneDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EditRow : System.Data.DataRow {
            
            private EditDataTable tableEdit;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EditRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEdit = ((EditDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SessionId {
                get {
                    return ((int)(this[this.tableEdit.SessionIdColumn]));
                }
                set {
                    this[this.tableEdit.SessionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EditSequence {
                get {
                    return ((int)(this[this.tableEdit.EditSequenceColumn]));
                }
                set {
                    this[this.tableEdit.EditSequenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Data {
                get {
                    return ((string)(this[this.tableEdit.DataColumn]));
                }
                set {
                    this[this.tableEdit.DataColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionRow SessionRow {
                get {
                    return ((SessionRow)(this.GetParentRow(this.Table.ParentRelations["FK_Edit_Session"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Edit_Session"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EntityTypeRow : System.Data.DataRow {
            
            private EntityTypeDataTable tableEntityType;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntityTypeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEntityType = ((EntityTypeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EntityId {
                get {
                    return ((int)(this[this.tableEntityType.EntityIdColumn]));
                }
                set {
                    this[this.tableEntityType.EntityIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableEntityType.NameColumn]));
                }
                set {
                    this[this.tableEntityType.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPoint {
                get {
                    return ((string)(this[this.tableEntityType.IsPointColumn]));
                }
                set {
                    this[this.tableEntityType.IsPointColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsLine {
                get {
                    return ((string)(this[this.tableEntityType.IsLineColumn]));
                }
                set {
                    this[this.tableEntityType.IsLineColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsLineTopological {
                get {
                    return ((string)(this[this.tableEntityType.IsLineTopologicalColumn]));
                }
                set {
                    this[this.tableEntityType.IsLineTopologicalColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsPolygon {
                get {
                    return ((string)(this[this.tableEntityType.IsPolygonColumn]));
                }
                set {
                    this[this.tableEntityType.IsPolygonColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsText {
                get {
                    return ((string)(this[this.tableEntityType.IsTextColumn]));
                }
                set {
                    this[this.tableEntityType.IsTextColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FontId {
                get {
                    return ((int)(this[this.tableEntityType.FontIdColumn]));
                }
                set {
                    this[this.tableEntityType.FontIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LayerId {
                get {
                    return ((int)(this[this.tableEntityType.LayerIdColumn]));
                }
                set {
                    this[this.tableEntityType.LayerIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupId {
                get {
                    return ((int)(this[this.tableEntityType.GroupIdColumn]));
                }
                set {
                    this[this.tableEntityType.GroupIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontRow FontRow {
                get {
                    return ((FontRow)(this.GetParentRow(this.Table.ParentRelations["FK_EntityType_Font"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_EntityType_Font"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow IdGroupRow {
                get {
                    return ((IdGroupRow)(this.GetParentRow(this.Table.ParentRelations["FK_EntityType_IdGroup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_EntityType_IdGroup"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow LayerRow {
                get {
                    return ((LayerRow)(this.GetParentRow(this.Table.ParentRelations["FK_EntityType_Layer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_EntityType_Layer"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeSchemaRow[] GetEntityTypeSchemaRows() {
                return ((EntityTypeSchemaRow[])(base.GetChildRows(this.Table.ChildRelations["FK_EntityTypeSchema_EntityType"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow[] GetLayerRowsByFK_Layer_EntityType1() {
                return ((LayerRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Layer_EntityType1"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow[] GetLayerRowsByFK_Layer_EntityType2() {
                return ((LayerRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Layer_EntityType2"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow[] GetLayerRowsByFK_Layer_EntityType3() {
                return ((LayerRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Layer_EntityType3"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow[] GetLayerRowsByFK_Layer_EntityType4() {
                return ((LayerRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Layer_EntityType4"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EntityTypeSchemaRow : System.Data.DataRow {
            
            private EntityTypeSchemaDataTable tableEntityTypeSchema;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EntityTypeSchemaRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEntityTypeSchema = ((EntityTypeSchemaDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EntityId {
                get {
                    return ((int)(this[this.tableEntityTypeSchema.EntityIdColumn]));
                }
                set {
                    this[this.tableEntityTypeSchema.EntityIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SchemaId {
                get {
                    return ((int)(this[this.tableEntityTypeSchema.SchemaIdColumn]));
                }
                set {
                    this[this.tableEntityTypeSchema.SchemaIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeRow EntityTypesRow {
                get {
                    return ((EntityTypeRow)(this.GetParentRow(this.Table.ParentRelations["FK_EntityTypeSchema_EntityType"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_EntityTypeSchema_EntityType"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow SchemaRow {
                get {
                    return ((SchemaRow)(this.GetParentRow(this.Table.ParentRelations["FK_EntityTypeSchema_Schema"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_EntityTypeSchema_Schema"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FontRow : System.Data.DataRow {
            
            private FontDataTable tableFont;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FontRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFont = ((FontDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FontId {
                get {
                    return ((int)(this[this.tableFont.FontIdColumn]));
                }
                set {
                    this[this.tableFont.FontIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TypeFace {
                get {
                    return ((string)(this[this.tableFont.TypeFaceColumn]));
                }
                set {
                    this[this.tableFont.TypeFaceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float PointSize {
                get {
                    return ((float)(this[this.tableFont.PointSizeColumn]));
                }
                set {
                    this[this.tableFont.PointSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsBold {
                get {
                    return ((string)(this[this.tableFont.IsBoldColumn]));
                }
                set {
                    this[this.tableFont.IsBoldColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsItalic {
                get {
                    return ((string)(this[this.tableFont.IsItalicColumn]));
                }
                set {
                    this[this.tableFont.IsItalicColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IsUnderline {
                get {
                    return ((string)(this[this.tableFont.IsUnderlineColumn]));
                }
                set {
                    this[this.tableFont.IsUnderlineColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FontFile {
                get {
                    return ((string)(this[this.tableFont.FontFileColumn]));
                }
                set {
                    this[this.tableFont.FontFileColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeRow[] GetEntityTypesRows() {
                return ((EntityTypeRow[])(base.GetChildRows(this.Table.ChildRelations["FK_EntityType_Font"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IdAllocationRow : System.Data.DataRow {
            
            private IdAllocationDataTable tableIdAllocation;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IdAllocationRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIdAllocation = ((IdAllocationDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LowestId {
                get {
                    return ((int)(this[this.tableIdAllocation.LowestIdColumn]));
                }
                set {
                    this[this.tableIdAllocation.LowestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HighestId {
                get {
                    return ((int)(this[this.tableIdAllocation.HighestIdColumn]));
                }
                set {
                    this[this.tableIdAllocation.HighestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupId {
                get {
                    return ((int)(this[this.tableIdAllocation.GroupIdColumn]));
                }
                set {
                    this[this.tableIdAllocation.GroupIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobId {
                get {
                    return ((int)(this[this.tableIdAllocation.JobIdColumn]));
                }
                set {
                    this[this.tableIdAllocation.JobIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableIdAllocation.UserIdColumn]));
                }
                set {
                    this[this.tableIdAllocation.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeAllocated {
                get {
                    return ((System.DateTime)(this[this.tableIdAllocation.TimeAllocatedColumn]));
                }
                set {
                    this[this.tableIdAllocation.TimeAllocatedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumUsed {
                get {
                    return ((int)(this[this.tableIdAllocation.NumUsedColumn]));
                }
                set {
                    this[this.tableIdAllocation.NumUsedColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow IdGroupRow {
                get {
                    return ((IdGroupRow)(this.GetParentRow(this.Table.ParentRelations["FK_IdAllocation_IdGroup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_IdAllocation_IdGroup"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow JobRow {
                get {
                    return ((JobRow)(this.GetParentRow(this.Table.ParentRelations["FK_IdAllocation_Job"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_IdAllocation_Job"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow UserRow {
                get {
                    return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FK_IdAllocation_User"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_IdAllocation_User"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IdFreeRow : System.Data.DataRow {
            
            private IdFreeDataTable tableIdFree;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IdFreeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIdFree = ((IdFreeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupId {
                get {
                    return ((int)(this[this.tableIdFree.GroupIdColumn]));
                }
                set {
                    this[this.tableIdFree.GroupIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LowestId {
                get {
                    return ((int)(this[this.tableIdFree.LowestIdColumn]));
                }
                set {
                    this[this.tableIdFree.LowestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HighestId {
                get {
                    return ((int)(this[this.tableIdFree.HighestIdColumn]));
                }
                set {
                    this[this.tableIdFree.HighestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow IdGroupRow {
                get {
                    return ((IdGroupRow)(this.GetParentRow(this.Table.ParentRelations["FK_IdFree_IdGroup"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_IdFree_IdGroup"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IdGroupRow : System.Data.DataRow {
            
            private IdGroupDataTable tableIdGroup;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IdGroupRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIdGroup = ((IdGroupDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupId {
                get {
                    return ((int)(this[this.tableIdGroup.GroupIdColumn]));
                }
                set {
                    this[this.tableIdGroup.GroupIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableIdGroup.NameColumn]));
                }
                set {
                    this[this.tableIdGroup.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LowestId {
                get {
                    return ((int)(this[this.tableIdGroup.LowestIdColumn]));
                }
                set {
                    this[this.tableIdGroup.LowestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int HighestId {
                get {
                    return ((int)(this[this.tableIdGroup.HighestIdColumn]));
                }
                set {
                    this[this.tableIdGroup.HighestIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PacketSize {
                get {
                    return ((int)(this[this.tableIdGroup.PacketSizeColumn]));
                }
                set {
                    this[this.tableIdGroup.PacketSizeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CheckDigit {
                get {
                    return ((string)(this[this.tableIdGroup.CheckDigitColumn]));
                }
                set {
                    this[this.tableIdGroup.CheckDigitColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KeyFormat {
                get {
                    return ((string)(this[this.tableIdGroup.KeyFormatColumn]));
                }
                set {
                    this[this.tableIdGroup.KeyFormatColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeRow[] GetEntityTypesRows() {
                return ((EntityTypeRow[])(base.GetChildRows(this.Table.ChildRelations["FK_EntityType_IdGroup"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRow[] GetIdAllocationsRows() {
                return ((IdAllocationRow[])(base.GetChildRows(this.Table.ChildRelations["FK_IdAllocation_IdGroup"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeRow[] GetIdFreeRows() {
                return ((IdFreeRow[])(base.GetChildRows(this.Table.ChildRelations["FK_IdFree_IdGroup"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JobRow : System.Data.DataRow {
            
            private JobDataTable tableJob;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JobRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJob = ((JobDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobId {
                get {
                    return ((int)(this[this.tableJob.JobIdColumn]));
                }
                set {
                    this[this.tableJob.JobIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableJob.NameColumn]));
                }
                set {
                    this[this.tableJob.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ZoneId {
                get {
                    return ((int)(this[this.tableJob.ZoneIdColumn]));
                }
                set {
                    this[this.tableJob.ZoneIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LayerId {
                get {
                    return ((int)(this[this.tableJob.LayerIdColumn]));
                }
                set {
                    this[this.tableJob.LayerIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow LayerRow {
                get {
                    return ((LayerRow)(this.GetParentRow(this.Table.ParentRelations["FK_Job_Layer"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Job_Layer"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneRow ZoneRow {
                get {
                    return ((ZoneRow)(this.GetParentRow(this.Table.ParentRelations["FK_Job_Zone"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Job_Zone"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRow[] GetIdAllocationsRows() {
                return ((IdAllocationRow[])(base.GetChildRows(this.Table.ChildRelations["FK_IdAllocation_Job"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionRow[] GetSessionRows() {
                return ((SessionRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Session_Job"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserJobRow[] GetUserJobRows() {
                return ((UserJobRow[])(base.GetChildRows(this.Table.ChildRelations["FK_UserJob_Job"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LastRevisionRow : System.Data.DataRow {
            
            private LastRevisionDataTable tableLastRevision;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LastRevisionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLastRevision = ((LastRevisionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Id {
                get {
                    return ((int)(this[this.tableLastRevision.IdColumn]));
                }
                set {
                    this[this.tableLastRevision.IdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime RevisionTime {
                get {
                    return ((System.DateTime)(this[this.tableLastRevision.RevisionTimeColumn]));
                }
                set {
                    this[this.tableLastRevision.RevisionTimeColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LayerRow : System.Data.DataRow {
            
            private LayerDataTable tableLayer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LayerRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLayer = ((LayerDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LayerId {
                get {
                    return ((int)(this[this.tableLayer.LayerIdColumn]));
                }
                set {
                    this[this.tableLayer.LayerIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLayer.NameColumn]));
                }
                set {
                    this[this.tableLayer.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ThemeId {
                get {
                    return ((int)(this[this.tableLayer.ThemeIdColumn]));
                }
                set {
                    this[this.tableLayer.ThemeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ThemeSequence {
                get {
                    return ((int)(this[this.tableLayer.ThemeSequenceColumn]));
                }
                set {
                    this[this.tableLayer.ThemeSequenceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DefaultPointId {
                get {
                    return ((int)(this[this.tableLayer.DefaultPointIdColumn]));
                }
                set {
                    this[this.tableLayer.DefaultPointIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DefaultLineId {
                get {
                    return ((int)(this[this.tableLayer.DefaultLineIdColumn]));
                }
                set {
                    this[this.tableLayer.DefaultLineIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DefaultPolygonId {
                get {
                    return ((int)(this[this.tableLayer.DefaultPolygonIdColumn]));
                }
                set {
                    this[this.tableLayer.DefaultPolygonIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DefaultTextId {
                get {
                    return ((int)(this[this.tableLayer.DefaultTextIdColumn]));
                }
                set {
                    this[this.tableLayer.DefaultTextIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeRow EntityTypesRowByFK_Layer_EntityType1 {
                get {
                    return ((EntityTypeRow)(this.GetParentRow(this.Table.ParentRelations["FK_Layer_EntityType1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Layer_EntityType1"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeRow EntityTypesRowByFK_Layer_EntityType2 {
                get {
                    return ((EntityTypeRow)(this.GetParentRow(this.Table.ParentRelations["FK_Layer_EntityType2"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Layer_EntityType2"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeRow EntityTypesRowByFK_Layer_EntityType3 {
                get {
                    return ((EntityTypeRow)(this.GetParentRow(this.Table.ParentRelations["FK_Layer_EntityType3"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Layer_EntityType3"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeRow EntityTypesRowByFK_Layer_EntityType4 {
                get {
                    return ((EntityTypeRow)(this.GetParentRow(this.Table.ParentRelations["FK_Layer_EntityType4"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Layer_EntityType4"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeRow ThemeRow {
                get {
                    return ((ThemeRow)(this.GetParentRow(this.Table.ParentRelations["FK_Layer_Theme"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Layer_Theme"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeRow[] GetEntityTypesRows() {
                return ((EntityTypeRow[])(base.GetChildRows(this.Table.ChildRelations["FK_EntityType_Layer"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow[] GetJobsRows() {
                return ((JobRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Job_Layer"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PropertyRow : System.Data.DataRow {
            
            private PropertyDataTable tableProperty;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PropertyRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProperty = ((PropertyDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableProperty.NameColumn]));
                }
                set {
                    this[this.tableProperty.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    return ((string)(this[this.tableProperty.ValueColumn]));
                }
                set {
                    this[this.tableProperty.ValueColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableProperty.DescriptionColumn]));
                }
                set {
                    this[this.tableProperty.DescriptionColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SchemaRow : System.Data.DataRow {
            
            private SchemaDataTable tableSchema;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchemaRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSchema = ((SchemaDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SchemaId {
                get {
                    return ((int)(this[this.tableSchema.SchemaIdColumn]));
                }
                set {
                    this[this.tableSchema.SchemaIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableSchema.NameColumn]));
                }
                set {
                    this[this.tableSchema.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TableName {
                get {
                    return ((string)(this[this.tableSchema.TableNameColumn]));
                }
                set {
                    this[this.tableSchema.TableNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeSchemaRow[] GetEntityTypeSchemasRows() {
                return ((EntityTypeSchemaRow[])(base.GetChildRows(this.Table.ChildRelations["FK_EntityTypeSchema_Schema"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRow[] GetSchemaTemplateRows() {
                return ((SchemaTemplateRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SchemaTemplate_Schema"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SchemaTemplateRow : System.Data.DataRow {
            
            private SchemaTemplateDataTable tableSchemaTemplate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SchemaTemplateRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSchemaTemplate = ((SchemaTemplateDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SchemaId {
                get {
                    return ((int)(this[this.tableSchemaTemplate.SchemaIdColumn]));
                }
                set {
                    this[this.tableSchemaTemplate.SchemaIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateId {
                get {
                    return ((int)(this[this.tableSchemaTemplate.TemplateIdColumn]));
                }
                set {
                    this[this.tableSchemaTemplate.TemplateIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow SchemasRow {
                get {
                    return ((SchemaRow)(this.GetParentRow(this.Table.ParentRelations["FK_SchemaTemplate_Schema"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SchemaTemplate_Schema"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow TemplateRow {
                get {
                    return ((TemplateRow)(this.GetParentRow(this.Table.ParentRelations["FK_SchemaTemplate_Template"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_SchemaTemplate_Template"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SessionRow : System.Data.DataRow {
            
            private SessionDataTable tableSession;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SessionRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSession = ((SessionDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SessionId {
                get {
                    return ((int)(this[this.tableSession.SessionIdColumn]));
                }
                set {
                    this[this.tableSession.SessionIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobId {
                get {
                    return ((int)(this[this.tableSession.JobIdColumn]));
                }
                set {
                    this[this.tableSession.JobIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableSession.UserIdColumn]));
                }
                set {
                    this[this.tableSession.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Revision {
                get {
                    return ((int)(this[this.tableSession.RevisionColumn]));
                }
                set {
                    this[this.tableSession.RevisionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartTime {
                get {
                    return ((System.DateTime)(this[this.tableSession.StartTimeColumn]));
                }
                set {
                    this[this.tableSession.StartTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EndTime {
                get {
                    return ((System.DateTime)(this[this.tableSession.EndTimeColumn]));
                }
                set {
                    this[this.tableSession.EndTimeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NumItem {
                get {
                    return ((int)(this[this.tableSession.NumItemColumn]));
                }
                set {
                    this[this.tableSession.NumItemColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow JobsRow {
                get {
                    return ((JobRow)(this.GetParentRow(this.Table.ParentRelations["FK_Session_Job"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Session_Job"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow UserRow {
                get {
                    return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FK_Session_User"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Session_User"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditRow[] GetEditsRows() {
                return ((EditRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Edit_Session"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SysIdRow : System.Data.DataRow {
            
            private SysIdDataTable tableSysId;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SysIdRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSysId = ((SysIdDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LastId {
                get {
                    return ((int)(this[this.tableSysId.LastIdColumn]));
                }
                set {
                    this[this.tableSysId.LastIdColumn] = value;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TemplateRow : System.Data.DataRow {
            
            private TemplateDataTable tableTemplate;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemplate = ((TemplateDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateId {
                get {
                    return ((int)(this[this.tableTemplate.TemplateIdColumn]));
                }
                set {
                    this[this.tableTemplate.TemplateIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTemplate.NameColumn]));
                }
                set {
                    this[this.tableTemplate.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TemplateFormat {
                get {
                    return ((string)(this[this.tableTemplate.TemplateFormatColumn]));
                }
                set {
                    this[this.tableTemplate.TemplateFormatColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRow[] GetSchemaTemplatesRows() {
                return ((SchemaTemplateRow[])(base.GetChildRows(this.Table.ChildRelations["FK_SchemaTemplate_Template"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ThemeRow : System.Data.DataRow {
            
            private ThemeDataTable tableTheme;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ThemeRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTheme = ((ThemeDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ThemeId {
                get {
                    return ((int)(this[this.tableTheme.ThemeIdColumn]));
                }
                set {
                    this[this.tableTheme.ThemeIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableTheme.NameColumn]));
                }
                set {
                    this[this.tableTheme.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow[] GetLayersRows() {
                return ((LayerRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Layer_Theme"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserJobRow : System.Data.DataRow {
            
            private UserJobDataTable tableUserJob;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserJobRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserJob = ((UserJobDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableUserJob.UserIdColumn]));
                }
                set {
                    this[this.tableUserJob.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobId {
                get {
                    return ((int)(this[this.tableUserJob.JobIdColumn]));
                }
                set {
                    this[this.tableUserJob.JobIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LastRevision {
                get {
                    return ((int)(this[this.tableUserJob.LastRevisionColumn]));
                }
                set {
                    this[this.tableUserJob.LastRevisionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow JobsRow {
                get {
                    return ((JobRow)(this.GetParentRow(this.Table.ParentRelations["FK_UserJob_Job"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_UserJob_Job"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow UserRow {
                get {
                    return ((UserRow)(this.GetParentRow(this.Table.ParentRelations["FK_UserJob_User"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_UserJob_User"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserRow : System.Data.DataRow {
            
            private UserDataTable tableUser;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUser = ((UserDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserId {
                get {
                    return ((int)(this[this.tableUser.UserIdColumn]));
                }
                set {
                    this[this.tableUser.UserIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableUser.NameColumn]));
                }
                set {
                    this[this.tableUser.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRow[] GetIdAllocationsRows() {
                return ((IdAllocationRow[])(base.GetChildRows(this.Table.ChildRelations["FK_IdAllocation_User"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionRow[] GetSessionsRows() {
                return ((SessionRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Session_User"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserJobRow[] GetUserJobsRows() {
                return ((UserJobRow[])(base.GetChildRows(this.Table.ChildRelations["FK_UserJob_User"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ZoneRow : System.Data.DataRow {
            
            private ZoneDataTable tableZone;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ZoneRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableZone = ((ZoneDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ZoneId {
                get {
                    return ((int)(this[this.tableZone.ZoneIdColumn]));
                }
                set {
                    this[this.tableZone.ZoneIdColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableZone.NameColumn]));
                }
                set {
                    this[this.tableZone.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow[] GetJobsRows() {
                return ((JobRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Job_Zone"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EditRowChangeEvent : System.EventArgs {
            
            private EditRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditRowChangeEvent(EditRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EditRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EntityTypeRowChangeEvent : System.EventArgs {
            
            private EntityTypeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeRowChangeEvent(EntityTypeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EntityTypeSchemaRowChangeEvent : System.EventArgs {
            
            private EntityTypeSchemaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeSchemaRowChangeEvent(EntityTypeSchemaRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EntityTypeSchemaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FontRowChangeEvent : System.EventArgs {
            
            private FontRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontRowChangeEvent(FontRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FontRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IdAllocationRowChangeEvent : System.EventArgs {
            
            private IdAllocationRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRowChangeEvent(IdAllocationRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdAllocationRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IdFreeRowChangeEvent : System.EventArgs {
            
            private IdFreeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeRowChangeEvent(IdFreeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdFreeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IdGroupRowChangeEvent : System.EventArgs {
            
            private IdGroupRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRowChangeEvent(IdGroupRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IdGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JobRowChangeEvent : System.EventArgs {
            
            private JobRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRowChangeEvent(JobRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LastRevisionRowChangeEvent : System.EventArgs {
            
            private LastRevisionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LastRevisionRowChangeEvent(LastRevisionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LastRevisionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LayerRowChangeEvent : System.EventArgs {
            
            private LayerRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRowChangeEvent(LayerRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayerRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PropertyRowChangeEvent : System.EventArgs {
            
            private PropertyRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRowChangeEvent(PropertyRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PropertyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SchemaRowChangeEvent : System.EventArgs {
            
            private SchemaRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRowChangeEvent(SchemaRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SchemaTemplateRowChangeEvent : System.EventArgs {
            
            private SchemaTemplateRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRowChangeEvent(SchemaTemplateRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SchemaTemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SessionRowChangeEvent : System.EventArgs {
            
            private SessionRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionRowChangeEvent(SessionRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SessionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SysIdRowChangeEvent : System.EventArgs {
            
            private SysIdRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysIdRowChangeEvent(SysIdRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SysIdRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TemplateRowChangeEvent : System.EventArgs {
            
            private TemplateRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRowChangeEvent(TemplateRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ThemeRowChangeEvent : System.EventArgs {
            
            private ThemeRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeRowChangeEvent(ThemeRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ThemeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserJobRowChangeEvent : System.EventArgs {
            
            private UserJobRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserJobRowChangeEvent(UserJobRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserJobRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserRowChangeEvent : System.EventArgs {
            
            private UserRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRowChangeEvent(UserRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ZoneRowChangeEvent : System.EventArgs {
            
            private ZoneRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneRowChangeEvent(ZoneRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ZoneRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Backsight.Data.BacksightDataSetTableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EditTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EditTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Edit";
            tableMapping.ColumnMappings.Add("SessionId", "SessionId");
            tableMapping.ColumnMappings.Add("EditSequence", "EditSequence");
            tableMapping.ColumnMappings.Add("Data", "Data");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Edits] WHERE (([SessionId] = @Original_SessionId) AND ([EditSe" +
                "quence] = @Original_EditSequence))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SessionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SessionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EditSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EditSequence", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Edits] ([SessionId], [EditSequence], [Data]) VALUES (@SessionI" +
                "d, @EditSequence, @Data);\r\nSELECT SessionId, EditSequence, Data FROM Edits WHERE" +
                " (EditSequence = @EditSequence) AND (SessionId = @SessionId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SessionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SessionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EditSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EditSequence", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Data", System.Data.SqlDbType.Xml, 0, System.Data.ParameterDirection.Input, 0, 0, "Data", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Edits] SET [SessionId] = @SessionId, [EditSequence] = @EditSequence, [Data] = @Data WHERE (([SessionId] = @Original_SessionId) AND ([EditSequence] = @Original_EditSequence));
SELECT SessionId, EditSequence, Data FROM Edits WHERE (EditSequence = @EditSequence) AND (SessionId = @SessionId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SessionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SessionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EditSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EditSequence", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Data", System.Data.SqlDbType.Xml, 0, System.Data.ParameterDirection.Input, 0, 0, "Data", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SessionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SessionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EditSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EditSequence", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SessionId, EditSequence, Data FROM dbo.Edits";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.EditDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.EditDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.EditDataTable dataTable = new BacksightDataSet.EditDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.EditDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Edit");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SessionId, int Original_EditSequence) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SessionId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_EditSequence));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SessionId, int EditSequence, object Data) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SessionId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(EditSequence));
            if ((Data == null)) {
                throw new System.ArgumentNullException("Data");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((object)(Data));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int SessionId, int EditSequence, object Data, int Original_SessionId, int Original_EditSequence) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SessionId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(EditSequence));
            if ((Data == null)) {
                throw new System.ArgumentNullException("Data");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((object)(Data));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_SessionId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_EditSequence));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EntityTypeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EntityTypeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EntityType";
            tableMapping.ColumnMappings.Add("EntityId", "EntityId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("IsPoint", "IsPoint");
            tableMapping.ColumnMappings.Add("IsLine", "IsLine");
            tableMapping.ColumnMappings.Add("IsLineTopological", "IsLineTopological");
            tableMapping.ColumnMappings.Add("IsPolygon", "IsPolygon");
            tableMapping.ColumnMappings.Add("IsText", "IsText");
            tableMapping.ColumnMappings.Add("FontId", "FontId");
            tableMapping.ColumnMappings.Add("LayerId", "LayerId");
            tableMapping.ColumnMappings.Add("GroupId", "GroupId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[EntityTypes] WHERE (([EntityId] = @Original_EntityId) AND ([Name] = @Original_Name) AND ([IsPoint] = @Original_IsPoint) AND ([IsLine] = @Original_IsLine) AND ([IsLineTopological] = @Original_IsLineTopological) AND ([IsPolygon] = @Original_IsPolygon) AND ([IsText] = @Original_IsText) AND ([FontId] = @Original_FontId) AND ([LayerId] = @Original_LayerId) AND ([GroupId] = @Original_GroupId))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsPoint", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPoint", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsLine", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLine", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsLineTopological", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLineTopological", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsPolygon", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPolygon", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsText", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsText", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[EntityTypes] ([EntityId], [Name], [IsPoint], [IsLine], [IsLineTopological], [IsPolygon], [IsText], [FontId], [LayerId], [GroupId]) VALUES (@EntityId, @Name, @IsPoint, @IsLine, @IsLineTopological, @IsPolygon, @IsText, @FontId, @LayerId, @GroupId);
SELECT EntityId, Name, IsPoint, IsLine, IsLineTopological, IsPolygon, IsText, FontId, LayerId, GroupId FROM EntityTypes WHERE (EntityId = @EntityId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsPoint", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPoint", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsLine", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLine", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsLineTopological", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLineTopological", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsPolygon", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPolygon", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsText", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsText", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[EntityTypes] SET [EntityId] = @EntityId, [Name] = @Name, [IsPoint] = @IsPoint, [IsLine] = @IsLine, [IsLineTopological] = @IsLineTopological, [IsPolygon] = @IsPolygon, [IsText] = @IsText, [FontId] = @FontId, [LayerId] = @LayerId, [GroupId] = @GroupId WHERE (([EntityId] = @Original_EntityId) AND ([Name] = @Original_Name) AND ([IsPoint] = @Original_IsPoint) AND ([IsLine] = @Original_IsLine) AND ([IsLineTopological] = @Original_IsLineTopological) AND ([IsPolygon] = @Original_IsPolygon) AND ([IsText] = @Original_IsText) AND ([FontId] = @Original_FontId) AND ([LayerId] = @Original_LayerId) AND ([GroupId] = @Original_GroupId));
SELECT EntityId, Name, IsPoint, IsLine, IsLineTopological, IsPolygon, IsText, FontId, LayerId, GroupId FROM EntityTypes WHERE (EntityId = @EntityId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsPoint", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPoint", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsLine", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLine", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsLineTopological", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLineTopological", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsPolygon", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPolygon", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsText", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsText", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsPoint", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPoint", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsLine", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLine", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsLineTopological", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsLineTopological", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsPolygon", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsPolygon", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsText", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsText", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EntityId, Name, IsPoint, IsLine, IsLineTopological, IsPolygon, IsText, Fon" +
                "tId, LayerId, GroupId FROM dbo.EntityTypes";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.EntityTypeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.EntityTypeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.EntityTypeDataTable dataTable = new BacksightDataSet.EntityTypeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.EntityTypeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "EntityType");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_EntityId, string Original_Name, string Original_IsPoint, string Original_IsLine, string Original_IsLineTopological, string Original_IsPolygon, string Original_IsText, int Original_FontId, int Original_LayerId, int Original_GroupId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_EntityId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            if ((Original_IsPoint == null)) {
                throw new System.ArgumentNullException("Original_IsPoint");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_IsPoint));
            }
            if ((Original_IsLine == null)) {
                throw new System.ArgumentNullException("Original_IsLine");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_IsLine));
            }
            if ((Original_IsLineTopological == null)) {
                throw new System.ArgumentNullException("Original_IsLineTopological");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_IsLineTopological));
            }
            if ((Original_IsPolygon == null)) {
                throw new System.ArgumentNullException("Original_IsPolygon");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_IsPolygon));
            }
            if ((Original_IsText == null)) {
                throw new System.ArgumentNullException("Original_IsText");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_IsText));
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_FontId));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_LayerId));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(Original_GroupId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int EntityId, string Name, string IsPoint, string IsLine, string IsLineTopological, string IsPolygon, string IsText, int FontId, int LayerId, int GroupId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(EntityId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((IsPoint == null)) {
                throw new System.ArgumentNullException("IsPoint");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(IsPoint));
            }
            if ((IsLine == null)) {
                throw new System.ArgumentNullException("IsLine");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(IsLine));
            }
            if ((IsLineTopological == null)) {
                throw new System.ArgumentNullException("IsLineTopological");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(IsLineTopological));
            }
            if ((IsPolygon == null)) {
                throw new System.ArgumentNullException("IsPolygon");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(IsPolygon));
            }
            if ((IsText == null)) {
                throw new System.ArgumentNullException("IsText");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(IsText));
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(FontId));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(LayerId));
            this.Adapter.InsertCommand.Parameters[9].Value = ((int)(GroupId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int EntityId, 
                    string Name, 
                    string IsPoint, 
                    string IsLine, 
                    string IsLineTopological, 
                    string IsPolygon, 
                    string IsText, 
                    int FontId, 
                    int LayerId, 
                    int GroupId, 
                    int Original_EntityId, 
                    string Original_Name, 
                    string Original_IsPoint, 
                    string Original_IsLine, 
                    string Original_IsLineTopological, 
                    string Original_IsPolygon, 
                    string Original_IsText, 
                    int Original_FontId, 
                    int Original_LayerId, 
                    int Original_GroupId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(EntityId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((IsPoint == null)) {
                throw new System.ArgumentNullException("IsPoint");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(IsPoint));
            }
            if ((IsLine == null)) {
                throw new System.ArgumentNullException("IsLine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(IsLine));
            }
            if ((IsLineTopological == null)) {
                throw new System.ArgumentNullException("IsLineTopological");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(IsLineTopological));
            }
            if ((IsPolygon == null)) {
                throw new System.ArgumentNullException("IsPolygon");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(IsPolygon));
            }
            if ((IsText == null)) {
                throw new System.ArgumentNullException("IsText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(IsText));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(FontId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(LayerId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(GroupId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_EntityId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_Name));
            }
            if ((Original_IsPoint == null)) {
                throw new System.ArgumentNullException("Original_IsPoint");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_IsPoint));
            }
            if ((Original_IsLine == null)) {
                throw new System.ArgumentNullException("Original_IsLine");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_IsLine));
            }
            if ((Original_IsLineTopological == null)) {
                throw new System.ArgumentNullException("Original_IsLineTopological");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Original_IsLineTopological));
            }
            if ((Original_IsPolygon == null)) {
                throw new System.ArgumentNullException("Original_IsPolygon");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_IsPolygon));
            }
            if ((Original_IsText == null)) {
                throw new System.ArgumentNullException("Original_IsText");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_IsText));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_FontId));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_LayerId));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_GroupId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class EntityTypeSchemaTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EntityTypeSchemaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "EntityTypeSchema";
            tableMapping.ColumnMappings.Add("EntityId", "EntityId");
            tableMapping.ColumnMappings.Add("SchemaId", "SchemaId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[EntityTypeSchemas] WHERE (([EntityId] = @Original_EntityId) AN" +
                "D ([SchemaId] = @Original_SchemaId))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[EntityTypeSchemas] ([EntityId], [SchemaId]) VALUES (@EntityId," +
                " @SchemaId);\r\nSELECT EntityId, SchemaId FROM EntityTypeSchemas WHERE (EntityId =" +
                " @EntityId) AND (SchemaId = @SchemaId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[EntityTypeSchemas] SET [EntityId] = @EntityId, [SchemaId] = @SchemaId WHERE (([EntityId] = @Original_EntityId) AND ([SchemaId] = @Original_SchemaId));
SELECT EntityId, SchemaId FROM EntityTypeSchemas WHERE (EntityId = @EntityId) AND (SchemaId = @SchemaId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EntityId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "EntityId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT EntityId, SchemaId FROM dbo.EntityTypeSchemas";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.EntityTypeSchemaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.EntityTypeSchemaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.EntityTypeSchemaDataTable dataTable = new BacksightDataSet.EntityTypeSchemaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.EntityTypeSchemaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "EntityTypeSchema");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_EntityId, int Original_SchemaId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_EntityId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_SchemaId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int EntityId, int SchemaId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(EntityId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(SchemaId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int EntityId, int SchemaId, int Original_EntityId, int Original_SchemaId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(EntityId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(SchemaId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_EntityId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_SchemaId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class FontTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FontTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Font";
            tableMapping.ColumnMappings.Add("FontId", "FontId");
            tableMapping.ColumnMappings.Add("TypeFace", "TypeFace");
            tableMapping.ColumnMappings.Add("PointSize", "PointSize");
            tableMapping.ColumnMappings.Add("IsBold", "IsBold");
            tableMapping.ColumnMappings.Add("IsItalic", "IsItalic");
            tableMapping.ColumnMappings.Add("IsUnderline", "IsUnderline");
            tableMapping.ColumnMappings.Add("FontFile", "FontFile");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Fonts] WHERE (([FontId] = @Original_FontId) AND ([TypeFace] = @Original_TypeFace) AND ([PointSize] = @Original_PointSize) AND ([IsBold] = @Original_IsBold) AND ([IsItalic] = @Original_IsItalic) AND ([IsUnderline] = @Original_IsUnderline) AND ([FontFile] = @Original_FontFile))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TypeFace", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TypeFace", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PointSize", System.Data.SqlDbType.Real, 0, System.Data.ParameterDirection.Input, 0, 0, "PointSize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsBold", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsBold", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsItalic", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsItalic", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsUnderline", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsUnderline", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FontFile", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FontFile", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Fonts] ([FontId], [TypeFace], [PointSize], [IsBold], [IsItalic], [IsUnderline], [FontFile]) VALUES (@FontId, @TypeFace, @PointSize, @IsBold, @IsItalic, @IsUnderline, @FontFile);
SELECT FontId, TypeFace, PointSize, IsBold, IsItalic, IsUnderline, FontFile FROM Fonts WHERE (FontId = @FontId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TypeFace", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TypeFace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PointSize", System.Data.SqlDbType.Real, 0, System.Data.ParameterDirection.Input, 0, 0, "PointSize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsBold", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsBold", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsItalic", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsItalic", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsUnderline", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsUnderline", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FontFile", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FontFile", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Fonts] SET [FontId] = @FontId, [TypeFace] = @TypeFace, [PointSize] = @PointSize, [IsBold] = @IsBold, [IsItalic] = @IsItalic, [IsUnderline] = @IsUnderline, [FontFile] = @FontFile WHERE (([FontId] = @Original_FontId) AND ([TypeFace] = @Original_TypeFace) AND ([PointSize] = @Original_PointSize) AND ([IsBold] = @Original_IsBold) AND ([IsItalic] = @Original_IsItalic) AND ([IsUnderline] = @Original_IsUnderline) AND ([FontFile] = @Original_FontFile));
SELECT FontId, TypeFace, PointSize, IsBold, IsItalic, IsUnderline, FontFile FROM Fonts WHERE (FontId = @FontId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TypeFace", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TypeFace", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PointSize", System.Data.SqlDbType.Real, 0, System.Data.ParameterDirection.Input, 0, 0, "PointSize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsBold", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsBold", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsItalic", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsItalic", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsUnderline", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsUnderline", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FontFile", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FontFile", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FontId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "FontId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TypeFace", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TypeFace", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PointSize", System.Data.SqlDbType.Real, 0, System.Data.ParameterDirection.Input, 0, 0, "PointSize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsBold", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsBold", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsItalic", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsItalic", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsUnderline", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "IsUnderline", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FontFile", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "FontFile", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT FontId, TypeFace, PointSize, IsBold, IsItalic, IsUnderline, FontFile FROM " +
                "dbo.Fonts";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.FontDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.FontDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.FontDataTable dataTable = new BacksightDataSet.FontDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.FontDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Font");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_FontId, string Original_TypeFace, float Original_PointSize, string Original_IsBold, string Original_IsItalic, string Original_IsUnderline, string Original_FontFile) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_FontId));
            if ((Original_TypeFace == null)) {
                throw new System.ArgumentNullException("Original_TypeFace");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TypeFace));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((float)(Original_PointSize));
            if ((Original_IsBold == null)) {
                throw new System.ArgumentNullException("Original_IsBold");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_IsBold));
            }
            if ((Original_IsItalic == null)) {
                throw new System.ArgumentNullException("Original_IsItalic");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_IsItalic));
            }
            if ((Original_IsUnderline == null)) {
                throw new System.ArgumentNullException("Original_IsUnderline");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_IsUnderline));
            }
            if ((Original_FontFile == null)) {
                throw new System.ArgumentNullException("Original_FontFile");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_FontFile));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int FontId, string TypeFace, float PointSize, string IsBold, string IsItalic, string IsUnderline, string FontFile) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(FontId));
            if ((TypeFace == null)) {
                throw new System.ArgumentNullException("TypeFace");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TypeFace));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((float)(PointSize));
            if ((IsBold == null)) {
                throw new System.ArgumentNullException("IsBold");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(IsBold));
            }
            if ((IsItalic == null)) {
                throw new System.ArgumentNullException("IsItalic");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(IsItalic));
            }
            if ((IsUnderline == null)) {
                throw new System.ArgumentNullException("IsUnderline");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(IsUnderline));
            }
            if ((FontFile == null)) {
                throw new System.ArgumentNullException("FontFile");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(FontFile));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int FontId, string TypeFace, float PointSize, string IsBold, string IsItalic, string IsUnderline, string FontFile, int Original_FontId, string Original_TypeFace, float Original_PointSize, string Original_IsBold, string Original_IsItalic, string Original_IsUnderline, string Original_FontFile) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(FontId));
            if ((TypeFace == null)) {
                throw new System.ArgumentNullException("TypeFace");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TypeFace));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((float)(PointSize));
            if ((IsBold == null)) {
                throw new System.ArgumentNullException("IsBold");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(IsBold));
            }
            if ((IsItalic == null)) {
                throw new System.ArgumentNullException("IsItalic");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(IsItalic));
            }
            if ((IsUnderline == null)) {
                throw new System.ArgumentNullException("IsUnderline");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(IsUnderline));
            }
            if ((FontFile == null)) {
                throw new System.ArgumentNullException("FontFile");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(FontFile));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_FontId));
            if ((Original_TypeFace == null)) {
                throw new System.ArgumentNullException("Original_TypeFace");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_TypeFace));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((float)(Original_PointSize));
            if ((Original_IsBold == null)) {
                throw new System.ArgumentNullException("Original_IsBold");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_IsBold));
            }
            if ((Original_IsItalic == null)) {
                throw new System.ArgumentNullException("Original_IsItalic");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_IsItalic));
            }
            if ((Original_IsUnderline == null)) {
                throw new System.ArgumentNullException("Original_IsUnderline");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_IsUnderline));
            }
            if ((Original_FontFile == null)) {
                throw new System.ArgumentNullException("Original_FontFile");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_FontFile));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class IdAllocationTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IdAllocationTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "IdAllocation";
            tableMapping.ColumnMappings.Add("LowestId", "LowestId");
            tableMapping.ColumnMappings.Add("HighestId", "HighestId");
            tableMapping.ColumnMappings.Add("GroupId", "GroupId");
            tableMapping.ColumnMappings.Add("JobId", "JobId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("TimeAllocated", "TimeAllocated");
            tableMapping.ColumnMappings.Add("NumUsed", "NumUsed");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[IdAllocations] WHERE (([LowestId] = @Original_LowestId) AND ([HighestId] = @Original_HighestId) AND ([GroupId] = @Original_GroupId) AND ([JobId] = @Original_JobId) AND ([UserId] = @Original_UserId) AND ([TimeAllocated] = @Original_TimeAllocated) AND ([NumUsed] = @Original_NumUsed))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeAllocated", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeAllocated", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumUsed", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumUsed", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[IdAllocations] ([LowestId], [HighestId], [GroupId], [JobId], [UserId], [TimeAllocated], [NumUsed]) VALUES (@LowestId, @HighestId, @GroupId, @JobId, @UserId, @TimeAllocated, @NumUsed);
SELECT LowestId, HighestId, GroupId, JobId, UserId, TimeAllocated, NumUsed FROM IdAllocations WHERE (LowestId = @LowestId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeAllocated", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeAllocated", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumUsed", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumUsed", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IdAllocations] SET [LowestId] = @LowestId, [HighestId] = @HighestId, [GroupId] = @GroupId, [JobId] = @JobId, [UserId] = @UserId, [TimeAllocated] = @TimeAllocated, [NumUsed] = @NumUsed WHERE (([LowestId] = @Original_LowestId) AND ([HighestId] = @Original_HighestId) AND ([GroupId] = @Original_GroupId) AND ([JobId] = @Original_JobId) AND ([UserId] = @Original_UserId) AND ([TimeAllocated] = @Original_TimeAllocated) AND ([NumUsed] = @Original_NumUsed));
SELECT LowestId, HighestId, GroupId, JobId, UserId, TimeAllocated, NumUsed FROM IdAllocations WHERE (LowestId = @LowestId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TimeAllocated", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeAllocated", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumUsed", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumUsed", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TimeAllocated", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "TimeAllocated", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumUsed", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumUsed", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LowestId, HighestId, GroupId, JobId, UserId, TimeAllocated, NumUsed FROM d" +
                "bo.IdAllocations";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.IdAllocationDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.IdAllocationDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.IdAllocationDataTable dataTable = new BacksightDataSet.IdAllocationDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.IdAllocationDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "IdAllocation");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LowestId, int Original_HighestId, int Original_GroupId, int Original_JobId, int Original_UserId, System.DateTime Original_TimeAllocated, int Original_NumUsed) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LowestId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_HighestId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_GroupId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_JobId));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_UserId));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_TimeAllocated));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_NumUsed));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int LowestId, int HighestId, int GroupId, int JobId, int UserId, System.DateTime TimeAllocated, int NumUsed) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(LowestId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(HighestId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(GroupId));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(JobId));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(UserId));
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(TimeAllocated));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(NumUsed));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int LowestId, int HighestId, int GroupId, int JobId, int UserId, System.DateTime TimeAllocated, int NumUsed, int Original_LowestId, int Original_HighestId, int Original_GroupId, int Original_JobId, int Original_UserId, System.DateTime Original_TimeAllocated, int Original_NumUsed) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(LowestId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(HighestId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(GroupId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(JobId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(UserId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(TimeAllocated));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(NumUsed));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_LowestId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_HighestId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_GroupId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_JobId));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_UserId));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(Original_TimeAllocated));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_NumUsed));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class IdFreeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IdFreeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "IdFree";
            tableMapping.ColumnMappings.Add("GroupId", "GroupId");
            tableMapping.ColumnMappings.Add("LowestId", "LowestId");
            tableMapping.ColumnMappings.Add("HighestId", "HighestId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[IdFree] WHERE (([GroupId] = @Original_GroupId) AND ([LowestId]" +
                " = @Original_LowestId) AND ([HighestId] = @Original_HighestId))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[IdFree] ([GroupId], [LowestId], [HighestId]) VALUES (@GroupId," +
                " @LowestId, @HighestId);\r\nSELECT GroupId, LowestId, HighestId FROM IdFree WHERE " +
                "(GroupId = @GroupId) AND (LowestId = @LowestId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IdFree] SET [GroupId] = @GroupId, [LowestId] = @LowestId, [HighestId] = @HighestId WHERE (([GroupId] = @Original_GroupId) AND ([LowestId] = @Original_LowestId) AND ([HighestId] = @Original_HighestId));
SELECT GroupId, LowestId, HighestId FROM IdFree WHERE (GroupId = @GroupId) AND (LowestId = @LowestId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT GroupId, LowestId, HighestId FROM dbo.IdFree";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.IdFreeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.IdFreeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.IdFreeDataTable dataTable = new BacksightDataSet.IdFreeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.IdFreeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "IdFree");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_GroupId, int Original_LowestId, int Original_HighestId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_GroupId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_LowestId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_HighestId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int GroupId, int LowestId, int HighestId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(GroupId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(LowestId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(HighestId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int GroupId, int LowestId, int HighestId, int Original_GroupId, int Original_LowestId, int Original_HighestId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(GroupId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(LowestId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(HighestId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_GroupId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_LowestId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_HighestId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class IdGroupTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IdGroupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "IdGroup";
            tableMapping.ColumnMappings.Add("GroupId", "GroupId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("LowestId", "LowestId");
            tableMapping.ColumnMappings.Add("HighestId", "HighestId");
            tableMapping.ColumnMappings.Add("PacketSize", "PacketSize");
            tableMapping.ColumnMappings.Add("CheckDigit", "CheckDigit");
            tableMapping.ColumnMappings.Add("KeyFormat", "KeyFormat");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[IdGroups] WHERE (([GroupId] = @Original_GroupId) AND ([Name] = @Original_Name) AND ([LowestId] = @Original_LowestId) AND ([HighestId] = @Original_HighestId) AND ([PacketSize] = @Original_PacketSize) AND ([CheckDigit] = @Original_CheckDigit) AND ([KeyFormat] = @Original_KeyFormat))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PacketSize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PacketSize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CheckDigit", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckDigit", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_KeyFormat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "KeyFormat", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[IdGroups] ([GroupId], [Name], [LowestId], [HighestId], [PacketSize], [CheckDigit], [KeyFormat]) VALUES (@GroupId, @Name, @LowestId, @HighestId, @PacketSize, @CheckDigit, @KeyFormat);
SELECT GroupId, Name, LowestId, HighestId, PacketSize, CheckDigit, KeyFormat FROM IdGroups WHERE (GroupId = @GroupId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PacketSize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PacketSize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CheckDigit", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckDigit", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KeyFormat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "KeyFormat", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[IdGroups] SET [GroupId] = @GroupId, [Name] = @Name, [LowestId] = @LowestId, [HighestId] = @HighestId, [PacketSize] = @PacketSize, [CheckDigit] = @CheckDigit, [KeyFormat] = @KeyFormat WHERE (([GroupId] = @Original_GroupId) AND ([Name] = @Original_Name) AND ([LowestId] = @Original_LowestId) AND ([HighestId] = @Original_HighestId) AND ([PacketSize] = @Original_PacketSize) AND ([CheckDigit] = @Original_CheckDigit) AND ([KeyFormat] = @Original_KeyFormat));
SELECT GroupId, Name, LowestId, HighestId, PacketSize, CheckDigit, KeyFormat FROM IdGroups WHERE (GroupId = @GroupId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PacketSize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PacketSize", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CheckDigit", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckDigit", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@KeyFormat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "KeyFormat", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_GroupId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "GroupId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LowestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LowestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_HighestId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "HighestId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PacketSize", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "PacketSize", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CheckDigit", System.Data.SqlDbType.Char, 0, System.Data.ParameterDirection.Input, 0, 0, "CheckDigit", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_KeyFormat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "KeyFormat", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT GroupId, Name, LowestId, HighestId, PacketSize, CheckDigit, KeyFormat FROM" +
                " dbo.IdGroups";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.IdGroupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.IdGroupDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.IdGroupDataTable dataTable = new BacksightDataSet.IdGroupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.IdGroupDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "IdGroup");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_GroupId, string Original_Name, int Original_LowestId, int Original_HighestId, int Original_PacketSize, string Original_CheckDigit, string Original_KeyFormat) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_GroupId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_LowestId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_HighestId));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_PacketSize));
            if ((Original_CheckDigit == null)) {
                throw new System.ArgumentNullException("Original_CheckDigit");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_CheckDigit));
            }
            if ((Original_KeyFormat == null)) {
                throw new System.ArgumentNullException("Original_KeyFormat");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_KeyFormat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int GroupId, string Name, int LowestId, int HighestId, int PacketSize, string CheckDigit, string KeyFormat) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(GroupId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(LowestId));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(HighestId));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(PacketSize));
            if ((CheckDigit == null)) {
                throw new System.ArgumentNullException("CheckDigit");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(CheckDigit));
            }
            if ((KeyFormat == null)) {
                throw new System.ArgumentNullException("KeyFormat");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(KeyFormat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int GroupId, string Name, int LowestId, int HighestId, int PacketSize, string CheckDigit, string KeyFormat, int Original_GroupId, string Original_Name, int Original_LowestId, int Original_HighestId, int Original_PacketSize, string Original_CheckDigit, string Original_KeyFormat) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(GroupId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(LowestId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(HighestId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(PacketSize));
            if ((CheckDigit == null)) {
                throw new System.ArgumentNullException("CheckDigit");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(CheckDigit));
            }
            if ((KeyFormat == null)) {
                throw new System.ArgumentNullException("KeyFormat");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(KeyFormat));
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_GroupId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_LowestId));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_HighestId));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_PacketSize));
            if ((Original_CheckDigit == null)) {
                throw new System.ArgumentNullException("Original_CheckDigit");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_CheckDigit));
            }
            if ((Original_KeyFormat == null)) {
                throw new System.ArgumentNullException("Original_KeyFormat");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(Original_KeyFormat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class JobTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public JobTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Job";
            tableMapping.ColumnMappings.Add("JobId", "JobId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("ZoneId", "ZoneId");
            tableMapping.ColumnMappings.Add("LayerId", "LayerId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Jobs] WHERE (([JobId] = @Original_JobId) AND ([Name] = @Origin" +
                "al_Name) AND ([ZoneId] = @Original_ZoneId) AND ([LayerId] = @Original_LayerId))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ZoneId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ZoneId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Jobs] ([Name], [ZoneId], [LayerId]) VALUES (@Name, @ZoneId, @L" +
                "ayerId);\r\nSELECT JobId, Name, ZoneId, LayerId FROM Jobs WHERE (JobId = SCOPE_IDE" +
                "NTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ZoneId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ZoneId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Jobs] SET [Name] = @Name, [ZoneId] = @ZoneId, [LayerId] = @LayerId WHERE (([JobId] = @Original_JobId) AND ([Name] = @Original_Name) AND ([ZoneId] = @Original_ZoneId) AND ([LayerId] = @Original_LayerId));
SELECT JobId, Name, ZoneId, LayerId FROM Jobs WHERE (JobId = @JobId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ZoneId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ZoneId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ZoneId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ZoneId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT JobId, Name, ZoneId, LayerId FROM dbo.Jobs";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.JobDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.JobDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.JobDataTable dataTable = new BacksightDataSet.JobDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.JobDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Job");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_JobId, string Original_Name, int Original_ZoneId, int Original_LayerId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_JobId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ZoneId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_LayerId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, int ZoneId, int LayerId) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(ZoneId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(LayerId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, int ZoneId, int LayerId, int Original_JobId, string Original_Name, int Original_ZoneId, int Original_LayerId, int JobId) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(ZoneId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(LayerId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_JobId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_ZoneId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_LayerId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(JobId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LastRevisionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LastRevisionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "LastRevision";
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("RevisionTime", "RevisionTime");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[LastRevision] ([RevisionTime]) VALUES (@RevisionTime)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RevisionTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "RevisionTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Id, RevisionTime FROM dbo.LastRevision";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.LastRevisionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.LastRevisionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.LastRevisionDataTable dataTable = new BacksightDataSet.LastRevisionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.LastRevisionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "LastRevision");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.DateTime RevisionTime) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((System.DateTime)(RevisionTime));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class LayerTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LayerTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Layer";
            tableMapping.ColumnMappings.Add("LayerId", "LayerId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("ThemeId", "ThemeId");
            tableMapping.ColumnMappings.Add("ThemeSequence", "ThemeSequence");
            tableMapping.ColumnMappings.Add("DefaultPointId", "DefaultPointId");
            tableMapping.ColumnMappings.Add("DefaultLineId", "DefaultLineId");
            tableMapping.ColumnMappings.Add("DefaultPolygonId", "DefaultPolygonId");
            tableMapping.ColumnMappings.Add("DefaultTextId", "DefaultTextId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Layers] WHERE (([LayerId] = @Original_LayerId) AND ([Name] = @Original_Name) AND ([ThemeId] = @Original_ThemeId) AND ([ThemeSequence] = @Original_ThemeSequence) AND ([DefaultPointId] = @Original_DefaultPointId) AND ([DefaultLineId] = @Original_DefaultLineId) AND ([DefaultPolygonId] = @Original_DefaultPolygonId) AND ([DefaultTextId] = @Original_DefaultTextId))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ThemeSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeSequence", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultPointId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPointId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultLineId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultLineId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultPolygonId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPolygonId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultTextId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultTextId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Layers] ([LayerId], [Name], [ThemeId], [ThemeSequence], [DefaultPointId], [DefaultLineId], [DefaultPolygonId], [DefaultTextId]) VALUES (@LayerId, @Name, @ThemeId, @ThemeSequence, @DefaultPointId, @DefaultLineId, @DefaultPolygonId, @DefaultTextId);
SELECT LayerId, Name, ThemeId, ThemeSequence, DefaultPointId, DefaultLineId, DefaultPolygonId, DefaultTextId FROM Layers WHERE (LayerId = @LayerId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ThemeSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeSequence", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultPointId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPointId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultLineId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultLineId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultPolygonId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPolygonId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultTextId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultTextId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Layers] SET [LayerId] = @LayerId, [Name] = @Name, [ThemeId] = @ThemeId, [ThemeSequence] = @ThemeSequence, [DefaultPointId] = @DefaultPointId, [DefaultLineId] = @DefaultLineId, [DefaultPolygonId] = @DefaultPolygonId, [DefaultTextId] = @DefaultTextId WHERE (([LayerId] = @Original_LayerId) AND ([Name] = @Original_Name) AND ([ThemeId] = @Original_ThemeId) AND ([ThemeSequence] = @Original_ThemeSequence) AND ([DefaultPointId] = @Original_DefaultPointId) AND ([DefaultLineId] = @Original_DefaultLineId) AND ([DefaultPolygonId] = @Original_DefaultPolygonId) AND ([DefaultTextId] = @Original_DefaultTextId));
SELECT LayerId, Name, ThemeId, ThemeSequence, DefaultPointId, DefaultLineId, DefaultPolygonId, DefaultTextId FROM Layers WHERE (LayerId = @LayerId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ThemeSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeSequence", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultPointId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPointId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultLineId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultLineId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultPolygonId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPolygonId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DefaultTextId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultTextId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LayerId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LayerId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ThemeSequence", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeSequence", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultPointId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPointId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultLineId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultLineId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultPolygonId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultPolygonId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DefaultTextId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "DefaultTextId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LayerId, Name, ThemeId, ThemeSequence, DefaultPointId, DefaultLineId, Defa" +
                "ultPolygonId, DefaultTextId FROM dbo.Layers";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.LayerDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.LayerDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.LayerDataTable dataTable = new BacksightDataSet.LayerDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.LayerDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Layer");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_LayerId, string Original_Name, int Original_ThemeId, int Original_ThemeSequence, int Original_DefaultPointId, int Original_DefaultLineId, int Original_DefaultPolygonId, int Original_DefaultTextId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_LayerId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_ThemeId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_ThemeSequence));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(Original_DefaultPointId));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_DefaultLineId));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_DefaultPolygonId));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_DefaultTextId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int LayerId, string Name, int ThemeId, int ThemeSequence, int DefaultPointId, int DefaultLineId, int DefaultPolygonId, int DefaultTextId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(LayerId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(ThemeId));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(ThemeSequence));
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(DefaultPointId));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(DefaultLineId));
            this.Adapter.InsertCommand.Parameters[6].Value = ((int)(DefaultPolygonId));
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(DefaultTextId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int LayerId, 
                    string Name, 
                    int ThemeId, 
                    int ThemeSequence, 
                    int DefaultPointId, 
                    int DefaultLineId, 
                    int DefaultPolygonId, 
                    int DefaultTextId, 
                    int Original_LayerId, 
                    string Original_Name, 
                    int Original_ThemeId, 
                    int Original_ThemeSequence, 
                    int Original_DefaultPointId, 
                    int Original_DefaultLineId, 
                    int Original_DefaultPolygonId, 
                    int Original_DefaultTextId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(LayerId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(ThemeId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(ThemeSequence));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(DefaultPointId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(DefaultLineId));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(DefaultPolygonId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(DefaultTextId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_LayerId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Original_ThemeId));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_ThemeSequence));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_DefaultPointId));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_DefaultLineId));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(Original_DefaultPolygonId));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_DefaultTextId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PropertyTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PropertyTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Property";
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Value", "Value");
            tableMapping.ColumnMappings.Add("Description", "Description");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Properties] WHERE (([Name] = @Original_Name) AND ([Value] = @O" +
                "riginal_Value) AND ([Description] = @Original_Description))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Value", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Properties] ([Name], [Value], [Description]) VALUES (@Name, @V" +
                "alue, @Description);\r\nSELECT Name, Value, Description FROM Properties WHERE (Nam" +
                "e = @Name)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Properties] SET [Name] = @Name, [Value] = @Value, [Description] = @Description WHERE (([Name] = @Original_Name) AND ([Value] = @Original_Value) AND ([Description] = @Original_Description));
SELECT Name, Value, Description FROM Properties WHERE (Name = @Name)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Value", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Value", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Value", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Description", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT Name, Value, Description FROM dbo.Properties";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.PropertyDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.PropertyDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.PropertyDataTable dataTable = new BacksightDataSet.PropertyDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.PropertyDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Property");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_Name, string Original_Value, string Original_Description) {
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_Name));
            }
            if ((Original_Value == null)) {
                throw new System.ArgumentNullException("Original_Value");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Value));
            }
            if ((Original_Description == null)) {
                throw new System.ArgumentNullException("Original_Description");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name, string Value, string Description) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((Value == null)) {
                throw new System.ArgumentNullException("Value");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Value));
            }
            if ((Description == null)) {
                throw new System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, string Value, string Description, string Original_Name, string Original_Value, string Original_Description) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            if ((Value == null)) {
                throw new System.ArgumentNullException("Value");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Value));
            }
            if ((Description == null)) {
                throw new System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Description));
            }
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Name));
            }
            if ((Original_Value == null)) {
                throw new System.ArgumentNullException("Original_Value");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Value));
            }
            if ((Original_Description == null)) {
                throw new System.ArgumentNullException("Original_Description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_Description));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SchemaTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SchemaTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Schema";
            tableMapping.ColumnMappings.Add("SchemaId", "SchemaId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("TableName", "TableName");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Schemas] WHERE (([SchemaId] = @Original_SchemaId) AND ([Name] " +
                "= @Original_Name) AND ([TableName] = @Original_TableName))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TableName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TableName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Schemas] ([SchemaId], [Name], [TableName]) VALUES (@SchemaId, " +
                "@Name, @TableName);\r\nSELECT SchemaId, Name, TableName FROM Schemas WHERE (Schema" +
                "Id = @SchemaId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TableName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TableName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Schemas] SET [SchemaId] = @SchemaId, [Name] = @Name, [TableName] = @TableName WHERE (([SchemaId] = @Original_SchemaId) AND ([Name] = @Original_Name) AND ([TableName] = @Original_TableName));
SELECT SchemaId, Name, TableName FROM Schemas WHERE (SchemaId = @SchemaId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TableName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TableName", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TableName", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TableName", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SchemaId, Name, TableName FROM dbo.Schemas";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.SchemaDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.SchemaDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.SchemaDataTable dataTable = new BacksightDataSet.SchemaDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.SchemaDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Schema");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SchemaId, string Original_Name, string Original_TableName) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SchemaId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            if ((Original_TableName == null)) {
                throw new System.ArgumentNullException("Original_TableName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_TableName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SchemaId, string Name, string TableName) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SchemaId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((TableName == null)) {
                throw new System.ArgumentNullException("TableName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TableName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int SchemaId, string Name, string TableName, int Original_SchemaId, string Original_Name, string Original_TableName) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SchemaId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((TableName == null)) {
                throw new System.ArgumentNullException("TableName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TableName));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_SchemaId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Name));
            }
            if ((Original_TableName == null)) {
                throw new System.ArgumentNullException("Original_TableName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_TableName));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SchemaTemplateTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SchemaTemplateTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SchemaTemplate";
            tableMapping.ColumnMappings.Add("SchemaId", "SchemaId");
            tableMapping.ColumnMappings.Add("TemplateId", "TemplateId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[SchemaTemplates] WHERE (([SchemaId] = @Original_SchemaId) AND " +
                "([TemplateId] = @Original_TemplateId))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SchemaTemplates] ([SchemaId], [TemplateId]) VALUES (@SchemaId," +
                " @TemplateId);\r\nSELECT SchemaId, TemplateId FROM SchemaTemplates WHERE (SchemaId" +
                " = @SchemaId) AND (TemplateId = @TemplateId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[SchemaTemplates] SET [SchemaId] = @SchemaId, [TemplateId] = @TemplateId WHERE (([SchemaId] = @Original_SchemaId) AND ([TemplateId] = @Original_TemplateId));
SELECT SchemaId, TemplateId FROM SchemaTemplates WHERE (SchemaId = @SchemaId) AND (TemplateId = @TemplateId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SchemaId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SchemaId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SchemaId, TemplateId FROM dbo.SchemaTemplates";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.SchemaTemplateDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.SchemaTemplateDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.SchemaTemplateDataTable dataTable = new BacksightDataSet.SchemaTemplateDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.SchemaTemplateDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SchemaTemplate");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SchemaId, int Original_TemplateId) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SchemaId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_TemplateId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int SchemaId, int TemplateId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(SchemaId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(TemplateId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int SchemaId, int TemplateId, int Original_SchemaId, int Original_TemplateId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(SchemaId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(TemplateId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_SchemaId));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_TemplateId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SessionTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SessionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Session";
            tableMapping.ColumnMappings.Add("SessionId", "SessionId");
            tableMapping.ColumnMappings.Add("JobId", "JobId");
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("Revision", "Revision");
            tableMapping.ColumnMappings.Add("StartTime", "StartTime");
            tableMapping.ColumnMappings.Add("EndTime", "EndTime");
            tableMapping.ColumnMappings.Add("NumItem", "NumItem");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Sessions] WHERE (([SessionId] = @Original_SessionId) AND ([JobId] = @Original_JobId) AND ([UserId] = @Original_UserId) AND ([Revision] = @Original_Revision) AND ([StartTime] = @Original_StartTime) AND ([EndTime] = @Original_EndTime) AND ([NumItem] = @Original_NumItem))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SessionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SessionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_StartTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "StartTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EndTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "EndTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumItem", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumItem", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Sessions] ([JobId], [UserId], [Revision], [StartTime], [EndTime], [NumItem]) VALUES (@JobId, @UserId, @Revision, @StartTime, @EndTime, @NumItem);
SELECT SessionId, JobId, UserId, Revision, StartTime, EndTime, NumItem FROM Sessions WHERE (SessionId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StartTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "StartTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EndTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "EndTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumItem", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumItem", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Sessions] SET [JobId] = @JobId, [UserId] = @UserId, [Revision] = @Revision, [StartTime] = @StartTime, [EndTime] = @EndTime, [NumItem] = @NumItem WHERE (([SessionId] = @Original_SessionId) AND ([JobId] = @Original_JobId) AND ([UserId] = @Original_UserId) AND ([Revision] = @Original_Revision) AND ([StartTime] = @Original_StartTime) AND ([EndTime] = @Original_EndTime) AND ([NumItem] = @Original_NumItem));
SELECT SessionId, JobId, UserId, Revision, StartTime, EndTime, NumItem FROM Sessions WHERE (SessionId = @SessionId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@StartTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "StartTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EndTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "EndTime", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@NumItem", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumItem", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_SessionId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "SessionId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Revision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "Revision", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_StartTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "StartTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EndTime", System.Data.SqlDbType.DateTime, 0, System.Data.ParameterDirection.Input, 0, 0, "EndTime", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_NumItem", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "NumItem", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SessionId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "SessionId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT SessionId, JobId, UserId, Revision, StartTime, EndTime, NumItem FROM dbo.S" +
                "essions";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.SessionDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.SessionDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.SessionDataTable dataTable = new BacksightDataSet.SessionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.SessionDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Session");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_SessionId, int Original_JobId, int Original_UserId, int Original_Revision, System.DateTime Original_StartTime, System.DateTime Original_EndTime, int Original_NumItem) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_SessionId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_JobId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_UserId));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_Revision));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_StartTime));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_EndTime));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_NumItem));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int JobId, int UserId, int Revision, System.DateTime StartTime, System.DateTime EndTime, int NumItem) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(JobId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(UserId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Revision));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.DateTime)(StartTime));
            this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(EndTime));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(NumItem));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int JobId, int UserId, int Revision, System.DateTime StartTime, System.DateTime EndTime, int NumItem, int Original_SessionId, int Original_JobId, int Original_UserId, int Original_Revision, System.DateTime Original_StartTime, System.DateTime Original_EndTime, int Original_NumItem, int SessionId) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(JobId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(UserId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Revision));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.DateTime)(StartTime));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(EndTime));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(NumItem));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(Original_SessionId));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(Original_JobId));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Original_UserId));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_Revision));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(Original_StartTime));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((System.DateTime)(Original_EndTime));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(Original_NumItem));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(SessionId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class SysIdTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SysIdTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "SysId";
            tableMapping.ColumnMappings.Add("LastId", "LastId");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[SysId] ([LastId]) VALUES (@LastId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LastId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT LastId FROM dbo.SysId";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.SysIdDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.SysIdDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.SysIdDataTable dataTable = new BacksightDataSet.SysIdDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.SysIdDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "SysId");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int LastId) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(LastId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TemplateTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TemplateTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Template";
            tableMapping.ColumnMappings.Add("TemplateId", "TemplateId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("TemplateFormat", "TemplateFormat");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Templates] WHERE (([TemplateId] = @Original_TemplateId) AND ([" +
                "Name] = @Original_Name) AND ([TemplateFormat] = @Original_TemplateFormat))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TemplateFormat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateFormat", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Templates] ([TemplateId], [Name], [TemplateFormat]) VALUES (@T" +
                "emplateId, @Name, @TemplateFormat);\r\nSELECT TemplateId, Name, TemplateFormat FRO" +
                "M Templates WHERE (TemplateId = @TemplateId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TemplateFormat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateFormat", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[Templates] SET [TemplateId] = @TemplateId, [Name] = @Name, [TemplateFormat] = @TemplateFormat WHERE (([TemplateId] = @Original_TemplateId) AND ([Name] = @Original_Name) AND ([TemplateFormat] = @Original_TemplateFormat));
SELECT TemplateId, Name, TemplateFormat FROM Templates WHERE (TemplateId = @TemplateId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@TemplateFormat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateFormat", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TemplateId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_TemplateFormat", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "TemplateFormat", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TemplateId, Name, TemplateFormat FROM dbo.Templates";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.TemplateDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.TemplateDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.TemplateDataTable dataTable = new BacksightDataSet.TemplateDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.TemplateDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Template");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_TemplateId, string Original_Name, string Original_TemplateFormat) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_TemplateId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            if ((Original_TemplateFormat == null)) {
                throw new System.ArgumentNullException("Original_TemplateFormat");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_TemplateFormat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int TemplateId, string Name, string TemplateFormat) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(TemplateId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((TemplateFormat == null)) {
                throw new System.ArgumentNullException("TemplateFormat");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(TemplateFormat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int TemplateId, string Name, string TemplateFormat, int Original_TemplateId, string Original_Name, string Original_TemplateFormat) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(TemplateId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            if ((TemplateFormat == null)) {
                throw new System.ArgumentNullException("TemplateFormat");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(TemplateFormat));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_TemplateId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_Name));
            }
            if ((Original_TemplateFormat == null)) {
                throw new System.ArgumentNullException("Original_TemplateFormat");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_TemplateFormat));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ThemeTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ThemeTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Theme";
            tableMapping.ColumnMappings.Add("ThemeId", "ThemeId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Themes] WHERE (([ThemeId] = @Original_ThemeId) AND ([Name] = @" +
                "Original_Name))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Themes] ([ThemeId], [Name]) VALUES (@ThemeId, @Name);\r\nSELECT " +
                "ThemeId, Name FROM Themes WHERE (ThemeId = @ThemeId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Themes] SET [ThemeId] = @ThemeId, [Name] = @Name WHERE (([ThemeId] " +
                "= @Original_ThemeId) AND ([Name] = @Original_Name));\r\nSELECT ThemeId, Name FROM " +
                "Themes WHERE (ThemeId = @ThemeId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ThemeId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ThemeId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ThemeId, Name FROM dbo.Themes";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.ThemeDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.ThemeDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.ThemeDataTable dataTable = new BacksightDataSet.ThemeDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.ThemeDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Theme");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ThemeId, string Original_Name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ThemeId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ThemeId, string Name) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ThemeId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ThemeId, string Name, int Original_ThemeId, string Original_Name) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ThemeId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ThemeId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserJobTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserJobTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UserJob";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("JobId", "JobId");
            tableMapping.ColumnMappings.Add("LastRevision", "LastRevision");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[UserJobs] WHERE (([UserId] = @Original_UserId) AND ([JobId] = " +
                "@Original_JobId) AND ([LastRevision] = @Original_LastRevision))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastRevision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LastRevision", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[UserJobs] ([UserId], [JobId], [LastRevision]) VALUES (@UserId," +
                " @JobId, @LastRevision);\r\nSELECT UserId, JobId, LastRevision FROM UserJobs WHERE" +
                " (JobId = @JobId) AND (UserId = @UserId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastRevision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LastRevision", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[UserJobs] SET [UserId] = @UserId, [JobId] = @JobId, [LastRevision] = @LastRevision WHERE (([UserId] = @Original_UserId) AND ([JobId] = @Original_JobId) AND ([LastRevision] = @Original_LastRevision));
SELECT UserId, JobId, LastRevision FROM UserJobs WHERE (JobId = @JobId) AND (UserId = @UserId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastRevision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LastRevision", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_JobId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "JobId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastRevision", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "LastRevision", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserId, JobId, LastRevision FROM dbo.UserJobs";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.UserJobDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.UserJobDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.UserJobDataTable dataTable = new BacksightDataSet.UserJobDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.UserJobDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "UserJob");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_UserId, int Original_JobId, int Original_LastRevision) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_UserId));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(Original_JobId));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_LastRevision));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int UserId, int JobId, int LastRevision) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(UserId));
            this.Adapter.InsertCommand.Parameters[1].Value = ((int)(JobId));
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(LastRevision));
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int UserId, int JobId, int LastRevision, int Original_UserId, int Original_JobId, int Original_LastRevision) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(UserId));
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(JobId));
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(LastRevision));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(Original_UserId));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_JobId));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(Original_LastRevision));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "User";
            tableMapping.ColumnMappings.Add("UserId", "UserId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Users] WHERE (([UserId] = @Original_UserId) AND ([Name] = @Ori" +
                "ginal_Name))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Users] ([Name]) VALUES (@Name);\r\nSELECT UserId, Name FROM User" +
                "s WHERE (UserId = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Users] SET [Name] = @Name WHERE (([UserId] = @Original_UserId) AND " +
                "([Name] = @Original_Name));\r\nSELECT UserId, Name FROM Users WHERE (UserId = @Use" +
                "rId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId", System.Data.SqlDbType.Int, 4, System.Data.ParameterDirection.Input, 0, 0, "UserId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT UserId, Name FROM dbo.Users";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.UserDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.UserDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.UserDataTable dataTable = new BacksightDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.UserDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "User");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_UserId, string Original_Name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_UserId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string Name) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string Name, int Original_UserId, string Original_Name, int UserId) {
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(Original_UserId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Original_Name));
            }
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(UserId));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ZoneTableAdapter : System.ComponentModel.Component {
        
        private System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private System.Data.SqlClient.SqlConnection _connection;
        
        private System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ZoneTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.SqlClient.SqlDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Zone";
            tableMapping.ColumnMappings.Add("ZoneId", "ZoneId");
            tableMapping.ColumnMappings.Add("Name", "Name");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Zones] WHERE (([ZoneId] = @Original_ZoneId) AND ([Name] = @Ori" +
                "ginal_Name))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ZoneId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ZoneId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Zones] ([ZoneId], [Name]) VALUES (@ZoneId, @Name);\r\nSELECT Zon" +
                "eId, Name FROM Zones WHERE (ZoneId = @ZoneId)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ZoneId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ZoneId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Zones] SET [ZoneId] = @ZoneId, [Name] = @Name WHERE (([ZoneId] = @O" +
                "riginal_ZoneId) AND ([Name] = @Original_Name));\r\nSELECT ZoneId, Name FROM Zones " +
                "WHERE (ZoneId = @ZoneId)";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ZoneId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ZoneId", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ZoneId", System.Data.SqlDbType.Int, 0, System.Data.ParameterDirection.Input, 0, 0, "ZoneId", System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Name", System.Data.SqlDbType.VarChar, 0, System.Data.ParameterDirection.Input, 0, 0, "Name", System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Backsight.Data.Properties.Settings.Default.BacksightConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ZoneId, Name FROM dbo.Zones";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BacksightDataSet.ZoneDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BacksightDataSet.ZoneDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BacksightDataSet.ZoneDataTable dataTable = new BacksightDataSet.ZoneDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet.ZoneDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BacksightDataSet dataSet) {
            return this.Adapter.Update(dataSet, "Zone");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ZoneId, string Original_Name) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ZoneId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_Name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ZoneId, string Name) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ZoneId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ZoneId, string Name, int Original_ZoneId, string Original_Name) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ZoneId));
            if ((Name == null)) {
                throw new System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Name));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_ZoneId));
            if ((Original_Name == null)) {
                throw new System.ArgumentNullException("Original_Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Name));
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
}

#pragma warning restore 1591